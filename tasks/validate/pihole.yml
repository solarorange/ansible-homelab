---
# Pi-hole Validation Tasks
# Generated by Ansible

- name: Check Pi-hole container status
  community.docker.docker_container_info:
    name: pihole
  register: pihole_container
  failed_when: pihole_container.container.State.Status != "running"

- name: Verify Pi-hole API access
  ansible.builtin.uri:
    url: "http://{{ ansible_default_ipv4.address }}:80/admin/api.php?status"
    return_content: yes
    status_code: 200
  register: pihole_status
  failed_when: pihole_status.status != 200

- name: Verify Pi-hole DNS resolution
  ansible.builtin.shell: |
    dig @{{ ansible_default_ipv4.address }} google.com +short
  register: dns_test
  failed_when: dns_test.stdout == ""

- name: Verify Pi-hole web interface
  ansible.builtin.uri:
    url: "https://{{ pihole_domain | default('pihole.' + domain) }}/admin"
    return_content: yes
    status_code: 200
  register: web_interface
  failed_when: web_interface.status != 200

- name: Verify Pi-hole metrics endpoint
  ansible.builtin.uri:
    url: "http://{{ ansible_default_ipv4.address }}:80/admin/api.php?summaryRaw"
    return_content: yes
    status_code: 200
  register: metrics
  failed_when: metrics.status != 200

- name: Verify Pi-hole backup directory
  ansible.builtin.file:
    path: "{{ backup_dir }}/pihole"
    state: directory
  register: backup_dir_check
  failed_when: not backup_dir_check.stat.exists

- name: Verify Pi-hole logs
  ansible.builtin.file:
    path: "{{ docker_data_root }}/pihole/logs"
    state: directory
  register: logs_dir_check
  failed_when: not logs_dir_check.stat.exists

- name: Display Pi-hole validation results
  ansible.builtin.debug:
    msg: |
      Pi-hole Validation Results:
      - Container Status: {{ pihole_container.container.State.Status }}
      - API Access: {{ pihole_status.status == 200 | ternary('OK', 'Failed') }}
      - DNS Resolution: {{ dns_test.stdout != "" | ternary('OK', 'Failed') }}
      - Web Interface: {{ web_interface.status == 200 | ternary('OK', 'Failed') }}
      - Metrics: {{ metrics.status == 200 | ternary('OK', 'Failed') }}
      - Backup Directory: {{ backup_dir_check.stat.exists | ternary('OK', 'Failed') }}
      - Logs Directory: {{ logs_dir_check.stat.exists | ternary('OK', 'Failed') }} 