---
# Lidarr Configuration
# Music Management

- name: Create Lidarr directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0755"
  loop:
    - "{{ docker_dir }}/lidarr/config"
    - "{{ docker_dir }}/lidarr/data"
    - "{{ docker_dir }}/lidarr/scripts"
    - "{{ media_dir }}/music"
    - "{{ media_dir }}/downloads/music"
    - "{{ logs_dir }}/lidarr"

- name: Create Lidarr configuration
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/lidarr/config/config.xml"
    content: |
      <?xml version="1.0" encoding="utf-8" standalone="yes"?>
      <Config>
        <LogLevel>info</LogLevel>
        <Port>8686</Port>
        <SslPort>9898</SslPort>
        <EnableSsl>False</EnableSsl>
        <LaunchBrowser>False</LaunchBrowser>
        <AuthenticationMethod>forms</AuthenticationMethod>
        <AuthenticationRequired>enabled</AuthenticationRequired>
        <Branch>main</Branch>
        <ApiKey>{{ lidarr_api_key }}</ApiKey>
        <SslCertPath></SslCertPath>
        <SslCertPassword></SslCertPassword>
        <UrlBase></UrlBase>
        <UpdateMechanism>builtIn</UpdateMechanism>
        <UpdateAutomatically>True</UpdateAutomatically>
        <UpdateScriptPath></UpdateScriptPath>
        <ProxyEnabled>False</ProxyEnabled>
        <ProxyType>http</ProxyType>
        <ProxyHostname></ProxyHostname>
        <ProxyPort>8080</ProxyPort>
        <ProxyUsername></ProxyUsername>
        <ProxyPassword></ProxyPassword>
        <ProxyBypassFilter></ProxyBypassFilter>
        <ProxyBypassLocalAddresses>True</ProxyBypassLocalAddresses>
        <CertificateValidation>Enabled</CertificateValidation>
        <BackupFolder>{{ docker_dir }}/lidarr/backup</BackupFolder>
        <BackupInterval>7</BackupInterval>
        <BackupRetention>28</BackupRetention>
        <AnalyticsEnabled>True</AnalyticsEnabled>
        <InstanceName>Lidarr</InstanceName>
        <ApplicationUrl></ApplicationUrl>
        <PostgresUser>{{ postgres_user }}</PostgresUser>
        <PostgresPassword>{{ postgres_password }}</PostgresPassword>
        <PostgresPort>5432</PostgresPort>
        <PostgresHost>postgres</PostgresHost>
        <PostgresMainDb>lidarr</PostgresMainDb>
        <PostgresLogDb>lidarr_logs</PostgresLogDb>
      </Config>
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0640"

- name: Create Lidarr management script
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/lidarr/scripts/manage.sh"
    content: |
      #!/bin/bash

      # Lidarr Management Script

      function show_help {
        echo "Lidarr Management Script"
        echo "Usage: $0 [command]"
        echo ""
        echo "Commands:"
        echo "  status    - Show Lidarr status"
        echo "  logs      - Show Lidarr logs"
        echo "  restart   - Restart Lidarr"
        echo "  backup    - Backup Lidarr data"
        echo "  restore   - Restore Lidarr data"
        echo "  help      - Show this help"
      }

      function backup_data {
        local backup_dir="{{ docker_dir }}/lidarr/backup"
        local timestamp=$(date +%Y%m%d_%H%M%S)
        local backup_file="$backup_dir/lidarr_backup_$timestamp.tar.gz"

        # Create backup directory if it doesn't exist
        mkdir -p "$backup_dir"

        # Stop Lidarr
        docker stop lidarr

        # Create backup
        tar -czf "$backup_file" -C "{{ docker_dir }}/lidarr" config/ data/

        # Start Lidarr
        docker start lidarr

        echo "Backup created: $backup_file"
      }

      function restore_data {
        if [ -z "$1" ]; then
          echo "Please specify backup file"
          exit 1
        fi

        local backup_file="$1"
        if [ ! -f "$backup_file" ]; then
          echo "Backup file not found: $backup_file"
          exit 1
        fi

        # Stop Lidarr
        docker stop lidarr

        # Restore backup
        tar -xzf "$backup_file" -C "{{ docker_dir }}/lidarr"

        # Start Lidarr
        docker start lidarr

        echo "Backup restored from: $backup_file"
      }

      case "$1" in
        status)
          docker ps -f name=lidarr
          curl -s http://{{ ansible_default_ipv4.address }}:8686/api/v1/health
          ;;
        logs)
          docker logs lidarr --tail 100 -f
          ;;
        restart)
          docker restart lidarr
          ;;
        backup)
          backup_data
          ;;
        restore)
          restore_data "$2"
          ;;
        help|*)
          show_help
          ;;
      esac
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0750"

- name: Create Lidarr health check script
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/lidarr/scripts/healthcheck.sh"
    content: |
      #!/bin/bash

      # Check if Lidarr is running
      if ! docker ps -f name=lidarr -f status=running | grep -q lidarr; then
        echo "Lidarr is not running"
        exit 1
      fi

      # Check if Lidarr is responding
      if ! curl -s -f http://{{ ansible_default_ipv4.address }}:8686/api/v1/health > /dev/null; then
        echo "Lidarr is not responding"
        exit 1
      fi

      # Check Lidarr status
      STATUS=$(curl -s http://{{ ansible_default_ipv4.address }}:/api/v1/health | jq -r .status)
      if [ "$STATUS" != "ok" ]; then
        echo "Lidarr status is $STATUS"
        exit 1
      fi

      exit 0
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0750"

- name: Create Lidarr log rotation configuration
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/lidarr/config/logrotate.conf"
    content: |
      {{ logs_dir }}/lidarr/*.log {
        daily
        rotate 7
        compress
        delaycompress
        missingok
        notifempty
        create 0640 {{ username }} {{ username }}
      }
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0640"

- name: Add Lidarr log rotation to crontab
  ansible.builtin.cron:
    name: "Rotate Lidarr logs"
    job: "logrotate {{ docker_dir }}/lidarr/config/logrotate.conf"
    hour: "0"
    minute: "0"
    user: "{{ vault_service_user }}"

- name: Add Lidarr backup to crontab
  ansible.builtin.cron:
    name: "Backup Lidarr data"
    job: "{{ docker_dir }}/lidarr/scripts/manage.sh backup"
    hour: "3"
    minute: "0"
    user: "{{ vault_service_user }}"
