---
# CrowdSec Configuration
# Production-ready threat detection and prevention

- name: Create CrowdSec directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0755"
  loop:
    - "{{ docker_dir }}/crowdsec/config"
    - "{{ docker_dir }}/crowdsec/data"
    - "{{ docker_dir }}/crowdsec/scripts"
    - "{{ logs_dir }}/crowdsec"

- name: Create CrowdSec configuration
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/crowdsec/config/config.yaml"
    content: |
      common:
        daemonize: true
        pid_dir: /var/run/
        log_media: file
        log_level: info
        log_dir: /var/log/crowdsec
        working_dir: /var/lib/crowdsec/data/
        config_dir: /etc/crowdsec
        data_dir: /var/lib/crowdsec/data
        simulation_config: /etc/crowdsec/simulation.yaml
        hub_dir: /etc/crowdsec/hub
        install_dir: /etc/crowdsec
        hub_index_file: /etc/crowdsec/hub/.index.json
        acquisition_dir: /etc/crowdsec/acquis.d
        plugins_dir: /usr/local/lib/crowdsec/plugins/
        notification_dir: /etc/crowdsec/notifications/
        maxmind_license_key: {{ maxmind_license_key }}
        geolocation:
          enabled: true
          type: maxmind
          db_path: /var/lib/crowdsec/data/GeoLite2-City.mmdb
          cache_size: 1000
          cache_duration: 1h
      
      api:
        server:
          listen_uri: 127.0.0.1:8080
          profiles_path: /etc/crowdsec/profiles.yaml
          online_client: 
            credentials_path: /etc/crowdsec/online_api_credentials.yaml
        client:
          credentials_path: /etc/crowdsec/online_api_credentials.yaml
      
      db_config:
        type: sqlite
        db_path: /var/lib/crowdsec/data/crowdsec.db
        flush:
          max_items: 5000
          max_age: 7d
      
      config_paths:
        config_dir: /etc/crowdsec
        data_dir: /var/lib/crowdsec/data
        simulation_path: /etc/crowdsec/simulation.yaml
        hub_dir: /etc/crowdsec/hub
        index_path: /etc/crowdsec/hub/.index.json
        notification_dir: /etc/crowdsec/notifications/
        plugin_dir: /usr/local/lib/crowdsec/plugins/
        acquisition_path: /etc/crowdsec/acquis.d
      
      prometheus:
        enabled: true
        level: full
        listen_addr: 127.0.0.1
        listen_port: 6060
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0640"

- name: Create CrowdSec acquisition configuration
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/crowdsec/config/acquis.yaml"
    content: |
      filenames:
        - /var/log/auth.log
        - /var/log/syslog
        - /var/log/messages
        - /var/log/secure
        - /var/log/nginx/access.log
        - /var/log/nginx/error.log
        - /var/log/apache2/access.log
        - /var/log/apache2/error.log
        - /var/log/traefik/access.log
        - /var/log/traefik/traefik.log
      
      labels:
        type: syslog
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0640"

- name: Create CrowdSec management script
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/crowdsec/scripts/manage.sh"
    content: |
      #!/bin/bash
      
      # CrowdSec Management Script
      
      function show_help {
        echo "CrowdSec Management Script"
        echo "Usage: $0 [command]"
        echo ""
        echo "Commands:"
        echo "  status    - Show CrowdSec status"
        echo "  logs      - Show CrowdSec logs"
        echo "  restart   - Restart CrowdSec"
        echo "  update    - Update CrowdSec"
        echo "  metrics   - Show CrowdSec metrics"
        echo "  help      - Show this help"
      }
      
      case "$1" in
        status)
          docker exec crowdsec cscli status
          ;;
        logs)
          docker logs crowdsec --tail 100 -f
          ;;
        restart)
          docker restart crowdsec
          ;;
        update)
          docker exec crowdsec cscli hub update
          docker exec crowdsec cscli hub upgrade
          ;;
        metrics)
          curl -s http://localhost:6060/metrics
          ;;
        help|*)
          show_help
          ;;
      esac
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0750"

- name: Create CrowdSec health check script
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/crowdsec/scripts/healthcheck.sh"
    content: |
      #!/bin/bash
      
      # Check if CrowdSec is responding
      if ! docker exec crowdsec cscli status > /dev/null; then
        echo "CrowdSec is not responding"
        exit 1
      fi
      
      # Check if we can access metrics
      if ! curl -s http://localhost:6060/metrics > /dev/null; then
        echo "CrowdSec metrics endpoint is not responding"
        exit 1
      fi
      
      exit 0
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0750"

- name: Create CrowdSec log rotation configuration
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/crowdsec/config/logrotate.conf"
    content: |
      {{ logs_dir }}/crowdsec/*.log {
        daily
        rotate 7
        compress
        delaycompress
        missingok
        notifempty
        create 0640 {{ username }} {{ username }}
      }
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0640"

- name: Add CrowdSec log rotation to crontab
  ansible.builtin.cron:
    name: "Rotate CrowdSec logs"
    job: "logrotate {{ docker_dir }}/crowdsec/config/logrotate.conf"
    hour: "0"
    minute: "0"
    user: "{{ username }}"

- name: Add CrowdSec update to crontab
  ansible.builtin.cron:
    name: "Update CrowdSec"
    job: "{{ docker_dir }}/crowdsec/scripts/manage.sh update"
    hour: "*/6"
    minute: "0"
    user: "{{ username }}" 