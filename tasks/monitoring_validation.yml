---
# COMMENT: Production-ready Monitoring Validation and Health Checks
# COMMENT: Comprehensive monitoring stack validation with security checks
# COMMENT: Generated by: {{ ansible_managed }}
# COMMENT: Timestamp: {{ ansible_date_time.iso8601 }}
# COMMENT: Environment: {{ deployment_environment | default('production') }}

# COMMENT: Production monitoring validation configuration with security
- name: "Set production monitoring validation configuration with security"
  ansible.builtin.set_fact:
    monitoring_validation_config:
      enabled: "{{ monitoring_validation_enabled | default(true) | bool }}"
      timeout_seconds: "{{ monitoring_validation_timeout | default(300) | int }}"
      retry_count: "{{ monitoring_validation_retries | default(3) | int }}"
      retry_delay_seconds: "{{ monitoring_validation_retry_delay | default(10) | int }}"
      critical_services: "{{ monitoring_critical_services | default(['prometheus', 'grafana', 'alertmanager', 'loki']) | list }}"
      warning_thresholds:
        response_time_ms: "{{ monitoring_warning_thresholds.response_time | default(1000) | int }}"
        error_rate_percent: "{{ monitoring_warning_thresholds.error_rate | default(5) | int }}"
        uptime_percent: "{{ monitoring_warning_thresholds.uptime | default(95) | int }}"
      critical_thresholds:
        response_time_ms: "{{ monitoring_critical_thresholds.response_time | default(5000) | int }}"
        error_rate_percent: "{{ monitoring_critical_thresholds.error_rate | default(20) | int }}"
        uptime_percent: "{{ monitoring_critical_thresholds.uptime | default(90) | int }}"
      security_checks_enabled: "{{ monitoring_security_checks | default(true) | bool }}"
      metrics_validation_enabled: "{{ monitoring_metrics_validation | default(true) | bool }}"
      alerting_validation_enabled: "{{ monitoring_alerting_validation | default(true) | bool }}"
      notification_enabled: "{{ monitoring_notification_enabled | default(true) | bool }}"
  tags: [monitoring, validation, config, security, production]

# COMMENT: Production Prometheus monitoring validation with security
- name: "Validate production Prometheus monitoring with security"
  block:
    - name: "Check Prometheus service availability with security validation"
      ansible.builtin.wait_for:
        port: "{{ prometheus_port | default(9090) }}"
        host: "127.0.0.1"
        timeout: "{{ monitoring_validation_config.timeout_seconds }}"
        delay: "{{ monitoring_validation_config.retry_delay_seconds }}"
        retries: "{{ monitoring_validation_config.retry_count }}"
      tags: [monitoring, validation, prometheus, security]

    - name: "Validate Prometheus API endpoint with security validation"
      ansible.builtin.uri:
        url: "http://127.0.0.1:{{ prometheus_port | default(9090) }}/api/v1/status/targets"
        method: GET
        timeout: 30
        status_code: [200]
        validate_certs: false
      register: prometheus_api_check
      retries: "{{ monitoring_validation_config.retry_count }}"
      delay: "{{ monitoring_validation_config.retry_delay_seconds }}"
      until: prometheus_api_check.status == 200
      tags: [monitoring, validation, prometheus, api, security]

    - name: "Report Prometheus API validation failures with security details"
      ansible.builtin.fail:
        msg: |
          Prometheus API validation failed:

          URL: http://127.0.0.1:{{ prometheus_port | default(9090) }}/api/v1/status/targets
          Status: {{ prometheus_api_check.status | default('UNKNOWN') }}
          Error: {{ prometheus_api_check.msg | default('API validation failed') }}

          This indicates a critical monitoring issue that requires immediate attention.
          Please investigate Prometheus API status before continuing with deployment.

          Recommended actions:
          - Check Prometheus service status
          - Review Prometheus configuration
          - Check for API endpoint issues
          - Review service logs
      when: prometheus_api_check is failed
      tags: [monitoring, validation, prometheus, api, security, failure]

    - name: "Validate Prometheus targets with security validation"
      ansible.builtin.uri:
        url: "http://127.0.0.1:{{ prometheus_port | default(9090) }}/api/v1/targets"
        method: GET
        timeout: 30
        status_code: [200]
        validate_certs: false
      register: prometheus_targets_check
      retries: "{{ monitoring_validation_config.retry_count }}"
      delay: "{{ monitoring_validation_config.retry_delay_seconds }}"
      until: prometheus_targets_check.status == 200
      tags: [monitoring, validation, prometheus, targets, security]

    - name: "Report Prometheus targets validation failures with security details"
      ansible.builtin.fail:
        msg: |
          Prometheus targets validation failed:

          URL: http://127.0.0.1:{{ prometheus_port | default(9090) }}/api/v1/targets
          Status: {{ prometheus_targets_check.status | default('UNKNOWN') }}
          Error: {{ prometheus_targets_check.msg | default('Targets validation failed') }}

          This indicates a critical monitoring issue that requires immediate attention.
          Please investigate Prometheus targets before continuing with deployment.

          Recommended actions:
          - Check target configuration
          - Review network connectivity
          - Verify target service status
          - Check for configuration errors
      when: prometheus_targets_check is failed
      tags: [monitoring, validation, prometheus, targets, security, failure]

  tags: [monitoring, validation, prometheus, security, production]

# COMMENT: Production Grafana monitoring validation with security
- name: "Validate production Grafana monitoring with security"
  block:
    - name: "Check Grafana service availability with security validation"
      ansible.builtin.wait_for:
        port: "{{ grafana_port | default(3000) }}"
        host: "127.0.0.1"
        timeout: "{{ monitoring_validation_config.timeout_seconds }}"
        delay: "{{ monitoring_validation_config.retry_delay_seconds }}"
        retries: "{{ monitoring_validation_config.retry_count }}"
      tags: [monitoring, validation, grafana, security]

    - name: "Validate Grafana API endpoint with security validation"
      ansible.builtin.uri:
        url: "http://127.0.0.1:{{ grafana_port | default(3000) }}/api/health"
        method: GET
        timeout: 30
        status_code: [200]
        validate_certs: false
      register: grafana_api_check
      retries: "{{ monitoring_validation_config.retry_count }}"
      delay: "{{ monitoring_validation_config.retry_delay_seconds }}"
      until: grafana_api_check.status == 200
      tags: [monitoring, validation, grafana, api, security]

    - name: "Report Grafana API validation failures with security details"
      ansible.builtin.fail:
        msg: |
          Grafana API validation failed:

          URL: http://127.0.0.1:{{ grafana_port | default(3000) }}/api/health
          Status: {{ grafana_api_check.status | default('UNKNOWN') }}
          Error: {{ grafana_api_check.msg | default('API validation failed') }}

          This indicates a critical monitoring issue that requires immediate attention.
          Please investigate Grafana API status before continuing with deployment.

          Recommended actions:
          - Check Grafana service status
          - Review Grafana configuration
          - Check for API endpoint issues
          - Review service logs
      when: grafana_api_check is failed
      tags: [monitoring, validation, grafana, api, security, failure]

    - name: "Validate Grafana datasources with security validation"
      ansible.builtin.uri:
        url: "http://127.0.0.1:{{ grafana_port | default(3000) }}/api/datasources"
        method: GET
        timeout: 30
        status_code: [200]
        validate_certs: false
        headers:
          Authorization: "Bearer {{ vault_grafana_api_key | default('') }}"
      register: grafana_datasources_check
      retries: "{{ monitoring_validation_config.retry_count }}"
      delay: "{{ monitoring_validation_config.retry_delay_seconds }}"
      until: grafana_datasources_check.status == 200
      tags: [monitoring, validation, grafana, datasources, security]

    - name: "Report Grafana datasources validation failures with security details"
      ansible.builtin.fail:
        msg: |
          Grafana datasources validation failed:

          URL: http://127.0.0.1:{{ grafana_port | default(3000) }}/api/datasources
          Status: {{ grafana_datasources_check.status | default('UNKNOWN') }}
          Error: {{ grafana_datasources_check.msg | default('Datasources validation failed') }}

          This indicates a critical monitoring issue that requires immediate attention.
          Please investigate Grafana datasources before continuing with deployment.

          Recommended actions:
          - Check datasource configuration
          - Verify API key permissions
          - Review datasource connectivity
          - Check for configuration errors
      when: grafana_datasources_check is failed
      tags: [monitoring, validation, grafana, datasources, security, failure]

  tags: [monitoring, validation, grafana, security, production]

# COMMENT: Production Alertmanager monitoring validation with security
- name: "Validate production Alertmanager monitoring with security"
  block:
    - name: "Check Alertmanager service availability with security validation"
      ansible.builtin.wait_for:
        port: "{{ alertmanager_port | default(9093) }}"
        host: "127.0.0.1"
        timeout: "{{ monitoring_validation_config.timeout_seconds }}"
        delay: "{{ monitoring_validation_config.retry_delay_seconds }}"
        retries: "{{ monitoring_validation_config.retry_count }}"
      tags: [monitoring, validation, alertmanager, security]

    - name: "Validate Alertmanager API endpoint with security validation"
      ansible.builtin.uri:
        url: "http://127.0.0.1:{{ alertmanager_port | default(9093) }}/api/v1/status"
        method: GET
        timeout: 30
        status_code: [200]
        validate_certs: false
      register: alertmanager_api_check
      retries: "{{ monitoring_validation_config.retry_count }}"
      delay: "{{ monitoring_validation_config.retry_delay_seconds }}"
      until: alertmanager_api_check.status == 200
      tags: [monitoring, validation, alertmanager, api, security]

    - name: "Report Alertmanager API validation failures with security details"
      ansible.builtin.fail:
        msg: |
          Alertmanager API validation failed:

          URL: http://127.0.0.1:{{ alertmanager_port | default(9093) }}/api/v1/status
          Status: {{ alertmanager_api_check.status | default('UNKNOWN') }}
          Error: {{ alertmanager_api_check.msg | default('API validation failed') }}

          This indicates a critical monitoring issue that requires immediate attention.
          Please investigate Alertmanager API status before continuing with deployment.

          Recommended actions:
          - Check Alertmanager service status
          - Review Alertmanager configuration
          - Check for API endpoint issues
          - Review service logs
      when: alertmanager_api_check is failed
      tags: [monitoring, validation, alertmanager, api, security, failure]

    - name: "Validate Alertmanager configuration with security validation"
      ansible.builtin.uri:
        url: "http://127.0.0.1:{{ alertmanager_port | default(9093) }}/api/v1/status"
        method: GET
        timeout: 30
        status_code: [200]
        validate_certs: false
      register: alertmanager_config_check
      retries: "{{ monitoring_validation_config.retry_count }}"
      delay: "{{ monitoring_validation_config.retry_delay_seconds }}"
      until: alertmanager_config_check.status == 200
      tags: [monitoring, validation, alertmanager, config, security]

    - name: "Report Alertmanager configuration validation failures with security details"
      ansible.builtin.fail:
        msg: |
          Alertmanager configuration validation failed:

          URL: http://127.0.0.1:{{ alertmanager_port | default(9093) }}/api/v1/status
          Status: {{ alertmanager_config_check.status | default('UNKNOWN') }}
          Error: {{ alertmanager_config_check.msg | default('Configuration validation failed') }}

          This indicates a critical monitoring issue that requires immediate attention.
          Please investigate Alertmanager configuration before continuing with deployment.

          Recommended actions:
          - Check configuration file syntax
          - Verify notification settings
          - Review routing rules
          - Check for configuration errors
      when: alertmanager_config_check is failed
      tags: [monitoring, validation, alertmanager, config, security, failure]

  tags: [monitoring, validation, alertmanager, security, production]

# COMMENT: Production Loki monitoring validation with security
- name: "Validate production Loki monitoring with security"
  block:
    - name: "Check Loki service availability with security validation"
      ansible.builtin.wait_for:
        port: "{{ loki_port | default(3100) }}"
        host: "127.0.0.1"
        timeout: "{{ monitoring_validation_config.timeout_seconds }}"
        delay: "{{ monitoring_validation_config.retry_delay_seconds }}"
        retries: "{{ monitoring_validation_config.retry_count }}"
      tags: [monitoring, validation, loki, security]

    - name: "Validate Loki API endpoint with security validation"
      ansible.builtin.uri:
        url: "http://127.0.0.1:{{ loki_port | default(3100) }}/ready"
        method: GET
        timeout: 30
        status_code: [200]
        validate_certs: false
      register: loki_api_check
      retries: "{{ monitoring_validation_config.retry_count }}"
      delay: "{{ monitoring_validation_config.retry_delay_seconds }}"
      until: loki_api_check.status == 200
      tags: [monitoring, validation, loki, api, security]

    - name: "Report Loki API validation failures with security details"
      ansible.builtin.fail:
        msg: |
          Loki API validation failed:

          URL: http://127.0.0.1:{{ loki_port | default(3100) }}/ready
          Status: {{ loki_api_check.status | default('UNKNOWN') }}
          Error: {{ loki_api_check.msg | default('API validation failed') }}

          This indicates a critical monitoring issue that requires immediate attention.
          Please investigate Loki API status before continuing with deployment.

          Recommended actions:
          - Check Loki service status
          - Review Loki configuration
          - Check for API endpoint issues
          - Review service logs
      when: loki_api_check is failed
      tags: [monitoring, validation, loki, api, security, failure]

    - name: "Validate Loki labels endpoint with security validation"
      ansible.builtin.uri:
        url: "http://127.0.0.1:{{ loki_port | default(3100) }}/loki/api/v1/labels"
        method: GET
        timeout: 30
        status_code: [200]
        validate_certs: false
      register: loki_labels_check
      retries: "{{ monitoring_validation_config.retry_count }}"
      delay: "{{ monitoring_validation_config.retry_delay_seconds }}"
      until: loki_labels_check.status == 200
      tags: [monitoring, validation, loki, labels, security]

    - name: "Report Loki labels validation failures with security details"
      ansible.builtin.fail:
        msg: |
          Loki labels validation failed:

          URL: http://127.0.0.1:{{ loki_port | default(3100) }}/loki/api/v1/labels
          Status: {{ loki_labels_check.status | default('UNKNOWN') }}
          Error: {{ loki_labels_check.msg | default('Labels validation failed') }}

          This indicates a critical monitoring issue that requires immediate attention.
          Please investigate Loki labels before continuing with deployment.

          Recommended actions:
          - Check log ingestion status
          - Verify label configuration
          - Review log sources
          - Check for configuration errors
      when: loki_labels_check is failed
      tags: [monitoring, validation, loki, labels, security, failure]

  tags: [monitoring, validation, loki, security, production]

# COMMENT: Production monitoring metrics validation with security
- name: "Validate production monitoring metrics with security"
  block:
    - name: "Check Prometheus metrics endpoint with security validation"
      ansible.builtin.uri:
        url: "http://127.0.0.1:{{ prometheus_port | default(9090) }}/metrics"
        method: GET
        timeout: 30
        status_code: [200]
        validate_certs: false
      register: prometheus_metrics_check
      retries: "{{ monitoring_validation_config.retry_count }}"
      delay: "{{ monitoring_validation_config.retry_delay_seconds }}"
      until: prometheus_metrics_check.status == 200
      tags: [monitoring, validation, metrics, prometheus, security]

    - name: "Report Prometheus metrics validation failures with security details"
      ansible.builtin.fail:
        msg: |
          Prometheus metrics validation failed:

          URL: http://127.0.0.1:{{ prometheus_port | default(9090) }}/metrics
          Status: {{ prometheus_metrics_check.status | default('UNKNOWN') }}
          Error: {{ prometheus_metrics_check.msg | default('Metrics validation failed') }}

          This indicates a critical monitoring issue that requires immediate attention.
          Please investigate Prometheus metrics before continuing with deployment.

          Recommended actions:
          - Check metrics collection status
          - Verify target configuration
          - Review scrape intervals
          - Check for configuration errors
      when: prometheus_metrics_check is failed
      tags: [monitoring, validation, metrics, prometheus, security, failure]

    - name: "Check Grafana metrics endpoint with security validation"
      ansible.builtin.uri:
        url: "http://127.0.0.1:{{ grafana_port | default(3000) }}/metrics"
        method: GET
        timeout: 30
        status_code: [200]
        validate_certs: false
      register: grafana_metrics_check
      retries: "{{ monitoring_validation_config.retry_count }}"
      delay: "{{ monitoring_validation_config.retry_delay_seconds }}"
      until: grafana_metrics_check.status == 200
      tags: [monitoring, validation, metrics, grafana, security]

    - name: "Report Grafana metrics validation failures with security details"
      ansible.builtin.fail:
        msg: |
          Grafana metrics validation failed:

          URL: http://127.0.0.1:{{ grafana_port | default(3000) }}/metrics
          Status: {{ grafana_metrics_check.status | default('UNKNOWN') }}
          Error: {{ grafana_metrics_check.msg | default('Metrics validation failed') }}

          This indicates a critical monitoring issue that requires immediate attention.
          Please investigate Grafana metrics before continuing with deployment.

          Recommended actions:
          - Check metrics collection status
          - Verify metrics configuration
          - Review metrics endpoints
          - Check for configuration errors
      when: grafana_metrics_check is failed
      tags: [monitoring, validation, metrics, grafana, security, failure]

  when: monitoring_validation_config.metrics_validation_enabled | bool
  tags: [monitoring, validation, metrics, security, production]

# COMMENT: Production monitoring alerting validation with security
- name: "Validate production monitoring alerting with security"
  block:
    - name: "Check Prometheus alerting rules with security validation"
      ansible.builtin.uri:
        url: "http://127.0.0.1:{{ prometheus_port | default(9090) }}/api/v1/rules"
        method: GET
        timeout: 30
        status_code: [200]
        validate_certs: false
      register: prometheus_rules_check
      retries: "{{ monitoring_validation_config.retry_count }}"
      delay: "{{ monitoring_validation_config.retry_delay_seconds }}"
      until: prometheus_rules_check.status == 200
      tags: [monitoring, validation, alerting, prometheus, security]

    - name: "Report Prometheus alerting rules validation failures with security details"
      ansible.builtin.fail:
        msg: |
          Prometheus alerting rules validation failed:

          URL: http://127.0.0.1:{{ prometheus_port | default(9090) }}/api/v1/rules
          Status: {{ prometheus_rules_check.status | default('UNKNOWN') }}
          Error: {{ prometheus_rules_check.msg | default('Alerting rules validation failed') }}

          This indicates a critical monitoring issue that requires immediate attention.
          Please investigate Prometheus alerting rules before continuing with deployment.

          Recommended actions:
          - Check alerting rules configuration
          - Verify rules syntax
          - Review alerting configuration
          - Check for configuration errors
      when: prometheus_rules_check is failed
      tags: [monitoring, validation, alerting, prometheus, security, failure]

    - name: "Check Alertmanager notification configuration with security validation"
      ansible.builtin.uri:
        url: "http://127.0.0.1:{{ alertmanager_port | default(9093) }}/api/v1/status"
        method: GET
        timeout: 30
        status_code: [200]
        validate_certs: false
      register: alertmanager_notifications_check
      retries: "{{ monitoring_validation_config.retry_count }}"
      delay: "{{ monitoring_validation_config.retry_delay_seconds }}"
      until: alertmanager_notifications_check.status == 200
      tags: [monitoring, validation, alerting, alertmanager, security]

    - name: "Report Alertmanager notification validation failures with security details"
      ansible.builtin.fail:
        msg: |
          Alertmanager notification validation failed:

          URL: http://127.0.0.1:{{ alertmanager_port | default(9093) }}/api/v1/status
          Status: {{ alertmanager_notifications_check.status | default('UNKNOWN') }}
          Error: {{ alertmanager_notifications_check.msg | default('Notification validation failed') }}

          This indicates a critical monitoring issue that requires immediate attention.
          Please investigate Alertmanager notifications before continuing with deployment.

          Recommended actions:
          - Check notification configuration
          - Verify notification endpoints
          - Review notification settings
          - Check for configuration errors
      when: alertmanager_notifications_check is failed
      tags: [monitoring, validation, alerting, alertmanager, security, failure]

  when: monitoring_validation_config.alerting_validation_enabled | bool
  tags: [monitoring, validation, alerting, security, production]

# COMMENT: Production monitoring validation summary with comprehensive reporting
- name: "Generate production monitoring validation summary with comprehensive reporting"
  ansible.builtin.debug:
    msg: |
      ========================================
      PRODUCTION MONITORING VALIDATION SUMMARY
      ========================================

      Timestamp: {{ ansible_date_time.iso8601 }}
      Hostname: {{ ansible_hostname }}
      Environment: {{ deployment_environment | default('production') }}

      Monitoring Services:
      - Prometheus: {{ 'HEALTHY' if prometheus_api_check.status == 200 else 'UNHEALTHY' }} (Port: {{ prometheus_port | default(9090) }})
      - Grafana: {{ 'HEALTHY' if grafana_api_check.status == 200 else 'UNHEALTHY' }} (Port: {{ grafana_port | default(3000) }})
      - Alertmanager: {{ 'HEALTHY' if alertmanager_api_check.status == 200 else 'UNHEALTHY' }} (Port: {{ alertmanager_port | default(9093) }})
      - Loki: {{ 'HEALTHY' if loki_api_check.status == 200 else 'UNHEALTHY' }} (Port: {{ loki_port | default(3100) }})

      API Endpoints:
      - Prometheus API: {{ 'HEALTHY' if prometheus_api_check.status == 200 else 'UNHEALTHY' }}
      - Prometheus Targets: {{ 'HEALTHY' if prometheus_targets_check.status == 200 else 'UNHEALTHY' }}
      - Grafana API: {{ 'HEALTHY' if grafana_api_check.status == 200 else 'UNHEALTHY' }}
      - Grafana Datasources: {{ 'HEALTHY' if grafana_datasources_check.status == 200 else 'UNHEALTHY' }}
      - Alertmanager API: {{ 'HEALTHY' if alertmanager_api_check.status == 200 else 'UNHEALTHY' }}
      - Alertmanager Config: {{ 'HEALTHY' if alertmanager_config_check.status == 200 else 'UNHEALTHY' }}
      - Loki API: {{ 'HEALTHY' if loki_api_check.status == 200 else 'UNHEALTHY' }}
      - Loki Labels: {{ 'HEALTHY' if loki_labels_check.status == 200 else 'UNHEALTHY' }}

      Metrics Collection:
      - Prometheus Metrics: {{ 'HEALTHY' if prometheus_metrics_check.status == 200 else 'UNHEALTHY' }}
      - Grafana Metrics: {{ 'HEALTHY' if grafana_metrics_check.status == 200 else 'UNHEALTHY' }}

      Alerting System:
      - Prometheus Rules: {{ 'HEALTHY' if prometheus_rules_check.status == 200 else 'UNHEALTHY' }}
      - Alertmanager Notifications: {{ 'HEALTHY' if alertmanager_notifications_check.status == 200 else 'UNHEALTHY' }}

      Configuration:
      - Monitoring Validation: {{ 'ENABLED' if monitoring_validation_config.enabled else 'DISABLED' }}
      - Timeout: {{ monitoring_validation_config.timeout_seconds }}s
      - Retries: {{ monitoring_validation_config.retry_count }}
      - Security Checks: {{ 'ENABLED' if monitoring_validation_config.security_checks_enabled else 'DISABLED' }}
      - Metrics Validation: {{ 'ENABLED' if monitoring_validation_config.metrics_validation_enabled else 'DISABLED' }}
      - Alerting Validation: {{ 'ENABLED' if monitoring_validation_config.alerting_validation_enabled else 'DISABLED' }}
      - Notifications: {{ 'ENABLED' if monitoring_validation_config.notification_enabled else 'DISABLED' }}

      Overall Status: {{ 'HEALTHY' if (prometheus_api_check.status == 200 and grafana_api_check.status == 200 and alertmanager_api_check.status == 200 and loki_api_check.status == 200) else 'UNHEALTHY' }}

      ========================================
  tags: [monitoring, validation, summary, production]

# COMMENT: Production monitoring validation notification with security
- name: "Send production monitoring validation notification with security"
  ansible.builtin.uri:
    url: "{{ vault_notification_webhook_url | default('') }}"
    method: POST
    body_format: json
    body: |
      {
        "text": "Production Monitoring Validation {{ 'PASSED' if (prometheus_api_check.status == 200 and grafana_api_check.status == 200 and alertmanager_api_check.status == 200 and loki_api_check.status == 200) else 'FAILED' }} on {{ ansible_hostname }}",
        "timestamp": "{{ ansible_date_time.iso8601 }}",
        "environment": "{{ deployment_environment | default('production') }}",
        "hostname": "{{ ansible_hostname }}",
        "monitoring_status": "{{ 'HEALTHY' if (prometheus_api_check.status == 200 and grafana_api_check.status == 200 and alertmanager_api_check.status == 200 and loki_api_check.status == 200) else 'UNHEALTHY' }}",
        "details": {
          "prometheus": "{{ 'HEALTHY' if prometheus_api_check.status == 200 else 'UNHEALTHY' }}",
          "grafana": "{{ 'HEALTHY' if grafana_api_check.status == 200 else 'UNHEALTHY' }}",
          "alertmanager": "{{ 'HEALTHY' if alertmanager_api_check.status == 200 else 'UNHEALTHY' }}",
          "loki": "{{ 'HEALTHY' if loki_api_check.status == 200 else 'UNHEALTHY' }}"
        }
      }
    timeout: 30
    validate_certs: true
  when:
    - monitoring_validation_config.notification_enabled | bool
    - vault_notification_webhook_url is defined
    - vault_notification_webhook_url != ''
  tags: [monitoring, validation, notification, security, production]
