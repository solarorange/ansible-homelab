---
# Advanced Security Hardening
# Comprehensive security measures with compliance frameworks

- name: Setup security hardening infrastructure
  block:
    - name: Create security hardening directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: "0700"
      loop:
        - "/etc/security/hardening"
        - "/etc/security/hardening/scripts"
        - "/etc/security/hardening/configs"
        - "/etc/security/hardening/logs"
        - "/etc/security/hardening/audit"
      tags: [security, setup]

    - name: Create security hardening configuration
      ansible.builtin.template:
        src: templates/security_hardening_config.yml.j2
        dest: "/etc/security/hardening/config.yml"
        owner: root
        group: root
        mode: "0600"
      tags: [security, setup]

  when: security_hardening.enabled | default(true)
  tags: [security, setup]

#==============================================================================
# SYSTEM HARDENING
#==============================================================================

- name: Perform system hardening
  block:
    - name: Disable unused services
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: stopped
        enabled: no
      loop:
        - bluetooth
        - cups
        - avahi-daemon
        - rpcbind
        - nfs-common
        - nfs-kernel-server
      ignore_errors: yes
      tags: [security, system]

    - name: Configure firewall rules
      ansible.builtin.ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - 22   # SSH
        - 80   # HTTP
        - 443  # HTTPS
        - 8080 # Alternative HTTP
      tags: [security, firewall]

    - name: Enable UFW firewall
      ansible.builtin.ufw:
        state: enabled
        policy: deny
      tags: [security, firewall]

    - name: Update system packages
      ansible.builtin.apt:
        update_cache: yes
        upgrade: yes
        autoremove: yes
      tags: [security, system]

    - name: Configure audit logging
      ansible.builtin.apt:
        name: auditd
        state: present
      tags: [security, audit]

    - name: Configure audit rules
      ansible.builtin.template:
        src: templates/audit.rules.j2
        dest: /etc/audit/rules.d/audit.rules
        owner: root
        group: root
        mode: "0640"
      tags: [security, audit]

    - name: Start and enable auditd
      ansible.builtin.systemd:
        name: auditd
        state: started
        enabled: yes
      tags: [security, audit]

    - name: Harden SSH configuration
      ansible.builtin.template:
        src: templates/sshd_config.j2
        dest: /etc/ssh/sshd_config
        owner: root
        group: root
        mode: "0600"
      tags: [security, ssh]

    - name: Restart SSH service
      ansible.builtin.systemd:
        name: ssh
        state: restarted
      tags: [security, ssh]

  when: security_hardening.enabled | default(true)
  tags: [security, system]

#==============================================================================
# DOCKER SECURITY HARDENING
#==============================================================================

- name: Perform Docker security hardening
  block:
    - name: Enable Docker content trust
      ansible.builtin.environment:
        DOCKER_CONTENT_TRUST: "1"
      tags: [security, docker]

    - name: Configure Docker daemon security
      ansible.builtin.template:
        src: templates/daemon.json.j2
        dest: /etc/docker/daemon.json
        owner: root
        group: root
        mode: "0644"
      tags: [security, docker]

    - name: Restart Docker daemon
      ansible.builtin.systemd:
        name: docker
        state: restarted
      tags: [security, docker]

    - name: Configure seccomp profiles
      ansible.builtin.copy:
        src: templates/seccomp-profiles/
        dest: /etc/docker/seccomp-profiles/
        owner: root
        group: root
        mode: "0644"
      tags: [security, docker]

    - name: Create Docker security policies
      ansible.builtin.template:
        src: templates/docker-security-policy.yml.j2
        dest: /etc/docker/security-policy.yml
        owner: root
        group: root
        mode: "0644"
      tags: [security, docker]

    - name: Configure container capabilities
      ansible.builtin.template:
        src: templates/container-capabilities.yml.j2
        dest: /etc/docker/capabilities.yml
        owner: root
        group: root
        mode: "0644"
      tags: [security, docker]

  when: security_hardening.enabled | default(true)
  tags: [security, docker]

#==============================================================================
# APPLICATION SECURITY HARDENING
#==============================================================================

- name: Perform application security hardening
  block:
    - name: Enable SSL/TLS for all services
      ansible.builtin.include_tasks: tasks/ssl_tls_hardening.yml
      tags: [security, applications]

    - name: Configure authentication for all services
      ansible.builtin.include_tasks: tasks/authentication_hardening.yml
      tags: [security, applications]

    - name: Implement rate limiting
      ansible.builtin.include_tasks: tasks/rate_limiting_hardening.yml
      tags: [security, applications]

    - name: Enable audit logging for applications
      ansible.builtin.include_tasks: tasks/audit_logging_hardening.yml
      tags: [security, applications]

    - name: Configure backup encryption
      ansible.builtin.include_tasks: tasks/backup_encryption_hardening.yml
      tags: [security, applications]

  when: security_hardening.enabled | default(true)
  tags: [security, applications]

#==============================================================================
# COMPLIANCE FRAMEWORKS
#==============================================================================

- name: Implement compliance frameworks
  block:
    - name: CIS Docker Benchmark compliance
      ansible.builtin.include_tasks: tasks/cis_docker_benchmark.yml
      when: "'cis_docker_benchmark' in compliance.frameworks"
      tags: [security, compliance, cis]

    - name: NIST Cybersecurity Framework compliance
      ansible.builtin.include_tasks: tasks/nist_cybersecurity_framework.yml
      when: "'nist_cybersecurity_framework' in compliance.frameworks"
      tags: [security, compliance, nist]

    - name: ISO 27001 compliance
      ansible.builtin.include_tasks: tasks/iso_27001_compliance.yml
      when: "'iso_27001' in compliance.frameworks"
      tags: [security, compliance, iso]

    - name: GDPR compliance
      ansible.builtin.include_tasks: tasks/gdpr_compliance.yml
      when: "'gdpr_compliance' in compliance.frameworks"
      tags: [security, compliance, gdpr]

  when: compliance.enabled | default(true)
  tags: [security, compliance]

#==============================================================================
# SECURITY MONITORING
#==============================================================================

- name: Setup security monitoring
  block:
    - name: Install security monitoring tools
      ansible.builtin.apt:
        name:
          - fail2ban
          - rkhunter
          - chkrootkit
          - lynis
          - clamav
        state: present
      tags: [security, monitoring]

    - name: Configure fail2ban
      ansible.builtin.template:
        src: templates/fail2ban.conf.j2
        dest: /etc/fail2ban/jail.local
        owner: root
        group: root
        mode: "0644"
      tags: [security, monitoring]

    - name: Start and enable fail2ban
      ansible.builtin.systemd:
        name: fail2ban
        state: started
        enabled: yes
      tags: [security, monitoring]

    - name: Configure rkhunter
      ansible.builtin.template:
        src: templates/rkhunter.conf.j2
        dest: /etc/rkhunter.conf
        owner: root
        group: root
        mode: "0644"
      tags: [security, monitoring]

    - name: Update rkhunter database
      ansible.builtin.command: rkhunter --update
      tags: [security, monitoring]

    - name: Configure ClamAV
      ansible.builtin.template:
        src: templates/clamav.conf.j2
        dest: /etc/clamav/clamd.conf
        owner: root
        group: root
        mode: "0644"
      tags: [security, monitoring]

    - name: Update ClamAV virus definitions
      ansible.builtin.command: freshclam
      tags: [security, monitoring]

  when: security_hardening.enabled | default(true)
  tags: [security, monitoring]

#==============================================================================
# SECURITY SCANNING
#==============================================================================

- name: Perform security scanning
  block:
    - name: Run Lynis security audit
      ansible.builtin.command: lynis audit system
      register: lynis_audit
      changed_when: false
      tags: [security, scanning]

    - name: Parse Lynis results
      ansible.builtin.set_fact:
        lynis_score: "{{ lynis_audit.stdout | regex_search('Hardening index.*?(\\d+)', '\\1') | int }}"
      tags: [security, scanning]

    - name: Check Lynis security score
      ansible.builtin.assert:
        that:
          - lynis_score >= 70
        fail_msg: "Lynis security score is too low: {{ lynis_score }}/100"
      tags: [security, scanning]

    - name: Run rkhunter scan
      ansible.builtin.command: rkhunter --check --skip-keypress
      register: rkhunter_scan
      changed_when: false
      tags: [security, scanning]

    - name: Check rkhunter results
      ansible.builtin.assert:
        that:
          - "'Warning: No rootkits found' in rkhunter_scan.stdout"
        fail_msg: "Rkhunter scan detected potential security issues"
      tags: [security, scanning]

    - name: Run ClamAV scan
      ansible.builtin.command: clamscan -r / --exclude-dir=/proc --exclude-dir=/sys --exclude-dir=/dev
      register: clamav_scan
      changed_when: false
      tags: [security, scanning]

    - name: Check ClamAV results
      ansible.builtin.assert:
        that:
          - "'Infected files: 0' in clamav_scan.stdout"
        fail_msg: "ClamAV scan detected infected files"
      tags: [security, scanning]

  when: security_hardening.enabled | default(true)
  tags: [security, scanning]

#==============================================================================
# SECURITY REPORTING
#==============================================================================

- name: Generate security reports
  block:
    - name: Create security hardening report
      ansible.builtin.template:
        src: templates/security_report.yml.j2
        dest: "/etc/security/hardening/security_report.yml"
        owner: root
        group: root
        mode: "0600"
      tags: [security, reporting]

    - name: Create compliance report
      ansible.builtin.template:
        src: templates/compliance_report.yml.j2
        dest: "/etc/security/hardening/compliance_report.yml"
        owner: root
        group: root
        mode: "0600"
      tags: [security, reporting]

    - name: Display security hardening summary
      ansible.builtin.debug:
        msg: |
          ========================================
          SECURITY HARDENING SUMMARY
          ========================================
          
          System Hardening:
          - Unused services disabled
          - Firewall configured and enabled
          - System packages updated
          - Audit logging configured
          - SSH hardened
          
          Docker Security:
          - Content trust enabled
          - Seccomp profiles configured
          - Security policies applied
          - Container capabilities limited
          
          Application Security:
          - SSL/TLS enabled
          - Authentication configured
          - Rate limiting implemented
          - Audit logging enabled
          - Backup encryption configured
          
          Compliance Frameworks:
          - CIS Docker Benchmark: {{ 'Enabled' if 'cis_docker_benchmark' in compliance.frameworks else 'Disabled' }}
          - NIST Cybersecurity Framework: {{ 'Enabled' if 'nist_cybersecurity_framework' in compliance.frameworks else 'Disabled' }}
          - ISO 27001: {{ 'Enabled' if 'iso_27001' in compliance.frameworks else 'Disabled' }}
          - GDPR: {{ 'Enabled' if 'gdpr_compliance' in compliance.frameworks else 'Disabled' }}
          
          Security Monitoring:
          - Fail2ban configured
          - Rkhunter configured
          - ClamAV configured
          - Security scanning completed
          
          Security Scan Results:
          - Lynis Score: {{ lynis_score }}/100
          - Rkhunter: {{ 'PASS' if 'Warning: No rootkits found' in rkhunter_scan.stdout else 'FAIL' }}
          - ClamAV: {{ 'PASS' if 'Infected files: 0' in clamav_scan.stdout else 'FAIL' }}
          
          Overall Security Status: {{ 'SECURE' if (lynis_score >= 70 and 'Warning: No rootkits found' in rkhunter_scan.stdout and 'Infected files: 0' in clamav_scan.stdout) else 'NEEDS_ATTENTION' }}
          ========================================
      tags: [security, reporting]

  when: security_hardening.enabled | default(true)
  tags: [security, reporting]

#==============================================================================
# SECURITY MAINTENANCE
#==============================================================================

- name: Setup security maintenance
  block:
    - name: Create security maintenance cron jobs
      ansible.builtin.cron:
        name: "{{ item.name }}"
        minute: "{{ item.minute }}"
        hour: "{{ item.hour }}"
        day: "{{ item.day }}"
        job: "{{ item.job }}"
        user: root
        state: present
      loop:
        - name: "Daily Security Updates"
          minute: "0"
          hour: "2"
          day: "*"
          job: "apt update && apt upgrade -y"
        
        - name: "Weekly Security Scan"
          minute: "0"
          hour: "3"
          day: "0"
          job: "cd /etc/security/hardening && ./security_scan.sh"
        
        - name: "Monthly Compliance Check"
          minute: "0"
          hour: "4"
          day: "1"
          job: "cd /etc/security/hardening && ./compliance_check.sh"
        
        - name: "Update Virus Definitions"
          minute: "0"
          hour: "*/6"
          day: "*"
          job: "freshclam"
        
        - name: "Update Rkhunter Database"
          minute: "0"
          hour: "*/12"
          day: "*"
          job: "rkhunter --update"
      tags: [security, maintenance]

    - name: Create security maintenance scripts
      ansible.builtin.template:
        src: templates/security_maintenance.sh.j2
        dest: "/etc/security/hardening/security_maintenance.sh"
        owner: root
        group: root
        mode: "0755"
      tags: [security, maintenance]

  when: security_hardening.enabled | default(true)
  tags: [security, maintenance] 