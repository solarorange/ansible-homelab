---
# Watchtower Service Stack Configuration
# Automated deployment and management of the comprehensive Watchtower homelab stack

- name: Create Watchtower stack directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0755"
  loop:
    - "{{ docker_dir }}/watchtower/config"
    - "{{ docker_dir }}/watchtower/secrets"
    - "{{ logs_dir }}/watchtower"
    - "{{ data_dir }}/watchtower"

- name: Create Watchtower stack docker-compose file
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/watchtower/docker-compose.yml"
    content: |
      version: '3.8'

      networks:
        homelab:
          external: true
        monitoring:
          external: true
        media:
          external: true
        security:
          external: true
        automation:
          external: true
        storage:
          external: true
        development:
          external: true

      services:
        # Core Infrastructure Services
        traefik:
          image: traefik:v2.10
          container_name: traefik
          user: "{{ vault_service_user }}"
          read_only: true
          security_opt:
            - no-new-privileges:true
          # Compose-compatible resource limits (non-Swarm)
          mem_limit: 1g
          cpus: '1.0'
          tmpfs:
            - /tmp
          environment:
            - TZ={{ timezone }}
          volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - {{ docker_dir }}/watchtower/config/traefik:/etc/traefik:ro
            - {{ logs_dir }}/watchtower/traefik:/logs
          restart: unless-stopped
          networks:
            - homelab
          labels:
            - "traefik.enable=true"
            - "traefik.docker.network=homelab"
            - "traefik.http.routers.traefik.rule=Host(`traefik.{{ domain }}`)"
            - "traefik.http.routers.traefik.entrypoints=websecure"
            - "traefik.http.routers.traefik.tls=true"
            - "traefik.http.routers.traefik.tls.certresolver=cloudflare"
            - "traefik.http.services.traefik.loadbalancer.server.port=8080"
            - "traefik.http.middlewares.traefik-auth.forwardauth.address=http://authentik:9000/outpost.goauthentik.io/auth/traefik"
            - "traefik.http.middlewares.traefik-auth.forwardauth.trustForwardHeader=true"
            - "traefik.http.routers.traefik.middlewares=traefik-auth"
          healthcheck:
            test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:8080/ping || exit 1"]
            interval: 30s
            timeout: 10s
            retries: 3

        # Authentication Service
        authentik:
          image: ghcr.io/goauthentik/server:latest
          container_name: authentik
          user: "{{ vault_service_user }}"
          read_only: true
          security_opt:
            - no-new-privileges:true
          mem_limit: 2g
          cpus: '1.0'
          tmpfs:
            - /tmp
          environment:
            - TZ={{ timezone }}
            - AUTHENTIK_POSTGRES__HOST=authentik-postgres
            - AUTHENTIK_POSTGRES__USER=authentik
            - AUTHENTIK_POSTGRES__NAME=authentik
            - AUTHENTIK_REDIS__HOST=authentik-redis
          volumes:
            - {{ docker_dir }}/watchtower/config/authentik:/media:ro
            - {{ data_dir }}/watchtower/authentik:/media/backups
            - {{ logs_dir }}/watchtower/authentik:/logs
            - {{ docker_dir }}/watchtower/secrets:/run/secrets:ro
          entrypoint: ["/bin/sh","-lc"]
          command: >
            export AUTHENTIK_SECRET_KEY="$(cat /run/secrets/AUTHENTIK_SECRET_KEY)" && \
            export AUTHENTIK_POSTGRES__PASSWORD="$(cat /run/secrets/AUTHENTIK_POSTGRES_PASSWORD)" && \
            exec /entrypoint.sh server
          restart: unless-stopped
          networks:
            - homelab
            - security
          labels:
            - "traefik.enable=true"
            - "traefik.docker.network=homelab"
            - "traefik.http.routers.authentik.rule=Host(`auth.{{ domain }}`)"
            - "traefik.http.routers.authentik.entrypoints=websecure"
            - "traefik.http.routers.authentik.tls=true"
            - "traefik.http.routers.authentik.tls.certresolver=cloudflare"
            - "traefik.http.services.authentik.loadbalancer.server.port=9000"
          healthcheck:
            test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:9000/health || exit 1"]
            interval: 30s
            timeout: 10s
            retries: 3
          depends_on:
            - authentik-postgres
            - authentik-redis

        authentik-postgres:
          image: postgres:15-alpine
          container_name: authentik-postgres
          user: "{{ vault_service_user }}"
          read_only: true
          security_opt:
            - no-new-privileges:true
          mem_limit: 1g
          cpus: '0.5'
          tmpfs:
            - /tmp
          environment:
            - POSTGRES_USER=authentik
            - POSTGRES_PASSWORD_FILE=/run/secrets/AUTHENTIK_POSTGRES_PASSWORD
            - POSTGRES_DB=authentik
          volumes:
            - {{ data_dir }}/watchtower/authentik/postgres:/var/lib/postgresql/data
            - {{ docker_dir }}/watchtower/secrets:/run/secrets:ro
            - {{ logs_dir }}/watchtower/authentik/postgres:/var/log/postgresql
          restart: unless-stopped
          networks:
            - security
          healthcheck:
            test: ["CMD-SHELL", "pg_isready -U authentik"]
            interval: 30s
            timeout: 10s
            retries: 3

        authentik-redis:
          image: redis:7-alpine
          container_name: authentik-redis
          user: "{{ vault_service_user }}"
          read_only: true
          security_opt:
            - no-new-privileges:true
          mem_limit: 512m
          cpus: '0.3'
          tmpfs:
            - /tmp
          command: >
            sh -lc 'exec redis-server --requirepass "$(cat /run/secrets/AUTHENTIK_REDIS_PASSWORD)"'
          volumes:
            - {{ data_dir }}/watchtower/authentik/redis:/data
            - {{ logs_dir }}/watchtower/authentik/redis:/logs
            - {{ docker_dir }}/watchtower/secrets:/run/secrets:ro
          restart: unless-stopped
          networks:
            - security
          healthcheck:
            test: ["CMD-SHELL", 'redis-cli -a "$(cat /run/secrets/AUTHENTIK_REDIS_PASSWORD)" ping']
            interval: 30s
            timeout: 10s
            retries: 3

        # Monitoring Stack
        grafana:
          image: grafana/grafana:latest
          container_name: grafana
          user: "{{ vault_service_user }}"
          read_only: true
          security_opt:
            - no-new-privileges:true
          mem_limit: 1g
          cpus: '1.0'
          tmpfs:
            - /tmp
          environment:
            - TZ={{ timezone }}
            - GF_SECURITY_ADMIN_USER={{ grafana_admin_user }}
            - GF_SECURITY_ADMIN_PASSWORD__FILE=/run/secrets/GF_SECURITY_ADMIN_PASSWORD
            - GF_SECURITY_SECRET_KEY__FILE=/run/secrets/GF_SECURITY_SECRET_KEY
            - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
          volumes:
            - {{ docker_dir }}/watchtower/config/grafana:/etc/grafana:ro
            - {{ docker_dir }}/watchtower/secrets:/run/secrets:ro
            - {{ data_dir }}/watchtower/grafana:/var/lib/grafana
            - {{ logs_dir }}/watchtower/grafana:/var/log/grafana
          restart: unless-stopped
          networks:
            - homelab
            - monitoring
          labels:
            - "traefik.enable=true"
            - "traefik.docker.network=homelab"
            - "traefik.http.routers.grafana.rule=Host(`grafana.{{ domain }}`)"
            - "traefik.http.routers.grafana.entrypoints=websecure"
            - "traefik.http.routers.grafana.tls=true"
            - "traefik.http.routers.grafana.tls.certresolver=cloudflare"
            - "traefik.http.services.grafana.loadbalancer.server.port=3000"
            - "traefik.http.middlewares.grafana-auth.forwardauth.address=http://authentik:9000/outpost.goauthentik.io/auth/traefik"
            - "traefik.http.middlewares.grafana-auth.forwardauth.trustForwardHeader=true"
            - "traefik.http.routers.grafana.middlewares=grafana-auth"
          healthcheck:
            test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:3000/api/health || exit 1"]
            interval: 30s
            timeout: 10s
            retries: 3

        prometheus:
          image: prom/prometheus:latest
          container_name: prometheus
          user: "{{ vault_service_user }}"
          read_only: true
          security_opt:
            - no-new-privileges:true
          mem_limit: 1g
          cpus: '0.5'
          tmpfs:
            - /tmp
          command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.console.libraries=/etc/prometheus/console_libraries'
            - '--web.console.templates=/etc/prometheus/consoles'
            - '--storage.tsdb.retention.time=200h'
            - '--web.enable-lifecycle'
          volumes:
            - {{ docker_dir }}/watchtower/config/prometheus:/etc/prometheus:ro
            - {{ data_dir }}/watchtower/prometheus:/prometheus
            - {{ logs_dir }}/watchtower/prometheus:/var/log/prometheus
          restart: unless-stopped
          networks:
            - monitoring
          labels:
            - "traefik.enable=true"
            - "traefik.docker.network=homelab"
            - "traefik.http.routers.prometheus.rule=Host(`prometheus.{{ domain }}`)"
            - "traefik.http.routers.prometheus.entrypoints=websecure"
            - "traefik.http.routers.prometheus.tls=true"
            - "traefik.http.routers.prometheus.tls.certresolver=cloudflare"
            - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
            - "traefik.http.middlewares.prometheus-auth.forwardauth.address=http://authentik:9000/outpost.goauthentik.io/auth/traefik"
            - "traefik.http.middlewares.prometheus-auth.forwardauth.trustForwardHeader=true"
            - "traefik.http.routers.prometheus.middlewares=prometheus-auth"
          healthcheck:
            test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:9090/-/healthy || exit 1"]
            interval: 30s
            timeout: 10s
            retries: 3

        influxdb:
          image: influxdb:2.7-alpine
          container_name: influxdb
          user: "{{ vault_service_user }}"
          read_only: true
          security_opt:
            - no-new-privileges:true
          deploy:
            resources:
              limits:
                cpus: '1.0'
                memory: 2G
              reservations:
                cpus: '0.3'
                memory: 512M
          tmpfs:
            - /tmp
          environment:
            - TZ={{ timezone }}
            - DOCKER_INFLUXDB_INIT_MODE=setup
            - DOCKER_INFLUXDB_INIT_USERNAME={{ influxdb_admin_user }}
            - DOCKER_INFLUXDB_INIT_ORG={{ influxdb_org }}
            - DOCKER_INFLUXDB_INIT_BUCKET={{ influxdb_bucket }}
          volumes:
            - {{ data_dir }}/watchtower/influxdb:/var/lib/influxdb2
            - {{ logs_dir }}/watchtower/influxdb:/var/log/influxdb
            - {{ docker_dir }}/watchtower/secrets:/run/secrets:ro
          entrypoint: ["/bin/sh","-lc"]
          command: >
            export DOCKER_INFLUXDB_INIT_PASSWORD="$(cat /run/secrets/INFLUXDB_ADMIN_PASSWORD)" && \
            export DOCKER_INFLUXDB_INIT_ADMIN_TOKEN="$(cat /run/secrets/INFLUXDB_ADMIN_TOKEN)" && \
            exec /entrypoint.sh influxd
          restart: unless-stopped
          networks:
            - monitoring
          labels:
            - "traefik.enable=true"
            - "traefik.docker.network=homelab"
            - "traefik.http.routers.influxdb.rule=Host(`influxdb.{{ domain }}`)"
            - "traefik.http.routers.influxdb.entrypoints=websecure"
            - "traefik.http.routers.influxdb.tls=true"
            - "traefik.http.routers.influxdb.tls.certresolver=cloudflare"
            - "traefik.http.services.influxdb.loadbalancer.server.port=8086"
            - "traefik.http.middlewares.influxdb-auth.forwardauth.address=http://authentik:9000/outpost.goauthentik.io/auth/traefik"
            - "traefik.http.middlewares.influxdb-auth.forwardauth.trustForwardHeader=true"
            - "traefik.http.routers.influxdb.middlewares=influxdb-auth"
          healthcheck:
            test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:8086/health || exit 1"]
            interval: 30s
            timeout: 10s
            retries: 3

        # Security Services
        crowdsec:
          image: crowdsecurity/crowdsec:latest
          container_name: crowdsec
          user: "{{ vault_service_user }}"
          read_only: true
          security_opt:
            - no-new-privileges:true
          deploy:
            resources:
              limits:
                cpus: '0.5'
                memory: 512M
              reservations:
                cpus: '0.1'
                memory: 128M
          tmpfs:
            - /tmp
          environment:
            - TZ={{ timezone }}
            - COLLECTIONS=crowdsecurity/sshd
          volumes:
            - {{ docker_dir }}/watchtower/config/crowdsec:/etc/crowdsec:ro
            - {{ data_dir }}/watchtower/crowdsec:/var/lib/crowdsec
            - {{ logs_dir }}/watchtower/crowdsec:/var/log/crowdsec
            - /var/log/auth.log:/var/log/auth.log:ro
          restart: unless-stopped
          networks:
            - security
          labels:
            - "traefik.enable=true"
            - "traefik.docker.network=homelab"
            - "traefik.http.routers.crowdsec.rule=Host(`crowdsec.{{ domain }}`)"
            - "traefik.http.routers.crowdsec.entrypoints=websecure"
            - "traefik.http.routers.crowdsec.tls=true"
            - "traefik.http.routers.crowdsec.tls.certresolver=cloudflare"
            - "traefik.http.services.crowdsec.loadbalancer.server.port=8080"
            - "traefik.http.middlewares.crowdsec-auth.forwardauth.address=http://authentik:9000/outpost.goauthentik.io/auth/traefik"
            - "traefik.http.middlewares.crowdsec-auth.forwardauth.trustForwardHeader=true"
            - "traefik.http.routers.crowdsec.middlewares=crowdsec-auth"
          healthcheck:
            test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:8080/health || exit 1"]
            interval: 30s
            timeout: 10s
            retries: 3

        vault:
          image: vault:1.15
          container_name: vault
          user: "{{ vault_service_user }}"
          read_only: true
          security_opt:
            - no-new-privileges:true
          deploy:
            resources:
              limits:
                cpus: '0.5'
                memory: 1G
              reservations:
                cpus: '0.1'
                memory: 256M
          tmpfs:
            - /tmp
          cap_add:
            - IPC_LOCK
          environment:
            - TZ={{ timezone }}
            - VAULT_ADDR=http://{{ ansible_default_ipv4.address }}:8200
            - VAULT_API_ADDR=http://{{ ansible_default_ipv4.address }}:8200
            - VAULT_CLUSTER_ADDR=https://vault:8201
          volumes:
            - {{ docker_dir }}/watchtower/config/vault:/vault/config:ro
            - {{ data_dir }}/watchtower/vault:/vault/file
            - {{ logs_dir }}/watchtower/vault:/vault/logs
          restart: unless-stopped
          networks:
            - security
          labels:
            - "traefik.enable=true"
            - "traefik.docker.network=homelab"
            - "traefik.http.routers.vault.rule=Host(`vault.{{ domain }}`)"
            - "traefik.http.routers.vault.entrypoints=websecure"
            - "traefik.http.routers.vault.tls=true"
            - "traefik.http.routers.vault.tls.certresolver=cloudflare"
            - "traefik.http.services.vault.loadbalancer.server.port=8200"
            - "traefik.http.middlewares.vault-auth.forwardauth.address=http://authentik:9000/outpost.goauthentik.io/auth/traefik"
            - "traefik.http.middlewares.vault-auth.forwardauth.trustForwardHeader=true"
            - "traefik.http.routers.vault.middlewares=vault-auth"
          healthcheck:
            test: ["CMD", "vault", "status"]
            interval: 30s
            timeout: 10s
            retries: 3

        # Media Stack
        jellyfin:
          image: jellyfin/jellyfin:latest
          container_name: jellyfin
          user: "{{ vault_service_user }}"
          read_only: true
          security_opt:
            - no-new-privileges:true
          mem_limit: 4g
          cpus: '2.0'
          tmpfs:
            - /tmp
            - /transcode
          environment:
            - TZ={{ timezone }}
            - JELLYFIN_PublishedServerUrl=https://jellyfin.{{ domain }}
          volumes:
            - {{ docker_dir }}/watchtower/config/jellyfin:/config:ro
            - {{ data_dir }}/watchtower/media/movies:/movies:ro
            - {{ data_dir }}/watchtower/media/tv:/tv:ro
            - {{ data_dir }}/watchtower/media/music:/music:ro
            - {{ logs_dir }}/watchtower/jellyfin:/logs
          restart: unless-stopped
          networks:
            - homelab
            - media
          labels:
            - "traefik.enable=true"
            - "traefik.docker.network=homelab"
            - "traefik.http.routers.jellyfin.rule=Host(`jellyfin.{{ domain }}`)"
            - "traefik.http.routers.jellyfin.entrypoints=websecure"
            - "traefik.http.routers.jellyfin.tls=true"
            - "traefik.http.routers.jellyfin.tls.certresolver=cloudflare"
            - "traefik.http.services.jellyfin.loadbalancer.server.port=8096"
            - "traefik.http.middlewares.jellyfin-auth.forwardauth.address=http://authentik:9000/outpost.goauthentik.io/auth/traefik"
            - "traefik.http.middlewares.jellyfin-auth.forwardauth.trustForwardHeader=true"
            - "traefik.http.routers.jellyfin.middlewares=jellyfin-auth"
          healthcheck:
            test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:8096/health || exit 1"]
            interval: 30s
            timeout: 10s
            retries: 3

        sonarr:
          image: lscr.io/linuxserver/sonarr:latest
          container_name: sonarr
          user: "{{ vault_service_user }}"
          read_only: true
          security_opt:
            - no-new-privileges:true
          mem_limit: 1g
          cpus: '0.5'
          tmpfs:
            - /tmp
          environment:
            - TZ={{ timezone }}
            - PUID={{ puid }}
            - PGID={{ pgid }}
          volumes:
            - {{ docker_dir }}/watchtower/config/sonarr:/config:ro
            - {{ data_dir }}/watchtower/media/tv:/tv
            - {{ data_dir }}/watchtower/downloads:/downloads
            - {{ logs_dir }}/watchtower/sonarr:/logs
          restart: unless-stopped
          networks:
            - homelab
            - media
          labels:
            - "traefik.enable=true"
            - "traefik.docker.network=homelab"
            - "traefik.http.routers.sonarr.rule=Host(`sonarr.{{ domain }}`)"
            - "traefik.http.routers.sonarr.entrypoints=websecure"
            - "traefik.http.routers.sonarr.tls=true"
            - "traefik.http.routers.sonarr.tls.certresolver=cloudflare"
            - "traefik.http.services.sonarr.loadbalancer.server.port=8989"
            - "traefik.http.middlewares.sonarr-auth.forwardauth.address=http://authentik:9000/outpost.goauthentik.io/auth/traefik"
            - "traefik.http.middlewares.sonarr-auth.forwardauth.trustForwardHeader=true"
            - "traefik.http.routers.sonarr.middlewares=sonarr-auth"
          healthcheck:
            test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:8989/health || exit 1"]
            interval: 30s
            timeout: 10s
            retries: 3

        radarr:
          image: lscr.io/linuxserver/radarr:latest
          container_name: radarr
          user: "{{ vault_service_user }}"
          read_only: true
          security_opt:
            - no-new-privileges:true
          deploy:
            resources:
              limits:
                cpus: '0.5'
                memory: 1G
              reservations:
                cpus: '0.1'
                memory: 256M
          tmpfs:
            - /tmp
          environment:
            - TZ={{ timezone }}
            - PUID={{ puid }}
            - PGID={{ pgid }}
          volumes:
            - {{ docker_dir }}/watchtower/config/radarr:/config:ro
            - {{ data_dir }}/watchtower/media/movies:/movies
            - {{ data_dir }}/watchtower/downloads:/downloads
            - {{ logs_dir }}/watchtower/radarr:/logs
          restart: unless-stopped
          networks:
            - homelab
            - media
          labels:
            - "traefik.enable=true"
            - "traefik.docker.network=homelab"
            - "traefik.http.routers.radarr.rule=Host(`radarr.{{ domain }}`)"
            - "traefik.http.routers.radarr.entrypoints=websecure"
            - "traefik.http.routers.radarr.tls=true"
            - "traefik.http.routers.radarr.tls.certresolver=cloudflare"
            - "traefik.http.services.radarr.loadbalancer.server.port=7878"
            - "traefik.http.middlewares.radarr-auth.forwardauth.address=http://authentik:9000/outpost.goauthentik.io/auth/traefik"
            - "traefik.http.middlewares.radarr-auth.forwardauth.trustForwardHeader=true"
            - "traefik.http.routers.radarr.middlewares=radarr-auth"
          healthcheck:
            test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:7878/health || exit 1"]
            interval: 30s
            timeout: 10s
            retries: 3

        # Dashboard
        homepage:
          image: ghcr.io/benphelps/homepage:latest
          container_name: homepage
          user: "{{ vault_service_user }}"
          read_only: true
          security_opt:
            - no-new-privileges:true
          deploy:
            resources:
              limits:
                cpus: '0.3'
                memory: 512M
              reservations:
                cpus: '0.1'
                memory: 128M
          tmpfs:
            - /tmp
          environment:
            - TZ={{ timezone }}
            - PUID={{ puid }}
            - PGID={{ pgid }}
          volumes:
            - {{ docker_dir }}/watchtower/config/homepage:/app/config:ro
            - {{ logs_dir }}/watchtower/homepage:/logs
          restart: unless-stopped
          networks:
            - homelab
          labels:
            - "traefik.enable=true"
            - "traefik.docker.network=homelab"
            - "traefik.http.routers.homepage.rule=Host(`homepage.{{ domain }}`)"
            - "traefik.http.routers.homepage.entrypoints=websecure"
            - "traefik.http.routers.homepage.tls=true"
            - "traefik.http.routers.homepage.tls.certresolver=cloudflare"
            - "traefik.http.services.homepage.loadbalancer.server.port=3000"
            - "traefik.http.middlewares.homepage-auth.forwardauth.address=http://authentik:9000/outpost.goauthentik.io/auth/traefik"
            - "traefik.http.middlewares.homepage-auth.forwardauth.trustForwardHeader=true"
            - "traefik.http.routers.homepage.middlewares=homepage-auth"
          healthcheck:
            test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:3000/health || exit 1"]
            interval: 30s
            timeout: 10s
            retries: 3

- name: Create Watchtower log rotation configuration
  ansible.builtin.template:
    src: roles/logging/templates/logrotate.conf.j2
    dest: "{{ docker_dir }}/watchtower/config/logrotate.conf"
    mode: "0644"
    owner: "{{ username }}"
    group: "{{ username }}"

- name: Add Watchtower log rotation to crontab
  ansible.builtin.cron:
    name: "Rotate Watchtower logs"
    job: "logrotate {{ docker_dir }}/watchtower/config/logrotate.conf"
    user: "{{ vault_service_user }}"
    minute: "0"
    hour: "*/6"

- name: Create Watchtower stack health check script
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/watchtower/config/healthcheck.sh"
    content: |
      #!/bin/bash
      # Health check script for Watchtower service stack

      # Define critical services
      critical_services=("traefik" "authentik" "grafana" "prometheus" "influxdb" "vault" "jellyfin" "homepage")

      # Check if Docker is running
      if ! systemctl is-active --quiet docker; then
        echo "ERROR: Docker service is not running"
        exit 1
      fi

      # Check each critical service
      for service in "${critical_services[@]}"; do
        if ! docker ps -f name="$service" -f status=running | grep -q "$service"; then
          echo "ERROR: Service $service is not running"
          exit 2
        fi

        # Check for privileged mode
        if docker inspect "$service" | grep -q '"Privileged": true'; then
          echo "WARNING: Service $service is running in privileged mode"
          exit 3
        fi

        # Check for high resource usage (CPU > 90%)
        CPU=$(docker stats --no-stream --format '{{.CPUPerc}}' "$service" | tr -d '%')
        CPU=${CPU%%.*}
        if [ "$CPU" -ge 90 ]; then
          echo "WARNING: Service $service CPU usage is high ($CPU%)"
          exit 4
        fi
      done

      # Check network connectivity
      if ! curl -sf https://homepage.{{ domain }}/health > /dev/null; then
        echo "WARNING: Homepage health endpoint not responding"
        exit 5
      fi

      echo "Watchtower stack is healthy and secure"
      exit 0
    mode: "0755"
    owner: "{{ username }}"
    group: "{{ username }}"

- name: Create Watchtower stack security monitoring script
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/watchtower/config/security-monitor.sh"
    content: |
      #!/bin/bash
      # Security monitoring script for Watchtower stack

      LOG_FILE="{{ logs_dir }}/watchtower/security-monitor.log"

      # Create log directory if it doesn't exist
      mkdir -p "$(dirname "$LOG_FILE")"

      # Function to log security events
      log_security_event() {
        echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
      }

      # Check for unauthorized container access
      unauthorized_access=$(docker ps --format "table {{.Names}}\t{{.Ports}}" | grep -E "{{ ansible_default_ipv4.address }}:[0-9]+" | grep -v "traefik\|authentik")
      if [ -n "$unauthorized_access" ]; then
        log_security_event "WARNING: Unauthorized container port exposure detected: $unauthorized_access"
      fi

      # Check for containers running as root
      root_containers=$(docker ps --format "table {{.Names}}\t{{.User}}" | grep -E "\sroot\s*$" | awk '{print $1}')
      if [ -n "$root_containers" ]; then
        log_security_event "WARNING: Containers running as root: $root_containers"
      fi

      # Check for privileged containers
      privileged_containers=$(docker ps --format "table {{.Names}}\t{{.Status}}" | grep -E "Up.*privileged" | awk '{print $1}')
      if [ -n "$privileged_containers" ]; then
        log_security_event "WARNING: Privileged containers detected: $privileged_containers"
      fi

      # Check for containers with excessive capabilities
      excessive_caps=$(docker ps --format "table {{.Names}}\t{{.Status}}" | grep -E "Up.*cap_add" | awk '{print $1}')
      if [ -n "$excessive_caps" ]; then
        log_security_event "WARNING: Containers with excessive capabilities: $excessive_caps"
      fi

      # Check for failed authentication attempts
      auth_failures=$(grep -c "authentication failure" /var/log/auth.log 2>/dev/null || echo "0")
      if [ "$auth_failures" -gt 10 ]; then
        log_security_event "WARNING: High number of authentication failures: $auth_failures"
      fi

      # Check for suspicious network connections
      suspicious_connections=$(netstat -tuln | grep -E ":(22|23|3389|5900)" | wc -l)
      if [ "$suspicious_connections" -gt 5 ]; then
        log_security_event "WARNING: Suspicious network connections detected: $suspicious_connections"
      fi

      log_security_event "Security scan completed successfully"
    mode: "0755"
    owner: "{{ username }}"
    group: "{{ username }}"

- name: Add security monitoring to crontab
  ansible.builtin.cron:
    name: "Watchtower security monitoring"
    job: "{{ docker_dir }}/watchtower/config/security-monitor.sh"
    user: "{{ vault_service_user }}"
    minute: "*/15"
    hour: "*"

- name: Create Watchtower stack secrets directory with proper permissions
  ansible.builtin.file:
    path: "{{ docker_dir }}/watchtower/secrets"
    state: directory
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0700"

- name: Create encrypted secrets template
  ansible.builtin.template:
    src: templates/watchtower-secrets.yml.j2
    dest: "{{ docker_dir }}/watchtower/secrets/secrets.yml"
    mode: "0600"
    owner: "{{ username }}"
    group: "{{ username }}"
    backup: true

- name: Run container security scan on Watchtower stack images
  community.docker.docker_container:
    name: watchtower-security-scan
    image: aquasec/trivy:latest
    command: image --severity HIGH,CRITICAL --format json --output /scan-results/scan-report.json {{ item }}
    auto_remove: true
    volumes:
      - "{{ docker_dir }}/watchtower/scan-results:/scan-results"
  loop:
    - traefik:v2.10
    - ghcr.io/goauthentik/server:latest
    - grafana/grafana:latest
    - prom/prometheus:latest
    - influxdb:2.7-alpine
    - crowdsecurity/crowdsec:latest
    - vault:1.15
    - jellyfin/jellyfin:latest
    - lscr.io/linuxserver/sonarr:latest
    - lscr.io/linuxserver/radarr:latest
    - ghcr.io/benphelps/homepage:latest
  register: security_scan_results
  failed_when: security_scan_results.results | map(attribute='rc') | select('ne', 0) | list | length > 0

- name: Create scan results directory
  ansible.builtin.file:
    path: "{{ docker_dir }}/watchtower/scan-results"
    state: directory
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0755"

- name: Generate security scan summary
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/watchtower/scan-results/security-summary.txt"
    content: |
      Watchtower Stack Security Scan Summary
      Generated: {{ ansible_date_time.iso8601 }}

      Scan Results:
      {% for result in security_scan_results.results %}
      - {{ result.item }}: {{ 'PASS' if result.rc == 0 else 'FAIL' }}
      {% endfor %}

      For detailed results, check the JSON files in this directory.
    mode: "0644"
    owner: "{{ username }}"
    group: "{{ username }}"

- name: Clean up old scan results
  ansible.builtin.file:
    path: "{{ docker_dir }}/watchtower/scan-results"
    state: absent
  when: security_scan_results.results | map(attribute='rc') | select('ne', 0) | list | length > 0

# Consider implementing network segmentation and network policies for Watchtower
# Example: Use firewalld, ufw, or Docker network policies to restrict access
