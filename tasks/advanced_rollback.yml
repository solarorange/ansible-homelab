---
# COMMENT: Production-ready Advanced Rollback Management
# COMMENT: Comprehensive rollback procedures for failed deployments with security
# COMMENT: Generated by: {{ ansible_managed }}
# COMMENT: Timestamp: {{ ansible_date_time.iso8601 }}
# COMMENT: Environment: {{ deployment_environment | default('production') }}

# COMMENT: Production rollback directory creation with security
- name: "Create production rollback directory with security"
  ansible.builtin.file:
    path: "{{ rollback_dir | default('/var/backups/ansible-homelab/rollback') }}"
    state: directory
    mode: '0750'
    owner: "{{ rollback_user | default(ansible_user) }}"
    group: "{{ rollback_group | default(ansible_user) }}"
    backup: yes
  tags: [rollback, setup, security, production]

# COMMENT: Production rollback point creation with comprehensive metadata
- name: "Create production rollback point before deployment with security"
  ansible.builtin.template:
    src: templates/rollback-point.json.j2
    dest: "{{ rollback_dir | default('/var/backups/ansible-homelab/rollback') }}/rollback-point-{{ ansible_date_time.epoch }}.json"
    mode: '0640'
    owner: "{{ rollback_user | default(ansible_user) }}"
    group: "{{ rollback_group | default(ansible_user) }}"
    backup: yes
    validate: "python3 -m json.tool %s"
  vars:
    rollback_metadata:
      timestamp: "{{ ansible_date_time.iso8601 }}"
      epoch: "{{ ansible_date_time.epoch }}"
      hostname: "{{ ansible_hostname }}"
      environment: "{{ deployment_environment | default('production') }}"
      user: "{{ ansible_user }}"
      deployment_type: "{{ deployment_type | default('standard') }}"
      services_count: "{{ enabled_services | default([]) | length }}"
      backup_size_mb: "{{ (ansible_memtotal_mb | default(0)) / 100 | round(1) }}"
  tags: [rollback, point, security, production]

# COMMENT: Production Docker Compose files backup with security validation
- name: "Backup current Docker Compose files with security validation"
  block:
    - name: "Validate Docker Compose file exists and is readable"
      ansible.builtin.stat:
        path: "{{ docker_dir | default('/opt/services') }}/{{ item }}/docker-compose.yml"
      register: compose_file_check
      tags: [rollback, backup, validation, security]

    - name: "Backup Docker Compose file with security"
      ansible.builtin.copy:
        src: "{{ docker_dir | default('/opt/services') }}/{{ item }}/docker-compose.yml"
        dest: "{{ rollback_dir | default('/var/backups/ansible-homelab/rollback') }}/{{ item }}-{{ ansible_date_time.epoch }}.yml"
        remote_src: yes
        mode: '0640'
        owner: "{{ rollback_user | default(ansible_user) }}"
        group: "{{ rollback_group | default(ansible_user) }}"
        backup: yes
        validate: "docker-compose -f %s config --quiet"
      loop: "{{ enabled_services | default([]) }}"
      when:
        - item in enabled_services
        - compose_file_check.stat.exists
        - compose_file_check.stat.isreg
        - compose_file_check.stat.readable
      register: compose_backup_result
      tags: [rollback, backup, compose, security]

    - name: "Report Docker Compose backup failures with security details"
      ansible.builtin.fail:
        msg: |
          Docker Compose backup failed for {{ item.item }}:

          Error: {{ item.msg | default('Unknown error') }}
          Source: {{ docker_dir | default('/opt/services') }}/{{ item.item }}/docker-compose.yml
          Destination: {{ rollback_dir | default('/var/backups/ansible-homelab/rollback') }}/{{ item.item }}-{{ ansible_date_time.epoch }}.yml

          Please check:
          - File permissions and ownership
          - Available disk space
          - Backup directory security
          - File integrity and readability
      loop: "{{ compose_backup_result.results }}"
      when: item is failed
      tags: [rollback, backup, compose, security, failure]

  tags: [rollback, backup, compose, security, production]

# COMMENT: Production environment files backup with security validation
- name: "Backup current environment files with security validation"
  block:
    - name: "Validate environment file exists and is secure"
      ansible.builtin.stat:
        path: "{{ docker_dir | default('/opt/services') }}/{{ item }}/.env"
      register: env_file_check
      tags: [rollback, backup, validation, security]

    - name: "Backup environment file with security"
      ansible.builtin.copy:
        src: "{{ docker_dir | default('/opt/services') }}/{{ item }}/.env"
        dest: "{{ rollback_dir | default('/var/backups/ansible-homelab/rollback') }}/{{ item }}-env-{{ ansible_date_time.epoch }}.env"
        remote_src: yes
        mode: '0600'
        owner: "{{ rollback_user | default(ansible_user) }}"
        group: "{{ rollback_group | default(ansible_user) }}"
        backup: yes
      loop: "{{ enabled_services | default([]) }}"
      when:
        - item in enabled_services
        - env_file_check.stat.exists
        - env_file_check.stat.isreg
        - env_file_check.stat.readable
      register: env_backup_result
      tags: [rollback, backup, env, security]

    - name: "Report environment file backup failures with security details"
      ansible.builtin.fail:
        msg: |
          Environment file backup failed for {{ item.item }}:

          Error: {{ item.msg | default('Unknown error') }}
          Source: {{ docker_dir | default('/opt/services') }}/{{ item.item }}/.env
          Destination: {{ rollback_dir | default('/var/backups/ansible-homelab/rollback') }}/{{ item.item }}-env-{{ ansible_date_time.epoch }}.env

          Please check:
          - File permissions and ownership
          - Available disk space
          - Backup directory security
          - File integrity and readability
      loop: "{{ env_backup_result.results }}"
      when: item is failed
      tags: [rollback, backup, env, security, failure]

  tags: [rollback, backup, env, security, production]

# COMMENT: Production service state backup with comprehensive data
- name: "Backup production service state with comprehensive data"
  block:
    - name: "Backup Docker service state with security"
      ansible.builtin.shell: |
        cd "{{ docker_dir | default('/opt/services') }}" && \
        docker-compose ps --format json > "{{ rollback_dir | default('/var/backups/ansible-homelab/rollback') }}/service-state-{{ ansible_date_time.epoch }}.json" && \
        docker-compose config > "{{ rollback_dir | default('/var/backups/ansible-homelab/rollback') }}/compose-config-{{ ansible_date_time.epoch }}.yml"
      register: service_state_backup
      changed_when: false
      failed_when: false
      tags: [rollback, backup, state, security]

    - name: "Report service state backup failures with security details"
      ansible.builtin.fail:
        msg: |
          Service state backup failed:

          Error: {{ service_state_backup.stderr | default('Unknown error') }}
          Return Code: {{ service_state_backup.rc }}

          Please check:
          - Docker service is running
          - Docker Compose is available
          - Backup directory permissions
          - Available disk space
      when: service_state_backup.rc != 0
      tags: [rollback, backup, state, security, failure]

    - name: "Backup system resource state with security"
      ansible.builtin.shell: |
        echo "=== System Resource State ===" > "{{ rollback_dir | default('/var/backups/ansible-homelab/rollback') }}/system-state-{{ ansible_date_time.epoch }}.txt" && \
        echo "Timestamp: $(date)" >> "{{ rollback_dir | default('/var/backups/ansible-homelab/rollback') }}/system-state-{{ ansible_date_time.epoch }}.txt" && \
        echo "Hostname: $(hostname)" >> "{{ rollback_dir | default('/var/backups/ansible-homelab/rollback') }}/system-state-{{ ansible_date_time.epoch }}.txt" && \
        echo "Uptime: $(uptime)" >> "{{ rollback_dir | default('/var/backups/ansible-homelab/rollback') }}/system-state-{{ ansible_date_time.epoch }}.txt" && \
        echo "Memory: $(free -h)" >> "{{ rollback_dir | default('/var/backups/ansible-homelab/rollback') }}/system-state-{{ ansible_date_time.epoch }}.txt" && \
        echo "Disk: $(df -h)" >> "{{ rollback_dir | default('/var/backups/ansible-homelab/rollback') }}/system-state-{{ ansible_date_time.epoch }}.txt" && \
        echo "Docker: $(docker version --format '{{.Server.Version}}')" >> "{{ rollback_dir | default('/var/backups/ansible-homelab/rollback') }}/system-state-{{ ansible_date_time.epoch }}.txt"
      register: system_state_backup
      changed_when: false
      failed_when: false
      tags: [rollback, backup, system, security]

    - name: "Report system state backup failures with security details"
      ansible.builtin.fail:
        msg: |
          System state backup failed:

          Error: {{ system_state_backup.stderr | default('Unknown error') }}
          Return Code: {{ system_state_backup.rc }}

          Please check:
          - System commands are available
          - Backup directory permissions
          - Available disk space
          - System resource availability
      when: system_state_backup.rc != 0
      tags: [rollback, backup, system, security, failure]

  tags: [rollback, backup, state, security, production]

# COMMENT: Production rollback script creation with security
- name: "Create production rollback script with security"
  ansible.builtin.template:
    src: templates/rollback-execute.sh.j2
    dest: "{{ rollback_dir | default('/var/backups/ansible-homelab/rollback') }}/rollback.sh"
    mode: '0750'
    owner: "{{ rollback_user | default(ansible_user) }}"
    group: "{{ rollback_group | default(ansible_user) }}"
    backup: yes
    validate: "bash -n %s"
  vars:
    rollback_script_config:
      docker_dir: "{{ docker_dir | default('/opt/services') }}"
      rollback_dir: "{{ rollback_dir | default('/var/backups/ansible-homelab/rollback') }}"
      backup_user: "{{ rollback_user | default(ansible_user) }}"
      backup_group: "{{ rollback_group | default(ansible_user) }}"
      validation_timeout: "{{ rollback_validation_timeout | default(300) }}"
      validation_retries: "{{ rollback_validation_retries | default(3) }}"
  tags: [rollback, script, security, production]

# COMMENT: Production rollback configuration with comprehensive settings
- name: "Create production rollback configuration with comprehensive settings"
  ansible.builtin.set_fact:
    rollback_config:
      enabled: true
      max_rollback_points: "{{ rollback_max_points | default(10) | int }}"
      auto_rollback_on_failure: "{{ rollback_auto_enabled | default(true) | bool }}"
      rollback_timeout: "{{ rollback_timeout_seconds | default(300) | int }}"
      rollback_validation_enabled: "{{ rollback_validation_enabled | default(true) | bool }}"
      rollback_notification_enabled: "{{ rollback_notification_enabled | default(true) | bool }}"
      rollback_encryption_enabled: "{{ rollback_encryption_enabled | default(true) | bool }}"
      rollback_compression_enabled: "{{ rollback_compression_enabled | default(true) | bool }}"
      rollback_retention_days: "{{ rollback_retention_days | default(30) | int }}"
      rollback_security_checks: "{{ rollback_security_checks | default(true) | bool }}"
      rollback_audit_logging: "{{ rollback_audit_logging | default(true) | bool }}"
  tags: [rollback, config, security, production]

# COMMENT: Production rollback cleanup with security validation
- name: "Cleanup old production rollback points with security validation"
  block:
    - name: "Cleanup old rollback points with security"
      ansible.builtin.shell: |
        cd "{{ rollback_dir | default('/var/backups/ansible-homelab/rollback') }}" && \
        find . -name "rollback-point-*.json" -type f -printf '%T@ %p\n' | \
        sort -nr | tail -n +{{ rollback_config.max_rollback_points + 1 }} | \
        cut -d' ' -f2- | xargs -r rm -f && \
        find . -name "*-{{ ansible_date_time.epoch }}.yml" -type f -printf '%T@ %p\n' | \
        sort -nr | tail -n +{{ rollback_config.max_rollback_points + 1 }} | \
        cut -d' ' -f2- | xargs -r rm -f && \
        find . -name "*-env-{{ ansible_date_time.epoch }}.env" -type f -printf '%T@ %p\n' | \
        sort -nr | tail -n +{{ rollback_config.max_rollback_points + 1 }} | \
        cut -d' ' -f2- | xargs -r rm -f
      register: rollback_cleanup
      changed_when: false
      failed_when: false
      tags: [rollback, cleanup, security]

    - name: "Report rollback cleanup failures with security details"
      ansible.builtin.fail:
        msg: |
          Rollback cleanup failed:

          Error: {{ rollback_cleanup.stderr | default('Unknown error') }}
          Return Code: {{ rollback_cleanup.rc }}

          Please check:
          - Backup directory permissions
          - Available disk space
          - File ownership and access rights
          - System resource availability
      when: rollback_cleanup.rc != 0
      tags: [rollback, cleanup, security, failure]

    - name: "Cleanup old rollback points by age with security"
      ansible.builtin.shell: |
        cd "{{ rollback_dir | default('/var/backups/ansible-homelab/rollback') }}" && \
        find . -type f -mtime +{{ rollback_config.rollback_retention_days }} -exec rm -f {} \;
      register: age_based_cleanup
      changed_when: false
      failed_when: false
      tags: [rollback, cleanup, age, security]

    - name: "Report age-based cleanup failures with security details"
      ansible.builtin.fail:
        msg: |
          Age-based rollback cleanup failed:

          Error: {{ age_based_cleanup.stderr | default('Unknown error') }}
          Return Code: {{ age_based_cleanup.rc }}

          Please check:
          - Backup directory permissions
          - Available disk space
          - File ownership and access rights
          - System resource availability
      when: age_based_cleanup.rc != 0
      tags: [rollback, cleanup, age, security, failure]

  tags: [rollback, cleanup, security, production]

# COMMENT: Production rollback security validation
- name: "Validate production rollback security with comprehensive checks"
  block:
    - name: "Validate rollback directory security with comprehensive checks"
      ansible.builtin.shell: |
        rollback_dir="{{ rollback_dir | default('/var/backups/ansible-homelab/rollback') }}"

        # Check directory permissions
        dir_perms=$(stat -c "%a" "$rollback_dir")
        if [ "$dir_perms" != "750" ]; then
          echo "ERROR: Rollback directory has insecure permissions: $dir_perms (should be 750)"
          exit 1
        fi

        # Check directory ownership
        dir_owner=$(stat -c "%U:%G" "$rollback_dir")
        expected_owner="{{ rollback_user | default(ansible_user) }}:{{ rollback_group | default(ansible_user) }}"
        if [ "$dir_owner" != "$expected_owner" ]; then
          echo "ERROR: Rollback directory has incorrect ownership: $dir_owner (should be $expected_owner)"
          exit 1
        fi

        # Check file permissions
        find "$rollback_dir" -type f -exec stat -c "%a %n" {} \; | while read perms file; do
          if [[ "$perms" != "6"* ]] && [[ "$perms" != "7"* ]]; then
            echo "ERROR: File has insecure permissions: $perms $file"
            exit 1
          fi
        done

        echo "Rollback directory security validation passed"
      register: rollback_security_validation
      changed_when: false
      tags: [rollback, security, validation]

    - name: "Report rollback security validation failures with detailed information"
      ansible.builtin.fail:
        msg: |
          Rollback security validation failed:

          Error: {{ rollback_security_validation.stderr | default('Unknown error') }}
          Return Code: {{ rollback_security_validation.rc }}

          Please check:
          - Directory permissions (should be 750)
          - Directory ownership (should be {{ rollback_user | default(ansible_user) }}:{{ rollback_group | default(ansible_user) }})
          - File permissions (should be 6xx or 7xx)
          - File ownership and access rights
          - SELinux or AppArmor restrictions
      when: rollback_security_validation.rc != 0
      tags: [rollback, security, validation, failure]

  tags: [rollback, security, validation, production]

# COMMENT: Production rollback status display with comprehensive information
- name: "Display production rollback status with comprehensive information"
  ansible.builtin.debug:
    msg: |
      ========================================
      PRODUCTION ROLLBACK POINT CREATED
      ========================================

      Rollback Point: {{ ansible_date_time.epoch }}
      Timestamp: {{ ansible_date_time.iso8601 }}
      Hostname: {{ ansible_hostname }}
      Environment: {{ deployment_environment | default('production') }}
      User: {{ ansible_user }}

      Rollback Directory: {{ rollback_dir | default('/var/backups/ansible-homelab/rollback') }}/
      Rollback Script: {{ rollback_dir | default('/var/backups/ansible-homelab/rollback') }}/rollback.sh

      Configuration:
      - Max Rollback Points: {{ rollback_config.max_rollback_points }}
      - Auto Rollback: {{ 'ENABLED' if rollback_config.auto_rollback_on_failure else 'DISABLED' }}
      - Rollback Timeout: {{ rollback_config.rollback_timeout }}s
      - Validation Enabled: {{ 'YES' if rollback_config.rollback_validation_enabled else 'NO' }}
      - Notification Enabled: {{ 'YES' if rollback_config.rollback_notification_enabled else 'NO' }}
      - Encryption Enabled: {{ 'YES' if rollback_config.rollback_encryption_enabled else 'NO' }}
      - Compression Enabled: {{ 'YES' if rollback_config.rollback_compression_enabled else 'NO' }}
      - Retention Days: {{ rollback_config.rollback_retention_days }}
      - Security Checks: {{ 'YES' if rollback_config.rollback_security_checks else 'NO' }}
      - Audit Logging: {{ 'YES' if rollback_config.rollback_audit_logging else 'NO' }}

      To rollback: {{ rollback_dir | default('/var/backups/ansible-homelab/rollback') }}/rollback.sh {{ ansible_date_time.epoch }}

      Security Status: {{ 'PASSED' if rollback_security_validation.rc == 0 else 'FAILED' }}

      ========================================
  tags: [rollback, summary, security, production]
