---
# COMMENT: Production-ready Service Validation Tasks
# COMMENT: Comprehensive validation of all deployed services with security and reliability
# COMMENT: Generated by: {{ ansible_managed }}
# COMMENT: Timestamp: {{ ansible_date_time.iso8601 }}
# COMMENT: Environment: {{ deployment_environment | default('production') }}

# COMMENT: Production service configuration validation with security
- name: "Validate production service configurations"
  block:
    - name: "Check Docker Compose files syntax with security validation"
      ansible.builtin.shell: |
        cd "{{ docker_dir }}/{{ item }}" && \
        docker-compose -f docker-compose.yml config --quiet
      loop: "{{ enabled_services | default([]) }}"
      register: compose_validation
      changed_when: false
      failed_when: false
      tags: [validation, compose, security]

    - name: "Report compose validation failures with detailed error information"
      ansible.builtin.fail:
        msg: |
          Docker Compose validation failed for {{ item.item }}:

          Error: {{ item.stderr | default('Unknown error') }}
          Return Code: {{ item.rc }}
          Service: {{ item.item }}

          Please check the Docker Compose configuration for syntax errors.
      loop: "{{ compose_validation.results }}"
      when: item.rc != 0
      tags: [validation, compose, security, failure]

    - name: "Validate environment variables with security checks"
      ansible.builtin.template:
        src: templates/validate_env.sh.j2
        dest: "{{ docker_dir }}/validate_env.sh"
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        backup: yes
      tags: [validation, env, security]

    - name: "Run environment validation with security checks"
      ansible.builtin.shell: "{{ docker_dir }}/validate_env.sh"
      register: env_validation
      changed_when: false
      failed_when: false
      tags: [validation, env, security]

    - name: "Report environment validation failures with security details"
      ansible.builtin.fail:
        msg: |
          Environment validation failed with security issues:

          Error: {{ env_validation.stderr | default('Unknown error') }}
          Return Code: {{ env_validation.rc }}

          Please check for:
          - Missing required environment variables
          - Insecure environment variable values
          - Hardcoded secrets or passwords
      when: env_validation.rc != 0
      tags: [validation, env, security, failure]

  tags: [validation, config, security, production]

# COMMENT: Production service connectivity validation with comprehensive checks
- name: "Validate production service connectivity with security"
  block:
    - name: "Check service ports with timeout and retry logic"
      ansible.builtin.wait_for:
        host: "{{ ansible_default_ipv4.address | default('127.0.0.1') }}"
        port: "{{ item.port }}"
        timeout: "{{ validation_timeout | default(60) }}"
        delay: "{{ validation_delay | default(10) }}"
        retries: "{{ validation_retries | default(3) }}"
      loop: "{{ service_ports | default([]) }}"
      register: port_validation
      failed_when: false
      tags: [validation, connectivity, security]

    - name: "Report port validation failures with detailed diagnostics"
      ansible.builtin.fail:
        msg: |
          Port validation failed for {{ item.item.port }}:

          Error: {{ item.msg | default('Unknown error') }}
          Host: {{ ansible_default_ipv4.address | default('127.0.0.1') }}
          Port: {{ item.item.port }}
          Timeout: {{ validation_timeout | default(60) }}

          Please check:
          - Service is running and listening on the port
          - Firewall rules allow the connection
          - Network configuration is correct
      loop: "{{ port_validation.results }}"
      when: item is failed
      tags: [validation, connectivity, security, failure]

    - name: "Test service endpoints with comprehensive health checks"
      ansible.builtin.uri:
        url: "http://{{ ansible_default_ipv4.address | default('127.0.0.1') }}:{{ item.port }}{{ item.endpoint | default('/health') }}"
        method: GET
        status_code: [200, 401, 403, 503]
        timeout: "{{ endpoint_timeout | default(30) }}"
        retries: "{{ endpoint_retries | default(2) }}"
        delay: "{{ endpoint_delay | default(5) }}"
        headers:
          User-Agent: "Ansible-Homelab-Validation/2.1.0"
      loop: "{{ service_endpoints | default([]) }}"
      register: endpoint_validation
      failed_when: false
      tags: [validation, endpoints, security]

    - name: "Report endpoint validation failures with health check details"
      ansible.builtin.fail:
        msg: |
          Endpoint validation failed for {{ item.item.url }}:

          Status: {{ item.status | default('Unknown') }}
          Error: {{ item.msg | default('Unknown error') }}
          Response Time: {{ item.elapsed | default('Unknown') }}ms

          Please check:
          - Service health endpoint is responding
          - Service is fully initialized
          - No authentication issues
          - Service dependencies are met
      loop: "{{ endpoint_validation.results }}"
      when: item is failed
      tags: [validation, endpoints, security, failure]

  tags: [validation, connectivity, security, production]

# COMMENT: Production database connection validation with security
- name: "Validate production database connections with security"
  block:
    - name: "Test PostgreSQL connection with security validation"
      ansible.builtin.shell: |
        export PGPASSWORD="{{ vault_postgresql_password | default('') }}"
        if [ -z "$PGPASSWORD" ]; then
          echo "ERROR: PostgreSQL password not set"
          exit 1
        fi

        PGPASSWORD="$PGPASSWORD" psql \
          -h "{{ ansible_default_ipv4.address | default('127.0.0.1') }}" \
          -U "{{ vault_postgresql_user | default('postgres') }}" \
          -d "{{ postgresql_database | default('homelab') }}" \
          -p "{{ postgresql_port | default(5432) }}" \
          -c "SELECT version();" \
          -t \
          --no-psqlrc \
          --no-align \
          --tuples-only
      register: postgres_validation
      changed_when: false
      failed_when: false
      no_log: true
      tags: [validation, database, security]

    - name: "Report PostgreSQL validation failures with security details"
      ansible.builtin.fail:
        msg: |
          PostgreSQL validation failed with security issues:

          Error: {{ postgres_validation.stderr | default('Unknown error') }}
          Return Code: {{ postgres_validation.rc }}

          Please check:
          - Database service is running
          - Credentials are correct and secure
          - Network connectivity to database
          - Database permissions and access control
      when: postgres_validation.rc != 0
      tags: [validation, database, security, failure]

    - name: "Test Redis connection with security validation"
      ansible.builtin.shell: |
        if [ -z "{{ vault_redis_password | default('') }}" ]; then
          echo "ERROR: Redis password not set"
          exit 1
        fi

        redis-cli \
          -h "{{ ansible_default_ipv4.address | default('127.0.0.1') }}" \
          -p "{{ redis_port | default(6379) }}" \
          -a "{{ vault_redis_password }}" \
          ping
      register: redis_validation
      changed_when: false
      failed_when: false
      no_log: true
      tags: [validation, database, security]

    - name: "Report Redis validation failures with security details"
      ansible.builtin.fail:
        msg: |
          Redis validation failed with security issues:

          Error: {{ redis_validation.stderr | default('Unknown error') }}
          Return Code: {{ redis_validation.rc }}

          Please check:
          - Redis service is running
          - Authentication is configured correctly
          - Network connectivity to Redis
          - Redis security settings
      when: redis_validation.rc != 0
      tags: [validation, database, security, failure]

  when: "'postgresql' in enabled_services or 'redis' in enabled_services"
  tags: [validation, database, security, production]

# COMMENT: Production monitoring stack validation with comprehensive checks
- name: "Validate production monitoring stack with security"
  block:
    - name: "Check Prometheus targets with health validation"
      ansible.builtin.uri:
        url: "http://{{ ansible_default_ipv4.address | default('127.0.0.1') }}:{{ prometheus_port | default(9090) }}/api/v1/targets"
        method: GET
        status_code: [200, 401, 403]
        timeout: "{{ prometheus_timeout | default(30) }}"
        retries: "{{ prometheus_retries | default(2) }}"
        delay: "{{ prometheus_delay | default(5) }}"
        headers:
          User-Agent: "Ansible-Homelab-Validation/2.1.0"
      register: prometheus_targets
      failed_when: false
      tags: [validation, monitoring, security]

    - name: "Validate Prometheus targets with detailed health analysis"
      ansible.builtin.fail:
        msg: |
          Prometheus has unhealthy targets:

          Total Targets: {{ prometheus_targets.json.targets | length }}
          Healthy Targets: {{ prometheus_targets.json.targets | selectattr('health', 'equalto', 'up') | list | length }}
          Unhealthy Targets: {{ prometheus_targets.json.targets | selectattr('health', 'equalto', 'down') | list | length }}

          Unhealthy Targets:
          {% for target in prometheus_targets.json.targets %}
          {% if target.health != 'up' %}
          - {{ target.labels.instance | default('Unknown') }}: {{ target.health }} ({{ target.lastError | default('No error details') }})
          {% endif %}
          {% endfor %}

          Please investigate unhealthy targets before continuing.
      when:
        - prometheus_targets.status == 200
        - prometheus_targets.json.targets | selectattr('health', 'equalto', 'up') | list | length < prometheus_targets.json.targets | length
      tags: [validation, monitoring, security, failure]

    - name: "Check Grafana datasources with authentication validation"
      ansible.builtin.uri:
        url: "http://{{ ansible_default_ipv4.address | default('127.0.0.1') }}:{{ grafana_port | default(3001) }}/api/datasources"
        method: GET
        status_code: [200, 401, 403]
        timeout: "{{ grafana_timeout | default(30) }}"
        retries: "{{ grafana_retries | default(2) }}"
        delay: "{{ grafana_delay | default(5) }}"
        headers:
          Authorization: "Basic {{ ('admin:' + (vault_grafana_admin_password | default(''))) | b64encode }}"
          User-Agent: "Ansible-Homelab-Validation/2.1.0"
      register: grafana_datasources
      failed_when: false
      no_log: true
      tags: [validation, monitoring, security]

    - name: "Validate Grafana datasources with configuration details"
      ansible.builtin.fail:
        msg: |
          Grafana has no configured datasources:

          Status: {{ grafana_datasources.status | default('Unknown') }}
          Response: {{ grafana_datasources.json | default('No response') }}

          Please check:
          - Grafana is properly configured
          - Datasources are added and configured
          - Authentication is working correctly
          - Monitoring stack integration is complete
      when: grafana_datasources.status == 200 and grafana_datasources.json | length == 0
      tags: [validation, monitoring, security, failure]

  when: "'prometheus' in enabled_services and 'grafana' in enabled_services"
  tags: [validation, monitoring, security, production]

# COMMENT: Production security configuration validation with comprehensive checks
- name: "Validate production security configuration with security"
  block:
    - name: "Check Traefik configuration with router validation"
      ansible.builtin.uri:
        url: "http://{{ ansible_default_ipv4.address | default('127.0.0.1') }}:{{ traefik_port | default(8080) }}/api/http/routers"
        method: GET
        status_code: [200, 401, 403]
        timeout: "{{ traefik_timeout | default(30) }}"
        retries: "{{ traefik_retries | default(2) }}"
        delay: "{{ traefik_delay | default(5) }}"
        headers:
          User-Agent: "Ansible-Homelab-Validation/2.1.0"
      register: traefik_routers
      failed_when: false
      tags: [validation, security, traefik]

    - name: "Validate Traefik routers with configuration details"
      ansible.builtin.fail:
        msg: |
          Traefik has no configured routers:

          Status: {{ traefik_routers.status | default('Unknown') }}
          Response: {{ traefik_routers.json | default('No response') }}

          Please check:
          - Traefik is properly configured
          - Services are registered with Traefik
          - Labels and annotations are correct
          - Traefik configuration files are valid
      when: traefik_routers.status == 200 and traefik_routers.json | length == 0
      tags: [validation, security, traefik, failure]

    - name: "Check Authentik configuration with user interface validation"
      ansible.builtin.uri:
        url: "http://{{ ansible_default_ipv4.address | default('127.0.0.1') }}:{{ authentik_port | default(9000) }}/if/user/"
        method: GET
        status_code: [200, 302, 401, 403]
        timeout: "{{ authentik_timeout | default(30) }}"
        retries: "{{ authentik_retries | default(2) }}"
        delay: "{{ authentik_delay | default(5) }}"
        headers:
          User-Agent: "Ansible-Homelab-Validation/2.1.0"
      register: authentik_validation
      failed_when: false
      tags: [validation, security, authentik]

    - name: "Report Authentik validation failures with security details"
      ansible.builtin.fail:
        msg: |
          Authentik validation failed with security issues:

          Status: {{ authentik_validation.status | default('Unknown') }}
          Error: {{ authentik_validation.msg | default('Unknown error') }}

          Please check:
          - Authentik service is running
          - Database connection is working
          - Initial setup is complete
          - Security configuration is correct
      when: authentik_validation is failed
      tags: [validation, security, authentik, failure]

    - name: "Check UFW firewall status with security validation"
      community.general.ufw:
        state: enabled
      check_mode: true
      register: firewall_status
      changed_when: false
      tags: [validation, security, firewall]

    - name: "Validate firewall status with security details"
      ansible.builtin.fail:
        msg: |
          Firewall is not active:

          Status: {{ firewall_status.status | default('Unknown') }}
          Rules: {{ firewall_status.rules | default('No rules') }}

          Please check:
          - UFW is properly configured
          - Firewall rules are applied
          - Network security is enforced
          - Required ports are allowed
      when: firewall_status.changed | default(true)
      tags: [validation, security, firewall, failure]

  when: "'traefik' in enabled_services and 'authentik' in enabled_services and not (firewall.centralized | default(false))"
  tags: [validation, security, production]

# COMMENT: Production backup configuration validation with security
- name: "Validate production backup configuration with security"
  block:
    - name: "Check backup directories with security validation"
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0750'
        owner: "{{ backup_user | default(ansible_user) }}"
        group: "{{ backup_group | default(ansible_user) }}"
      loop:
        - "{{ backup_dir | default('/var/backups/ansible-homelab') }}"
        - "{{ backup_dir | default('/var/backups/ansible-homelab') }}/databases"
        - "{{ backup_dir | default('/var/backups/ansible-homelab') }}/configs"
        - "{{ backup_dir | default('/var/backups/ansible-homelab') }}/media"
      tags: [validation, backup, security]

    - name: "Test backup script permissions with security validation"
      ansible.builtin.shell: "test -x {{ docker_dir }}/backup/backup.sh"
      register: backup_script_test
      changed_when: false
      tags: [validation, backup, security]

    - name: "Report backup script validation failures with security details"
      ansible.builtin.fail:
        msg: |
          Backup script is not executable:

          Path: {{ docker_dir }}/backup/backup.sh
          Return Code: {{ backup_script_test.rc }}

          Please check:
          - Backup script exists and is executable
          - Script permissions are correct
          - Script ownership is secure
          - Backup directory structure is valid
      when: backup_script_test.rc != 0
      tags: [validation, backup, security, failure]

    - name: "Test backup script execution with security validation"
      ansible.builtin.shell: "{{ docker_dir }}/backup/backup.sh --test --validate"
      register: backup_test
      changed_when: false
      failed_when: false
      tags: [validation, backup, security]

    - name: "Report backup test failures with security details"
      ansible.builtin.fail:
        msg: |
          Backup test failed with security issues:

          Error: {{ backup_test.stderr | default('Unknown error') }}
          Return Code: {{ backup_test.rc }}

          Please check:
          - Backup script configuration
          - Required permissions and access
          - Backup destination availability
          - Encryption and security settings
      when: backup_test.rc != 0
      tags: [validation, backup, security, failure]

  when: backup_enabled | default(false)
  tags: [validation, backup, security, production]

# COMMENT: Production validation report generation with comprehensive details
- name: "Generate production validation report with security details"
  block:
    - name: "Create comprehensive validation summary with security metrics"
      ansible.builtin.set_fact:
        validation_summary:
          timestamp: "{{ ansible_date_time.iso8601 }}"
          host: "{{ ansible_hostname }}"
          environment: "{{ deployment_environment | default('production') }}"
          services_checked: "{{ enabled_services | default([]) | length }}"
          compose_validation: "{{ compose_validation.results | selectattr('rc', 'equalto', 0) | list | length }}/{{ compose_validation.results | length }}"
          port_validation: "{{ port_validation.results | selectattr('rc', 'equalto', 0) | list | length }}/{{ port_validation.results | length }}"
          endpoint_validation: "{{ endpoint_validation.results | selectattr('status', 'equalto', 200) | list | length }}/{{ endpoint_validation.results | length }}"
          database_validation: "{{ 'PASS' if (postgres_validation.rc == 0 and redis_validation.rc == 0) else 'FAIL' }}"
          monitoring_validation: "{{ 'PASS' if (prometheus_targets.status == 200 and grafana_datasources.status == 200) else 'FAIL' }}"
          security_validation: "{{ 'PASS' if (traefik_routers.status == 200 and authentik_validation.status in [200, 302]) else 'FAIL' }}"
          backup_validation: "{{ 'PASS' if backup_test.rc == 0 else 'FAIL' }}"
          security_score: "{{ ((compose_validation.results | selectattr('rc', 'equalto', 0) | list | length + port_validation.results | selectattr('rc', 'equalto', 0) | list | length + endpoint_validation.results | selectattr('status', 'equalto', 200) | list | length) / (compose_validation.results | length + port_validation.results | length + endpoint_validation.results | length) * 100) | round(1) }}"

    - name: "Display comprehensive validation summary with security metrics"
      ansible.builtin.debug:
        msg: |
          ========================================
          PRODUCTION SERVICE VALIDATION SUMMARY
          ========================================

          Timestamp: {{ validation_summary.timestamp }}
          Host: {{ validation_summary.host }}
          Environment: {{ validation_summary.environment }}
          Services Checked: {{ validation_summary.services_checked }}

          Configuration Validation:
          - Docker Compose: {{ validation_summary.compose_validation }}
          - Port Connectivity: {{ validation_summary.port_validation }}
          - Endpoint Health: {{ validation_summary.endpoint_validation }}

          Service Validation:
          - Database: {{ validation_summary.database_validation }}
          - Monitoring: {{ validation_summary.monitoring_validation }}
          - Security: {{ validation_summary.security_validation }}
          - Backup: {{ validation_summary.backup_validation }}

          Security Metrics:
          - Overall Security Score: {{ validation_summary.security_score }}%
          - Validation Status: {{ 'PASS' if validation_summary.security_score >= 90 else 'WARNING' if validation_summary.security_score >= 75 else 'FAIL' }}

          ========================================
      tags: [validation, summary, security, production]

    - name: "Save comprehensive validation report with security details"
      ansible.builtin.template:
        src: templates/validation_report.yml.j2
        dest: "{{ logs_dir | default('/var/log/ansible-homelab') }}/validation_report_{{ ansible_date_time.epoch }}.yml"
        mode: '0640'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        backup: yes
      tags: [validation, report, security, production]

  tags: [validation, summary, security, production]
