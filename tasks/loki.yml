---
# Loki Configuration
# Production-ready log aggregation system

- name: Create Loki directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0755"
  loop:
    - "{{ docker_dir }}/monitoring/loki/config"
    - "{{ docker_dir }}/monitoring/loki/scripts"
    - "{{ logs_dir }}/monitoring/loki"

- name: Create Loki configuration
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/monitoring/loki/config/loki.yml"
    content: |
      auth_enabled: false
      
      server:
        http_listen_port: 3100
        grpc_listen_port: 9096
      
      common:
        path_prefix: /loki
        storage:
          filesystem:
            chunks_directory: /loki/chunks
            rules_directory: /loki/rules
        replication_factor: 1
        ring:
          kvstore:
            store: inmemory
      
      schema_config:
        configs:
          - from: 2020-10-24
            store: boltdb-shipper
            object_store: filesystem
            schema: v11
            index:
              prefix: index_
              period: 24h
      
      storage_config:
        boltdb_shipper:
          active_index_directory: /loki/boltdb-shipper-active
          cache_location: /loki/boltdb-shipper-cache
          cache_ttl: 24h
          shared_store: filesystem
        filesystem:
          directory: /loki/chunks
      
      limits_config:
        enforce_metric_name: false
        reject_old_samples: true
        reject_old_samples_max_age: 168h
        ingestion_rate_mb: 4
        ingestion_burst_size_mb: 6
        max_global_streams_per_user: 0
        max_line_size: 0
      
      chunk_store_config:
        max_look_back_period: 0s
      
      table_manager:
        retention_deletes_enabled: false
        retention_period: 0s
      
      query_range:
        results_cache:
          cache:
            enable_fifocache: true
            fifocache:
              max_size_bytes: 512MB
              validity: 24h
      
      ruler:
        alertmanager_url: http://alertmanager:9093
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0640"

- name: Create Loki management script
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/monitoring/loki/scripts/manage.sh"
    content: |
      #!/bin/bash
      
      # Loki Management Script
      
      function show_help {
        echo "Loki Management Script"
        echo "Usage: $0 [command]"
        echo ""
        echo "Commands:"
        echo "  status    - Show Loki status"
        echo "  logs      - Show Loki logs"
        echo "  restart   - Restart Loki"
        echo "  backup    - Backup data"
        echo "  restore   - Restore data"
        echo "  help      - Show this help"
      }
      
      case "$1" in
        status)
          curl -s http://localhost:3100/ready
          ;;
        logs)
          docker logs loki --tail 100 -f
          ;;
        restart)
          docker restart loki
          ;;
        backup)
          BACKUP_DIR="{{ backup_dir }}/loki"
          mkdir -p "$BACKUP_DIR"
          BACKUP_FILE="$BACKUP_DIR/loki_$(date +%Y%m%d_%H%M%S).tar.gz"
          tar -czf "$BACKUP_FILE" -C "{{ docker_dir }}/monitoring/loki" .
          echo "Backup created: $BACKUP_FILE"
          ;;
        restore)
          if [ -z "$2" ]; then
            echo "Please specify backup file"
            exit 1
          fi
          tar -xzf "$2" -C "{{ docker_dir }}/monitoring/loki"
          docker restart loki
          ;;
        help|*)
          show_help
          ;;
      esac
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0750"

- name: Create Loki health check script
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/monitoring/loki/scripts/healthcheck.sh"
    content: |
      #!/bin/bash
      
      # Check if Loki is responding
      if ! curl -s http://localhost:3100/ready > /dev/null; then
        echo "Loki is not responding"
        exit 1
      fi
      
      # Check if we can query logs
      if ! curl -s "http://localhost:3100/loki/api/v1/query?query={}" > /dev/null; then
        echo "Loki query API is not responding"
        exit 1
      fi
      
      exit 0
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0750"

- name: Create Loki log rotation configuration
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/monitoring/loki/config/logrotate.conf"
    content: |
      {{ logs_dir }}/monitoring/loki/*.log {
        daily
        rotate 7
        compress
        delaycompress
        missingok
        notifempty
        create 0640 {{ username }} {{ username }}
      }
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0640"

- name: Add Loki log rotation to crontab
  ansible.builtin.cron:
    name: "Rotate Loki logs"
    job: "logrotate {{ docker_dir }}/monitoring/loki/config/logrotate.conf"
    hour: "0"
    minute: "0"
    user: "{{ username }}" 