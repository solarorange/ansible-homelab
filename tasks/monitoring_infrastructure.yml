---
# Monitoring Infrastructure Setup
# Foundation for comprehensive homelab monitoring with TIG + Prometheus stack
#
# This playbook sets up a complete monitoring infrastructure with:
# - TIG Stack (Telegraf, InfluxDB, Grafana) for metrics collection and visualization
# - Prometheus ecosystem for metrics storage and alerting
# - Loki + Promtail for log aggregation
# - Blackbox exporter for external monitoring
# - Node exporter for system metrics
# - cAdvisor for container metrics
#
# Architecture:
# 1. Metrics Collection:
#    - Telegraf: Collects metrics from various sources
#    - Node Exporter: System-level metrics
#    - cAdvisor: Container metrics
#    - Blackbox: External endpoint monitoring
#
# 2. Metrics Storage:
#    - InfluxDB: Time-series database for Telegraf metrics
#    - Prometheus: Time-series database for system metrics
#
# 3. Log Management:
#    - Loki: Log aggregation system
#    - Promtail: Log collection agent
#
# 4. Visualization & Alerting:
#    - Grafana: Metrics and logs visualization
#    - Alertmanager: Alert routing and notification
#
# Prerequisites:
# - Docker and Docker Compose installed
# - Traefik reverse proxy configured
# - Authentik authentication system (for SSO)
# - Sufficient storage for metrics and logs
# - Network connectivity between components

- name: Create monitoring directory structure
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0755"
  loop:
    - "{{ docker_dir }}/monitoring"
    - "{{ docker_dir }}/monitoring/prometheus"
    - "{{ docker_dir }}/monitoring/grafana"
    - "{{ docker_dir }}/monitoring/influxdb"
    - "{{ docker_dir }}/monitoring/telegraf"
    - "{{ docker_dir }}/monitoring/loki"
    - "{{ docker_dir }}/monitoring/promtail"
    - "{{ docker_dir }}/monitoring/alertmanager"
    - "{{ docker_dir }}/monitoring/blackbox"
    - "{{ docker_dir }}/monitoring/node-exporter"
    - "{{ docker_dir }}/monitoring/cadvisor"
    - "{{ config_dir }}/monitoring"
    - "{{ logs_dir }}/monitoring"
  # Creates the necessary directory structure for all monitoring components
  # Each component has its own directory for configuration and data persistence

- name: Create monitoring Docker Compose file
  ansible.builtin.copy:
    content: |
      version: '3.8'
      
      # Enhanced Monitoring Stack for Homelab
      # TIG Stack (Telegraf, InfluxDB, Grafana) + Prometheus ecosystem
      #
      # Network Configuration:
      # - monitoring: Internal network for monitoring components
      # - homelab: External network for Traefik integration
      
      networks:
        monitoring:
          name: monitoring
          external: true
        homelab:
          name: homelab
          external: true
      
      # Persistent Volumes:
      # - prometheus_data: Prometheus metrics storage
      # - grafana_data: Grafana dashboards and settings
      # - influxdb_data: InfluxDB time-series data
      # - loki_data: Loki log storage
      # - alertmanager_data: Alertmanager configuration
      
      volumes:
        prometheus_data:
          name: prometheus_data
        grafana_data:
          name: grafana_data
        influxdb_data:
          name: influxdb_data
        loki_data:
          name: loki_data
        alertmanager_data:
          name: alertmanager_data
      
      # Common Variables:
      # - TZ: Timezone for all containers
      # - PUID/PGID: User/Group IDs for file permissions
      
      x-common-variables: &common-variables
        TZ: ${TZ}
        PUID: ${PUID}
        PGID: ${PGID}
      
      # Restart Policy:
      # - unless-stopped: Restart containers unless explicitly stopped
      
      x-restart-policy: &restart-policy
        restart: unless-stopped
      
      # Logging Configuration:
      # - json-file driver with rotation
      # - 10MB max size per file
      # - Keep 3 rotated files
      
      x-logging: &logging
        logging:
          driver: "json-file"
          options:
            max-size: "10m"
            max-file: "3"
      
      services:
        # InfluxDB - Time Series Database
        # Purpose: Stores metrics collected by Telegraf
        # Features:
        # - High-performance time-series database
        # - Built-in data retention policies
        # - HTTP API for querying data
        # - Web UI for data exploration
        influxdb:
          image: influxdb:2.7-alpine
          container_name: influxdb
          <<: *restart-policy
          <<: *logging
          environment:
            <<: *common-variables
            DOCKER_INFLUXDB_INIT_MODE: setup
            DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_ADMIN_USER}
            DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_ADMIN_PASSWORD}
            DOCKER_INFLUXDB_INIT_ORG: ${INFLUXDB_ORG}
            DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUXDB_BUCKET}
            DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_TOKEN}
          volumes:
            - influxdb_data:/var/lib/influxdb2
            - ${DOCKER_DIR}/monitoring/influxdb/config:/etc/influxdb2
          networks:
            - monitoring
            - homelab
          labels:
            - "traefik.enable=true"
            - "traefik.docker.network=homelab"
            - "traefik.http.routers.influxdb.rule=Host(\`influxdb.${DOMAIN}\`)"
            - "traefik.http.routers.influxdb.entrypoints=https"
            - "traefik.http.routers.influxdb.tls=true"
            - "traefik.http.services.influxdb.loadbalancer.server.port=8086"
            - "traefik.http.routers.influxdb.middlewares=authentik@docker"
          healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 60s

        # Telegraf - Metrics Collection Agent
        # Purpose: Collects metrics from various sources
        # Features:
        # - Plugin-based architecture
        # - Support for multiple output formats
        # - Low resource usage
        # - Real-time data collection
        telegraf:
          image: telegraf:1.28-alpine
          container_name: telegraf
          <<: *restart-policy
          <<: *logging
          environment:
            <<: *common-variables
            HOST_ETC: /hostfs/etc
            HOST_PROC: /hostfs/proc
            HOST_SYS: /hostfs/sys
            HOST_VAR: /hostfs/var
            HOST_RUN: /hostfs/run
            HOST_MOUNT_PREFIX: /hostfs
          volumes:
            - ${DOCKER_DIR}/monitoring/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - /sys:/hostfs/sys:ro
            - /proc:/hostfs/proc:ro
            - /etc:/hostfs/etc:ro
            - /var:/hostfs/var:ro
            - /run:/hostfs/run:ro
          networks:
            - monitoring
          depends_on:
            - influxdb

        # Prometheus - Metrics Database
        # Purpose: Stores and queries time-series metrics
        # Features:
        # - Powerful query language (PromQL)
        # - Efficient time-series storage
        # - Built-in alerting
        # - Service discovery
        prometheus:
          image: prom/prometheus:v2.47.2
          container_name: prometheus
          <<: *restart-policy
          <<: *logging
          environment:
            <<: *common-variables
          command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--storage.tsdb.retention.time=90d'
            - '--storage.tsdb.retention.size=10GB'
            - '--web.console.libraries=/etc/prometheus/console_libraries'
            - '--web.console.templates=/etc/prometheus/consoles'
            - '--web.enable-lifecycle'
            - '--web.enable-admin-api'
            - '--log.level=info'
          volumes:
            - prometheus_data:/prometheus
            - ${DOCKER_DIR}/monitoring/prometheus:/etc/prometheus
          networks:
            - monitoring
            - homelab
          labels:
            - "traefik.enable=true"
            - "traefik.docker.network=homelab"
            - "traefik.http.routers.prometheus.rule=Host(\`prometheus.${DOMAIN}\`)"
            - "traefik.http.routers.prometheus.entrypoints=https"
            - "traefik.http.routers.prometheus.tls=true"
            - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
            - "traefik.http.routers.prometheus.middlewares=authentik@docker"
          healthcheck:
            test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
            interval: 30s
            timeout: 10s
            retries: 3

        # Grafana - Visualization Platform
        # Purpose: Visualize metrics and logs
        # Features:
        # - Rich dashboard capabilities
        # - Multiple data source support
        # - Alert management
        # - User management
        # - Plugin system
        grafana:
          image: grafana/grafana-oss:10.2.0
          container_name: grafana
          <<: *restart-policy
          <<: *logging
          environment:
            <<: *common-variables
            GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
            GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
            GF_SECURITY_SECRET_KEY: ${GRAFANA_SECRET_KEY}
            GF_USERS_ALLOW_SIGN_UP: false
            GF_USERS_ALLOW_ORG_CREATE: false
            GF_USERS_AUTO_ASSIGN_ORG: true
            GF_USERS_AUTO_ASSIGN_ORG_ROLE: Viewer
            GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel,grafana-piechart-panel
            GF_SERVER_DOMAIN: grafana.${DOMAIN}
            GF_SERVER_ROOT_URL: https://grafana.${DOMAIN}
            GF_DATABASE_TYPE: sqlite3
            GF_SESSION_PROVIDER: file
            GF_LOG_MODE: console
            GF_LOG_LEVEL: info
            GF_ANALYTICS_REPORTING_ENABLED: false
            GF_ANALYTICS_CHECK_FOR_UPDATES: false
            GF_SECURITY_DISABLE_GRAVATAR: true
            GF_SNAPSHOTS_EXTERNAL_ENABLED: false
          volumes:
            - grafana_data:/var/lib/grafana
            - ${DOCKER_DIR}/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
            - ${DOCKER_DIR}/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
            - ${DOCKER_DIR}/monitoring/grafana/plugins:/var/lib/grafana/plugins
          networks:
            - monitoring
            - homelab
          depends_on:
            - prometheus
            - influxdb
          labels:
            - "traefik.enable=true"
            - "traefik.docker.network=homelab"
            - "traefik.http.routers.grafana.rule=Host(\`grafana.${DOMAIN}\`)"
            - "traefik.http.routers.grafana.entrypoints=https"
            - "traefik.http.routers.grafana.tls=true"
            - "traefik.http.services.grafana.loadbalancer.server.port=3000"
            - "traefik.http.routers.grafana.middlewares=authentik@docker"
          healthcheck:
            test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
            interval: 30s
            timeout: 10s
            retries: 3

        # Loki - Log Aggregation
        # Purpose: Centralized log storage and querying
        # Features:
        # - Efficient log storage
        # - LogQL query language
        # - Label-based indexing
        # - Multi-tenant support
        loki:
          image: grafana/loki:2.9.2
          container_name: loki
          <<: *restart-policy
          <<: *logging
          environment:
            <<: *common-variables
          command: -config.file=/etc/loki/local-config.yaml
          volumes:
            - loki_data:/loki
            - ${DOCKER_DIR}/monitoring/loki:/etc/loki
          networks:
            - monitoring
            - homelab
          labels:
            - "traefik.enable=true"
            - "traefik.docker.network=homelab"
            - "traefik.http.routers.loki.rule=Host(\`loki.${DOMAIN}\`)"
            - "traefik.http.routers.loki.entrypoints=https"
            - "traefik.http.routers.loki.tls=true"
            - "traefik.http.services.loki.loadbalancer.server.port=3100"
            - "traefik.http.routers.loki.middlewares=authentik@docker"

        # Promtail - Log Collection Agent
        # Purpose: Collects and forwards logs to Loki
        # Features:
        # - File-based log collection
        # - Label-based log processing
        # - Service discovery
        # - Log parsing and transformation
        promtail:
          image: grafana/promtail:2.9.2
          container_name: promtail
          <<: *restart-policy
          <<: *logging
          environment:
            <<: *common-variables
          command: -config.file=/etc/promtail/config.yml
          volumes:
            - ${DOCKER_DIR}/monitoring/promtail:/etc/promtail
            - /var/log:/var/log:ro
            - /var/lib/docker/containers:/var/lib/docker/containers:ro
          networks:
            - monitoring
          depends_on:
            - loki

        # Alertmanager - Alert Routing
        # Purpose: Handles alerts from Prometheus
        # Features:
        # - Alert routing and grouping
        # - Multiple notification channels
        # - Alert silencing
        # - Alert inhibition
        alertmanager:
          image: prom/alertmanager:v0.26.0
          container_name: alertmanager
          <<: *restart-policy
          <<: *logging
          environment:
            <<: *common-variables
          command:
            - '--config.file=/etc/alertmanager/alertmanager.yml'
            - '--storage.path=/alertmanager'
            - '--data.retention=120h'
          volumes:
            - alertmanager_data:/alertmanager
            - ${DOCKER_DIR}/monitoring/alertmanager:/etc/alertmanager
          networks:
            - monitoring
            - homelab
          labels:
            - "traefik.enable=true"
            - "traefik.docker.network=homelab"
            - "traefik.http.routers.alertmanager.rule=Host(\`alertmanager.${DOMAIN}\`)"
            - "traefik.http.routers.alertmanager.entrypoints=https"
            - "traefik.http.routers.alertmanager.tls=true"
            - "traefik.http.services.alertmanager.loadbalancer.server.port=9093"
            - "traefik.http.routers.alertmanager.middlewares=authentik@docker"

        # Blackbox Exporter - External Monitoring
        # Purpose: Probes endpoints over HTTP, HTTPS, DNS, TCP, ICMP
        # Features:
        # - Multiple probe types
        # - Configurable timeouts
        # - SSL certificate validation
        # - DNS resolution checks
        blackbox:
          image: prom/blackbox-exporter:v0.24.0
          container_name: blackbox
          <<: *restart-policy
          <<: *logging
          environment:
            <<: *common-variables
          command:
            - '--config.file=/etc/blackbox_exporter/blackbox.yml'
          volumes:
            - ${DOCKER_DIR}/monitoring/blackbox:/etc/blackbox_exporter
          networks:
            - monitoring
            - homelab
          labels:
            - "traefik.enable=true"
            - "traefik.docker.network=homelab"
            - "traefik.http.routers.blackbox.rule=Host(\`blackbox.${DOMAIN}\`)"
            - "traefik.http.routers.blackbox.entrypoints=https"
            - "traefik.http.routers.blackbox.tls=true"
            - "traefik.http.services.blackbox.loadbalancer.server.port=9115"
            - "traefik.http.routers.blackbox.middlewares=authentik@docker"

        # Node Exporter - System Metrics
        # Purpose: Exports hardware and OS metrics
        # Features:
        # - CPU, memory, disk metrics
        # - Network statistics
        # - File system metrics
        # - System load information
        node-exporter:
          image: prom/node-exporter:v1.7.0
          container_name: node-exporter
          <<: *restart-policy
          <<: *logging
          environment:
            <<: *common-variables
          command:
            - '--path.procfs=/host/proc'
            - '--path.sysfs=/host/sys'
            - '--path.rootfs=/host/root'
            - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
          volumes:
            - /proc:/host/proc:ro
            - /sys:/host/sys:ro
            - /:/host/root:ro
          networks:
            - monitoring
          labels:
            - "prometheus.io/scrape=true"
            - "prometheus.io/port=9100"

        # cAdvisor - Container Metrics
        # Purpose: Exports container and host metrics
        # Features:
        # - Container resource usage
        # - Container network statistics
        # - Container filesystem usage
        # - Host machine metrics
        cadvisor:
          image: gcr.io/cadvisor/cadvisor:v0.47.0
          container_name: cadvisor
          <<: *restart-policy
          <<: *logging
          environment:
            <<: *common-variables
          volumes:
            - /:/rootfs:ro
            - /var/run:/var/run:ro
            - /sys:/sys:ro
            - /var/lib/docker/:/var/lib/docker:ro
            - /dev/disk/:/dev/disk:ro
          networks:
            - monitoring
          labels:
            - "prometheus.io/scrape=true"
            - "prometheus.io/port=8080"
    dest: "{{ docker_dir }}/monitoring/docker-compose.yml"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0644"
  # Creates the Docker Compose file for the monitoring stack
  # Includes all necessary services with their configurations
  # Sets up networking, volumes, and environment variables

- name: Create monitoring environment file
  ansible.builtin.copy:
    content: |
      # Monitoring Stack Environment Variables
      # Generated by Ansible - DO NOT EDIT MANUALLY
      
      # Common Variables
      TZ={{ timezone | default('UTC') }}
      PUID={{ ansible_uid }}
      PGID={{ ansible_gid }}
      
      # InfluxDB Configuration
      INFLUXDB_ADMIN_USER={{ vault_influxdb_admin_user }}
      INFLUXDB_ADMIN_PASSWORD={{ vault_influxdb_admin_password }}
      INFLUXDB_ORG={{ influxdb_org | default('homelab') }}
      INFLUXDB_BUCKET={{ influxdb_bucket | default('metrics') }}
      INFLUXDB_TOKEN={{ vault_influxdb_token }}
      
      # Grafana Configuration
      GRAFANA_ADMIN_USER={{ vault_grafana_admin_user }}
      GRAFANA_ADMIN_PASSWORD={{ vault_grafana_admin_password }}
      GRAFANA_SECRET_KEY={{ vault_grafana_secret_key }}
      
      # Domain Configuration
      DOMAIN={{ domain }}
    dest: "{{ docker_dir }}/monitoring/.env"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0600"
  # Creates the environment file with necessary variables
  # Includes default values for required parameters
  # Sets secure file permissions

- name: Start monitoring stack
  community.docker.docker_compose:
    project_src: "{{ docker_dir }}/monitoring"
    state: present
  # Starts the monitoring stack using Docker Compose
  # Ensures all services are running with proper configuration