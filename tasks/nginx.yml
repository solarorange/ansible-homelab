---
# Nginx Configuration
# Production-ready web server and reverse proxy

- name: Create Nginx directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0755"
  loop:
    - "{{ docker_dir }}/nginx/config"
    - "{{ docker_dir }}/nginx/ssl"
    - "{{ docker_dir }}/nginx/scripts"
    - "{{ docker_dir }}/nginx/cache"
    - "{{ logs_dir }}/nginx"

- name: Create Nginx main configuration
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/nginx/config/nginx.conf"
    content: |
      user nginx;
      worker_processes auto;
      error_log /var/log/nginx/error.log warn;
      pid /var/run/nginx.pid;
      
      events {
          worker_connections 1024;
          multi_accept on;
          use epoll;
      }
      
      http {
          include /etc/nginx/mime.types;
          default_type application/octet-stream;
          
          # Logging
          log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                         '$status $body_bytes_sent "$http_referer" '
                         '"$http_user_agent" "$http_x_forwarded_for"';
          
          access_log /var/log/nginx/access.log main;
          
          # Basic Settings
          sendfile on;
          tcp_nopush on;
          tcp_nodelay on;
          keepalive_timeout 65;
          types_hash_max_size 2048;
          server_tokens off;
          
          # SSL Settings
          ssl_protocols TLSv1.2 TLSv1.3;
          ssl_prefer_server_ciphers on;
          ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
          ssl_session_cache shared:SSL:10m;
          ssl_session_timeout 10m;
          ssl_session_tickets off;
          ssl_stapling on;
          ssl_stapling_verify on;
          
          # Gzip Settings
          gzip on;
          gzip_vary on;
          gzip_proxied any;
          gzip_comp_level 6;
          gzip_types text/plain text/css text/xml application/json application/javascript application/xml+rss application/atom+xml image/svg+xml;
          
          # Cache Settings
          proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=STATIC:10m inactive=7d use_temp_path=off;
          
          # Security Headers
          add_header X-Frame-Options "SAMEORIGIN" always;
          add_header X-XSS-Protection "1; mode=block" always;
          add_header X-Content-Type-Options "nosniff" always;
          add_header Referrer-Policy "no-referrer-when-downgrade" always;
          add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
          add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
          
          # Include virtual host configs
          include /etc/nginx/conf.d/*.conf;
      }
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0640"

- name: Create Nginx default virtual host
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/nginx/config/conf.d/default.conf"
    content: |
      server {
          listen 80;
          server_name _;
          
          # Redirect all HTTP traffic to HTTPS
          return 301 https://$host$request_uri;
      }
      
      server {
          listen 443 ssl http2;
          server_name _;
          
          # SSL Configuration
          ssl_certificate /etc/nginx/ssl/nginx.crt;
          ssl_certificate_key /etc/nginx/ssl/nginx.key;
          
          # Root directory and index file
          root /usr/share/nginx/html;
          index index.html;
          
          # Logging
          access_log /var/log/nginx/default.access.log main;
          error_log /var/log/nginx/default.error.log warn;
          
          # Security
          location ~ /\. {
              deny all;
          }
          
          # Static files
          location / {
              try_files $uri $uri/ =404;
              expires 30d;
              add_header Cache-Control "public, no-transform";
          }
          
          # Error pages
          error_page 404 /404.html;
          error_page 500 502 503 504 /50x.html;
      }
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0640"

- name: Create Nginx management script
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/nginx/scripts/manage.sh"
    content: |
      #!/bin/bash
      
      # Nginx Management Script
      
      function show_help {
        echo "Nginx Management Script"
        echo "Usage: $0 [command]"
        echo ""
        echo "Commands:"
        echo "  status    - Show Nginx status"
        echo "  logs      - Show Nginx logs"
        echo "  restart   - Restart Nginx"
        echo "  reload    - Reload Nginx configuration"
        echo "  test      - Test Nginx configuration"
        echo "  help      - Show this help"
      }
      
      case "$1" in
        status)
          docker exec nginx nginx -t
          docker ps -f name=nginx
          ;;
        logs)
          docker logs nginx --tail 100 -f
          ;;
        restart)
          docker restart nginx
          ;;
        reload)
          docker exec nginx nginx -s reload
          ;;
        test)
          docker exec nginx nginx -t
          ;;
        help|*)
          show_help
          ;;
      esac
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0750"

- name: Create Nginx health check script
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/nginx/scripts/healthcheck.sh"
    content: |
      #!/bin/bash
      
      # Check if Nginx is running
      if ! docker ps -f name=nginx -f status=running | grep -q nginx; then
        echo "Nginx is not running"
        exit 1
      fi
      
      # Check if Nginx is responding
      if ! curl -s -f http://{{ ansible_default_ipv4.address }}:80 > /dev/null; then
        echo "Nginx is not responding"
        exit 1
      fi
      
      exit 0
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0750"

- name: Create Nginx log rotation configuration
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/nginx/config/logrotate.conf"
    content: |
      {{ logs_dir }}/nginx/*.log {
        daily
        rotate 7
        compress
        delaycompress
        missingok
        notifempty
        create 0640 {{ username }} {{ username }}
      }
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0640"

- name: Add Nginx log rotation to crontab
  ansible.builtin.cron:
    name: "Rotate Nginx logs"
    job: "logrotate {{ docker_dir }}/nginx/config/logrotate.conf"
    hour: "0"
    minute: "0"
    user: "{{ vault_service_user }}" 