---
# Advanced Pre-flight Validation
# Comprehensive system checks before deployment

- name: Gather system facts for validation
  ansible.builtin.setup:
    gather_subset:
      - hardware
      - network
      - distribution
      - system
  tags: [validation, always]

- name: Validate Ansible version
  ansible.builtin.assert:
    that:
      - ansible_version.full is version('2.9.0', '>=')
    fail_msg: "Ansible version {{ ansible_version.full }} is not supported. Minimum required: 2.9.0"
  tags: [validation, always]

#==============================================================================
# SYSTEM REQUIREMENTS VALIDATION
#==============================================================================

- name: Check system architecture
  ansible.builtin.assert:
    that:
      - ansible_architecture in ['x86_64', 'amd64', 'aarch64']
    fail_msg: "Unsupported architecture: {{ ansible_architecture }}"
  tags: [validation, system]

- name: Check operating system
  ansible.builtin.assert:
    that:
      - ansible_os_family in ['Debian', 'Ubuntu']
    fail_msg: "Unsupported operating system: {{ ansible_os_family }}"
  tags: [validation, system]

- name: Check available disk space
  ansible.builtin.shell: "df -BG {{ docker_root }} | tail -1 | awk '{print $4}' | sed 's/G//'"
  register: available_disk_gb
  changed_when: false
  tags: [validation, system]

- name: Validate minimum disk space
  ansible.builtin.assert:
    that:
      - available_disk_gb.stdout | int >= 50
    fail_msg: "Insufficient disk space. Available: {{ available_disk_gb.stdout }}GB, Required: 50GB"
  tags: [validation, system]

- name: Check available memory
  ansible.builtin.shell: "free -g | grep Mem | awk '{print $2}'"
  register: total_memory_gb
  changed_when: false
  tags: [validation, system]

- name: Validate minimum memory
  ansible.builtin.assert:
    that:
      - total_memory_gb.stdout | int >= 4
    fail_msg: "Insufficient memory. Available: {{ total_memory_gb.stdout }}GB, Required: 4GB"
  tags: [validation, system]

- name: Check CPU cores
  ansible.builtin.shell: "nproc"
  register: cpu_cores
  changed_when: false
  tags: [validation, system]

- name: Validate minimum CPU cores
  ansible.builtin.assert:
    that:
      - cpu_cores.stdout | int >= 2
    fail_msg: "Insufficient CPU cores. Available: {{ cpu_cores.stdout }}, Required: 2"
  tags: [validation, system]

#==============================================================================
# NETWORK CONNECTIVITY VALIDATION
#==============================================================================

- name: Check network connectivity
  ansible.builtin.wait_for:
    host: "8.8.8.8"
    port: 53
    timeout: 10
  tags: [validation, network]

- name: Check DNS resolution
  ansible.builtin.shell: "nslookup google.com"
  register: dns_check
  changed_when: false
  tags: [validation, network]

- name: Validate DNS resolution
  ansible.builtin.assert:
    that:
      - dns_check.rc == 0
    fail_msg: "DNS resolution failed"
  tags: [validation, network]

- name: Check network bandwidth
  ansible.builtin.shell: "curl -s -w '%{speed_download}' -o /dev/null https://speed.cloudflare.com/__down"
  register: bandwidth_test
  changed_when: false
  tags: [validation, network]

- name: Validate minimum network bandwidth
  ansible.builtin.assert:
    that:
      - bandwidth_test.stdout | float >= 1000000  # 1MB/s minimum
    fail_msg: "Network bandwidth too slow. Speed: {{ bandwidth_test.stdout }} bytes/s"
  tags: [validation, network]

#==============================================================================
# DOCKER VALIDATION
#==============================================================================

- name: Check Docker installation
  ansible.builtin.command: "docker --version"
  register: docker_version
  changed_when: false
  tags: [validation, docker]

- name: Validate Docker version
  ansible.builtin.assert:
    that:
      - docker_version.rc == 0
    fail_msg: "Docker is not installed or not accessible"
  tags: [validation, docker]

- name: Check Docker daemon status
  ansible.builtin.systemd:
    name: docker
    state: started
  tags: [validation, docker]

- name: Check Docker storage driver
  ansible.builtin.shell: "docker info | grep 'Storage Driver' | awk '{print $3}'"
  register: docker_storage_driver
  changed_when: false
  tags: [validation, docker]

- name: Validate Docker storage driver
  ansible.builtin.assert:
    that:
      - docker_storage_driver.stdout in ['overlay2', 'overlay', 'aufs']
    fail_msg: "Unsupported Docker storage driver: {{ docker_storage_driver.stdout }}"
  tags: [validation, docker]

- name: Check Docker available space
  ansible.builtin.shell: "docker system df | grep 'Total Space' | awk '{print $3}' | sed 's/GB//'"
  register: docker_available_space
  changed_when: false
  tags: [validation, docker]

- name: Validate Docker available space
  ansible.builtin.assert:
    that:
      - docker_available_space.stdout | float >= 10
    fail_msg: "Insufficient Docker storage space. Available: {{ docker_available_space.stdout }}GB"
  tags: [validation, docker]

#==============================================================================
# SECURITY VALIDATION
#==============================================================================

- name: Check firewall status
  ansible.builtin.service_facts:
  tags: [validation, security]

- name: Validate firewall is active
  ansible.builtin.assert:
    that:
      - ansible_facts.services['ufw.service'] is defined or
        ansible_facts.services['firewalld.service'] is defined or
        ansible_facts.services['iptables.service'] is defined
    fail_msg: "No firewall service detected"
  tags: [validation, security]

- name: Check SSH configuration
  ansible.builtin.shell: "sshd -T | grep -E 'permitrootlogin|passwordauthentication'"
  register: ssh_config
  changed_when: false
  tags: [validation, security]

- name: Validate SSH security settings
  ansible.builtin.assert:
    that:
      - "'permitrootlogin no' in ssh_config.stdout"
      - "'passwordauthentication no' in ssh_config.stdout"
    fail_msg: "SSH security settings are not properly configured"
  tags: [validation, security]

- name: Check system updates
  ansible.builtin.shell: "apt list --upgradable 2>/dev/null | wc -l"
  register: available_updates
  changed_when: false
  tags: [validation, security]

- name: Warn about available updates
  ansible.builtin.debug:
    msg: "{{ available_updates.stdout | int }} system updates are available. Consider updating before deployment."
  when: available_updates.stdout | int > 0
  tags: [validation, security]

#==============================================================================
# SERVICE DEPENDENCY VALIDATION
#==============================================================================

- name: Check required ports availability
  ansible.builtin.wait_for:
    host: "{{ ansible_default_ipv4.address }}"
    port: "{{ item }}"
    state: stopped
    timeout: 5
  loop:
    - 80
    - 443
    - 8080
    - 9000
    - 5432
    - 6379
  tags: [validation, services]

- name: Check Docker Compose installation
  ansible.builtin.command: "docker-compose --version"
  register: docker_compose_version
  changed_when: false
  tags: [validation, services]

- name: Validate Docker Compose
  ansible.builtin.assert:
    that:
      - docker_compose_version.rc == 0
    fail_msg: "Docker Compose is not installed"
  tags: [validation, services]

#==============================================================================
# ENVIRONMENT VALIDATION
#==============================================================================

- name: Check environment variables
  ansible.builtin.assert:
    that:
      - lookup('env', 'ANSIBLE_ENVIRONMENT') is defined or environment is defined
    fail_msg: "Environment not specified. Set ANSIBLE_ENVIRONMENT or configure environment variable."
  tags: [validation, environment]

- name: Validate environment configuration
  ansible.builtin.assert:
    that:
      - environment in ['development', 'staging', 'production']
    fail_msg: "Invalid environment: {{ environment }}"
  tags: [validation, environment]

#==============================================================================
# RESOURCE CAPABILITY VALIDATION
#==============================================================================

- name: Calculate resource requirements based on enabled roles
  ansible.builtin.set_fact:
    required_memory: "{{ 
      (security_enabled | default(false) | bool) * 512 +
      (databases_enabled | default(false) | bool) * 1024 +
      (storage_enabled | default(false) | bool) * 1024 +
      (media_enabled | default(false) | bool) * 2048 +
      (logging_enabled | default(false) | bool) * 1024 +
      (automation_enabled | default(false) | bool) * 512 +
      (utilities_enabled | default(false) | bool) * 512 +
      (paperless_ngx_enabled | default(false) | bool) * 1024 +
      (fing_enabled | default(false) | bool) * 512
    }}"
  tags: [validation, resources]

- name: Validate system resources against requirements
  ansible.builtin.assert:
    that:
      - total_memory_gb.stdout | int >= (required_memory / 1024)
    fail_msg: "Insufficient memory for selected roles. Required: {{ required_memory }}MB, Available: {{ total_memory_gb.stdout }}GB"
  tags: [validation, resources]

#==============================================================================
# CONDITIONAL EXECUTION VALIDATION
#==============================================================================

- name: Check current time for peak hours validation
  ansible.builtin.shell: "date +%H"
  register: current_hour
  changed_when: false
  tags: [validation, conditional]

- name: Validate peak hours execution
  ansible.builtin.assert:
    that:
      - not (conditional_execution.peak_hours_skip.enabled | default(false) and
             current_hour.stdout | int >= conditional_execution.peak_hours_skip.start_hour and
             current_hour.stdout | int <= conditional_execution.peak_hours_skip.end_hour)
    fail_msg: "Deployment blocked during peak hours ({{ conditional_execution.peak_hours_skip.start_hour }}:00-{{ conditional_execution.peak_hours_skip.end_hour }}:00)"
  tags: [validation, conditional]

#==============================================================================
# FINAL VALIDATION SUMMARY
#==============================================================================

- name: Display validation summary
  ansible.builtin.debug:
    msg: |
      ========================================
      PRE-FLIGHT VALIDATION SUMMARY
      ========================================
      
      System Information:
      - Architecture: {{ ansible_architecture }}
      - OS: {{ ansible_os_name }} {{ ansible_os_version }}
      - CPU Cores: {{ cpu_cores.stdout }}
      - Memory: {{ total_memory_gb.stdout }}GB
      - Disk Space: {{ available_disk_gb.stdout }}GB available
      
      Network:
      - Connectivity: OK
      - DNS Resolution: OK
      - Bandwidth: {{ bandwidth_test.stdout }} bytes/s
      
      Docker:
      - Version: {{ docker_version.stdout }}
      - Storage Driver: {{ docker_storage_driver.stdout }}
      - Available Space: {{ docker_available_space.stdout }}GB
      
      Security:
      - Firewall: Active
      - SSH: Secured
      - Updates: {{ available_updates.stdout }} available
      
      Environment: {{ environment | default('production') }}
      Required Memory: {{ required_memory }}MB
      
      All validations passed successfully!
      ========================================
  tags: [validation, summary] 