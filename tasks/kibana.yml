---
# Kibana Configuration
# Production-ready Elasticsearch visualization

- name: Create Kibana directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0755"
  loop:
    - "{{ docker_dir }}/kibana/config"
    - "{{ docker_dir }}/kibana/data"
    - "{{ docker_dir }}/kibana/scripts"
    - "{{ logs_dir }}/kibana"

- name: Create Kibana configuration
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/kibana/config/kibana.yml"
    content: |
      # Server
      server.name: kibana
      server.host: "0.0.0.0"
      server.port: 5601
      server.basePath: ""
      server.maxPayloadBytes: 1048576
      server.ssl.enabled: true
      server.ssl.certificate: /usr/share/kibana/config/certs/kibana.crt
      server.ssl.key: /usr/share/kibana/config/certs/kibana.key
      
      # Elasticsearch
      elasticsearch.hosts: ["http://elasticsearch:9200"]
      elasticsearch.ssl.enabled: true
      elasticsearch.ssl.certificate: /usr/share/kibana/config/certs/kibana.crt
      elasticsearch.ssl.key: /usr/share/kibana/config/certs/kibana.key
      elasticsearch.ssl.certificateAuthorities: ["/usr/share/kibana/config/certs/ca.crt"]
      elasticsearch.ssl.verificationMode: certificate
      
      # Security
      xpack.security.enabled: true
      xpack.security.encryptionKey: "{{ kibana_encryption_key }}"
      xpack.security.session.idleTimeout: "1h"
      xpack.security.session.lifespan: "24h"
      
      # Monitoring
      xpack.monitoring.enabled: true
      xpack.monitoring.ui.container.elasticsearch.enabled: true
      
      # Reporting
      xpack.reporting.enabled: true
      xpack.reporting.encryptionKey: "{{ kibana_encryption_key }}"
      
      # Canvas
      xpack.canvas.enabled: true
      
      # Maps
      xpack.maps.enabled: true
      
      # Machine Learning
      xpack.ml.enabled: true
      
      # APM
      xpack.apm.enabled: true
      
      # Logging
      logging.root.level: info
      logging.appenders:
        file:
          type: file
          fileName: /usr/share/kibana/logs/kibana.log
          layout:
            type: pattern
      logging.loggers:
        - name: elasticsearch
          level: error
        - name: http
          level: error
        - name: security
          level: info
        - name: audit
          level: info
      
      # Telemetry
      telemetry.enabled: false
      
      # Optimization
      optimize.bundleFilter: "!tests"
      optimize.useBundleCache: true
      optimize.watchPort: 5602
      
      # Paths
      path.data: /usr/share/kibana/data
      path.logs: /usr/share/kibana/logs
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0640"

- name: Create Kibana management script
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/kibana/scripts/manage.sh"
    content: |
      #!/bin/bash
      
      # Kibana Management Script
      
      function show_help {
        echo "Kibana Management Script"
        echo "Usage: $0 [command]"
        echo ""
        echo "Commands:"
        echo "  status    - Show Kibana status"
        echo "  logs      - Show Kibana logs"
        echo "  restart   - Restart Kibana"
        echo "  health    - Show Kibana health"
        echo "  help      - Show this help"
      }
      
      case "$1" in
        status)
          docker ps -f name=kibana
          curl -s -k https://localhost:5601/api/status | jq .
          ;;
        logs)
          docker logs kibana --tail 100 -f
          ;;
        restart)
          docker restart kibana
          ;;
        health)
          curl -s -k https://localhost:5601/api/status | jq .
          ;;
        help|*)
          show_help
          ;;
      esac
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0750"

- name: Create Kibana health check script
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/kibana/scripts/healthcheck.sh"
    content: |
      #!/bin/bash
      
      # Check if Kibana is running
      if ! docker ps -f name=kibana -f status=running | grep -q kibana; then
        echo "Kibana is not running"
        exit 1
      fi
      
      # Check if Kibana is responding
      if ! curl -s -k -f https://localhost:5601/api/status > /dev/null; then
        echo "Kibana is not responding"
        exit 1
      fi
      
      # Check Kibana status
      STATUS=$(curl -s -k https://localhost:5601/api/status | jq -r .status.overall.level)
      if [ "$STATUS" != "available" ]; then
        echo "Kibana status is $STATUS"
        exit 1
      fi
      
      exit 0
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0750"

- name: Create Kibana log rotation configuration
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/kibana/config/logrotate.conf"
    content: |
      {{ logs_dir }}/kibana/*.log {
        daily
        rotate 7
        compress
        delaycompress
        missingok
        notifempty
        create 0640 {{ username }} {{ username }}
      }
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0640"

- name: Add Kibana log rotation to crontab
  ansible.builtin.cron:
    name: "Rotate Kibana logs"
    job: "logrotate {{ docker_dir }}/kibana/config/logrotate.conf"
    hour: "0"
    minute: "0"
    user: "{{ username }}" 