---
# MariaDB Configuration
# Production-ready database server

- name: Create MariaDB directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0755"
  loop:
    - "{{ docker_dir }}/mariadb/data"
    - "{{ docker_dir }}/mariadb/config"
    - "{{ docker_dir }}/mariadb/scripts"
    - "{{ docker_dir }}/mariadb/backup"
    - "{{ logs_dir }}/mariadb"

- name: Create MariaDB configuration
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/mariadb/config/my.cnf"
    content: |
      [mysqld]
      # Basic Settings
      user                    = mysql
      pid-file                = /var/run/mysqld/mysqld.pid
      socket                  = /var/run/mysqld/mysqld.sock
      port                    = 3306
      basedir                 = /usr
      datadir                 = /var/lib/mysql
      tmpdir                  = /tmp
      lc_messages_dir         = /usr/share/mysql
      lc_messages             = en_US
      
      # Character Set
      character-set-server    = utf8mb4
      collation-server        = utf8mb4_unicode_ci
      
      # InnoDB Settings
      innodb_buffer_pool_size = 1G
      innodb_log_file_size    = 256M
      innodb_log_buffer_size  = 16M
      innodb_flush_log_at_trx_commit = 2
      innodb_flush_method     = O_DIRECT
      innodb_file_per_table   = 1
      
      # MyISAM Settings
      key_buffer_size         = 128M
      myisam_sort_buffer_size = 128M
      myisam_max_sort_file_size = 10G
      myisam_repair_threads   = 1
      
      # Connection Settings
      max_connections         = 100
      max_allowed_packet      = 16M
      thread_cache_size       = 128
      thread_stack            = 192K
      
      # Query Cache
      query_cache_type        = 0
      query_cache_size        = 0
      
      # Logging
      slow_query_log          = 1
      slow_query_log_file     = /var/log/mariadb/mysql-slow.log
      long_query_time         = 2
      log_error               = /var/log/mariadb/error.log
      
      # Binary Log
      server_id               = 1
      log_bin                 = /var/log/mariadb/mysql-bin.log
      expire_logs_days        = 10
      max_binlog_size         = 100M
      
      # Security
      local_infile            = 0
      skip_name_resolve       = 1
      
      [client]
      port                    = 3306
      socket                  = /var/run/mysqld/mysqld.sock
      default-character-set   = utf8mb4
      
      [mysql]
      default-character-set   = utf8mb4
      
      [mysqldump]
      quick
      quote-names
      max_allowed_packet      = 16M
      default-character-set   = utf8mb4
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0640"

- name: Create MariaDB backup script
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/mariadb/scripts/backup.sh"
    content: |
      #!/bin/bash
      
      # MariaDB Backup Script
      
      BACKUP_DIR="{{ docker_dir }}/mariadb/backup"
      TIMESTAMP=$(date +%Y%m%d_%H%M%S)
      BACKUP_FILE="$BACKUP_DIR/mariadb_backup_$TIMESTAMP.sql.gz"
      
      # Create backup directory if it doesn't exist
      mkdir -p "$BACKUP_DIR"
      
      # Get list of databases
      DATABASES=$(docker exec mariadb mysql -u root -p"{{ mariadb_root_password }}" -N -e "SHOW DATABASES" | grep -v "information_schema\|performance_schema\|mysql\|sys")
      
      # Create backup
      docker exec mariadb mysqldump -u root -p"{{ mariadb_root_password }}" \
        --single-transaction \
        --quick \
        --lock-tables=false \
        --databases $DATABASES | gzip > "$BACKUP_FILE"
      
      # Remove backups older than 7 days
      find "$BACKUP_DIR" -name "mariadb_backup_*.sql.gz" -mtime +7 -delete
      
      echo "Backup created: $BACKUP_FILE"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0750"

- name: Create MariaDB restore script
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/mariadb/scripts/restore.sh"
    content: |
      #!/bin/bash
      
      # MariaDB Restore Script
      
      if [ -z "$1" ]; then
        echo "Please specify backup file"
        exit 1
      fi
      
      BACKUP_FILE="$1"
      if [ ! -f "$BACKUP_FILE" ]; then
        echo "Backup file not found: $BACKUP_FILE"
        exit 1
      fi
      
      # Restore backup
      gunzip -c "$BACKUP_FILE" | docker exec -i mariadb mysql -u root -p"{{ mariadb_root_password }}"
      
      echo "Backup restored from: $BACKUP_FILE"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0750"

- name: Create MariaDB management script
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/mariadb/scripts/manage.sh"
    content: |
      #!/bin/bash
      
      # MariaDB Management Script
      
      function show_help {
        echo "MariaDB Management Script"
        echo "Usage: $0 [command]"
        echo ""
        echo "Commands:"
        echo "  status    - Show MariaDB status"
        echo "  logs      - Show MariaDB logs"
        echo "  restart   - Restart MariaDB"
        echo "  backup    - Backup databases"
        echo "  restore   - Restore databases"
        echo "  optimize  - Optimize databases"
        echo "  help      - Show this help"
      }
      
      function optimize_databases {
        # Get list of databases
        DATABASES=$(docker exec mariadb mysql -u root -p"{{ mariadb_root_password }}" -N -e "SHOW DATABASES" | grep -v "information_schema\|performance_schema\|mysql\|sys")
        
        # Optimize each database
        for DB in $DATABASES; do
          echo "Optimizing database: $DB"
          docker exec mariadb mysql -u root -p"{{ mariadb_root_password }}" -e "OPTIMIZE TABLE \`$DB\`.*"
        done
      }
      
      case "$1" in
        status)
          docker ps -f name=mariadb
          docker exec mariadb mysqladmin -u root -p"{{ mariadb_root_password }}" status
          ;;
        logs)
          docker logs mariadb --tail 100 -f
          ;;
        restart)
          docker restart mariadb
          ;;
        backup)
          "{{ docker_dir }}/mariadb/scripts/backup.sh"
          ;;
        restore)
          "{{ docker_dir }}/mariadb/scripts/restore.sh" "$2"
          ;;
        optimize)
          optimize_databases
          ;;
        help|*)
          show_help
          ;;
      esac
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0750"

- name: Create MariaDB health check script
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/mariadb/scripts/healthcheck.sh"
    content: |
      #!/bin/bash
      
      # Check if MariaDB is running
      if ! docker ps -f name=mariadb -f status=running | grep -q mariadb; then
        echo "MariaDB is not running"
        exit 1
      fi
      
      # Check if MariaDB is responding
      if ! docker exec mariadb mysqladmin -u root -p"{{ mariadb_root_password }}" ping > /dev/null 2>&1; then
        echo "MariaDB is not responding"
        exit 1
      fi
      
      # Check MariaDB status
      STATUS=$(docker exec mariadb mysqladmin -u root -p"{{ mariadb_root_password }}" status | grep "Uptime")
      if [ -z "$STATUS" ]; then
        echo "MariaDB status check failed"
        exit 1
      fi
      
      exit 0
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0750"

- name: Create MariaDB log rotation configuration
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/mariadb/config/logrotate.conf"
    content: |
      {{ logs_dir }}/mariadb/*.log {
        daily
        rotate 7
        compress
        delaycompress
        missingok
        notifempty
        create 0640 {{ username }} {{ username }}
      }
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0640"

- name: Add MariaDB log rotation to crontab
  ansible.builtin.cron:
    name: "Rotate MariaDB logs"
    job: "logrotate {{ docker_dir }}/mariadb/config/logrotate.conf"
    hour: "0"
    minute: "0"
    user: "{{ username }}"

- name: Add MariaDB backup to crontab
  ansible.builtin.cron:
    name: "Backup MariaDB databases"
    job: "{{ docker_dir }}/mariadb/scripts/backup.sh"
    hour: "3"
    minute: "0"
    user: "{{ username }}"

- name: Add MariaDB optimization to crontab
  ansible.builtin.cron:
    name: "Optimize MariaDB databases"
    job: "{{ docker_dir }}/mariadb/scripts/manage.sh optimize"
    hour: "4"
    minute: "0"
    user: "{{ username }}" 