---
# Fing Deployment Validation
# Validates the complete Fing deployment

- name: Verify Fing container is running
  community.docker.docker_container_info:
    name: "{{ fing_container_name }}"
  register: fing_container_status

- name: Assert Fing container is running
  ansible.builtin.assert:
    that:
      - fing_container_status.exists
      - fing_container_status.container.State.Status == "running"
    fail_msg: "Fing container is not running properly"

- name: Verify Fing web interface
  ansible.builtin.uri:
    url: "http://{{ ansible_default_ipv4.address }}:{{ fing_web_port }}{{ fing_health_check_url }}"
    method: GET
    status_code: 200
    timeout: "{{ fing_health_check_timeout }}"
  register: fing_web_check

- name: Assert Fing web interface is accessible
  ansible.builtin.assert:
    that: fing_web_check.status == 200
    fail_msg: "Fing web interface is not accessible"

- name: Verify Fing API endpoint
  ansible.builtin.uri:
    url: "http://{{ ansible_default_ipv4.address }}:{{ fing_api_port }}/api/{{ fing_api_version }}/health"
    method: GET
    status_code: 200
    timeout: 10
  register: fing_api_check
  when: fing_api_enabled | default(true)

- name: Assert Fing API is accessible
  ansible.builtin.assert:
    that: fing_api_check.status == 200
    fail_msg: "Fing API is not accessible"
  when: fing_api_enabled | default(true)

- name: Verify Fing metrics endpoint
  ansible.builtin.uri:
    url: "http://{{ ansible_default_ipv4.address }}:{{ fing_metrics_port }}/metrics"
    method: GET
    status_code: 200
    timeout: 10
  register: fing_metrics_check
  when: fing_metrics_enabled | default(true)

- name: Assert Fing metrics are accessible
  ansible.builtin.assert:
    that: fing_metrics_check.status == 200
    fail_msg: "Fing metrics endpoint is not accessible"
  when: fing_metrics_enabled | default(true)

- name: Verify Fing database
  ansible.builtin.command:
    cmd: "docker exec {{ fing_container_name }} fing db-status"
    chdir: "{{ docker_dir }}/fing"
  register: fing_db_check
  when: fing_database_type == "sqlite"

- name: Assert Fing database is healthy
  ansible.builtin.assert:
    that: fing_db_check.rc == 0
    fail_msg: "Fing database is not healthy"
  when: fing_database_type == "sqlite"

- name: Verify Fing network discovery
  ansible.builtin.command:
    cmd: "docker exec {{ fing_container_name }} fing discovery-status"
    chdir: "{{ docker_dir }}/fing"
  register: fing_discovery_check
  when: fing_auto_discovery | default(true)

- name: Assert Fing network discovery is working
  ansible.builtin.assert:
    that: fing_discovery_check.rc == 0
    fail_msg: "Fing network discovery is not working"
  when: fing_auto_discovery | default(true)

- name: Verify Fing authentication
  ansible.builtin.uri:
    url: "http://{{ ansible_default_ipv4.address }}:{{ fing_web_port }}/auth/login"
    method: POST
    body_format: json
    body: |
      {
        "email": "{{ fing_admin_email }}",
        "password": "{{ fing_admin_password }}"
      }
    status_code: 200
    timeout: 10
  register: fing_auth_check
  when: fing_auth_enabled | default(true)

- name: Assert Fing authentication is working
  ansible.builtin.assert:
    that: fing_auth_check.status == 200
    fail_msg: "Fing authentication is not working"
  when: fing_auth_enabled | default(true)

- name: Verify Fing Traefik integration
  ansible.builtin.uri:
    url: "https://{{ fing_domain }}{{ fing_health_check_url }}"
    method: GET
    status_code: 200
    timeout: "{{ fing_health_check_timeout }}"
    validate_certs: false
  register: fing_traefik_check
  when: fing_traefik_enabled | default(true)

- name: Assert Fing Traefik integration is working
  ansible.builtin.assert:
    that: fing_traefik_check.status == 200
    fail_msg: "Fing Traefik integration is not working"
  when: fing_traefik_enabled | default(true)

- name: Verify Fing monitoring integration
  ansible.builtin.uri:
    url: "http://{{ ansible_default_ipv4.address }}:/api/v1/targets"
    method: GET
    status_code: 200
    timeout: 10
  register: prometheus_targets_check
  when: fing_prometheus_enabled | default(true)

- name: Assert Fing is in Prometheus targets
  ansible.builtin.assert:
    that: "'fing' in prometheus_targets_check.json.data.activeTargets | map(attribute='labels.job') | list"
    fail_msg: "Fing is not in Prometheus targets"
  when: fing_prometheus_enabled | default(true)

- name: Verify Fing Homepage integration
  ansible.builtin.uri:
    url: "http://{{ ansible_default_ipv4.address }}:/api/services"
    method: GET
    status_code: 200
    timeout: 10
  register: homepage_services_check
  when: fing_homepage_enabled | default(true)

- name: Assert Fing is in Homepage services
  ansible.builtin.assert:
    that: "'fing' in homepage_services_check.json | map(attribute='name') | list"
    fail_msg: "Fing is not in Homepage services"
  when: fing_homepage_enabled | default(true)

- name: Verify Fing security integration
  ansible.builtin.command:
    cmd: "fail2ban-client status {{ fing_fail2ban_jail }}"
  register: fail2ban_jail_check
  when: fing_fail2ban_enabled | default(true)

- name: Assert Fing Fail2ban jail is active
  ansible.builtin.assert:
    that: fail2ban_jail_check.rc == 0
    fail_msg: "Fing Fail2ban jail is not active"
  when: fing_fail2ban_enabled | default(true)

- name: Verify Fing backup functionality
  ansible.builtin.command:
    cmd: "{{ docker_dir }}/fing/backup.sh --test"
    chdir: "{{ docker_dir }}/fing"
  register: fing_backup_check
  when: fing_backup_enabled | default(true)

- name: Assert Fing backup is working
  ansible.builtin.assert:
    that: fing_backup_check.rc == 0
    fail_msg: "Fing backup is not working"
  when: fing_backup_enabled | default(true)

- name: Verify Fing alerting functionality
  ansible.builtin.command:
    cmd: "{{ docker_dir }}/fing/alert-test.sh"
    chdir: "{{ docker_dir }}/fing"
  register: fing_alert_check
  when: fing_alerting_enabled | default(true)

- name: Assert Fing alerting is working
  ansible.builtin.assert:
    that: fing_alert_check.rc == 0
    fail_msg: "Fing alerting is not working"
  when: fing_alerting_enabled | default(true)

- name: Verify Fing log files
  ansible.builtin.find:
    paths: "{{ docker_dir }}/fing/logs"
    patterns: "*.log"
    file_type: file
  register: fing_log_files

- name: Assert Fing log files exist
  ansible.builtin.assert:
    that: fing_log_files.files | length > 0
    fail_msg: "Fing log files do not exist"

- name: Verify Fing configuration files
  ansible.builtin.find:
    paths: "{{ docker_dir }}/fing/config"
    patterns: "*.yml"
    file_type: file
  register: fing_config_files

- name: Assert Fing configuration files exist
  ansible.builtin.assert:
    that: fing_config_files.files | length > 0
    fail_msg: "Fing configuration files do not exist"

- name: Verify Fing cron jobs
  ansible.builtin.cron:
    name: "Fing backup"
    state: present
  register: fing_backup_cron_check
  when: fing_backup_enabled | default(true)

- name: Assert Fing cron jobs are configured
  ansible.builtin.assert:
    that: fing_backup_cron_check.changed == false
    fail_msg: "Fing cron jobs are not configured"
  when: fing_backup_enabled | default(true)

- name: Verify Fing systemd service
  ansible.builtin.systemd:
    name: "fing"
    state: started
  register: fing_service_check

- name: Assert Fing systemd service is running
  ansible.builtin.assert:
    that: fing_service_check.status.ActiveState == "active"
    fail_msg: "Fing systemd service is not running"

- name: Verify Fing systemd timer
  ansible.builtin.systemd:
    name: "fing.timer"
    state: started
  register: fing_timer_check
  when: fing_maintenance_enabled | default(true)

- name: Assert Fing systemd timer is running
  ansible.builtin.assert:
    that: fing_timer_check.status.ActiveState == "active"
    fail_msg: "Fing systemd timer is not running"
  when: fing_maintenance_enabled | default(true)

- name: Verify Fing resource usage
  ansible.builtin.command:
    cmd: "docker stats {{ fing_container_name }} --no-stream --format '{{ '{{' }}.CPUPerc{{ '}}' }} {{ '{{' }}.MemUsage{{ '}}' }}'"
    chdir: "{{ docker_dir }}/fing"
  register: fing_resource_check

- name: Assert Fing resource usage is reasonable
  ansible.builtin.assert:
    that: 
      - fing_resource_check.stdout != ""
      - "0.0%" not in fing_resource_check.stdout
    fail_msg: "Fing resource usage is not reasonable"

- name: Verify Fing network connectivity
  ansible.builtin.command:
    cmd: "docker exec {{ fing_container_name }} ping -c 3 8.8.8.8"
    chdir: "{{ docker_dir }}/fing"
  register: fing_network_check

- name: Assert Fing network connectivity is working
  ansible.builtin.assert:
    that: fing_network_check.rc == 0
    fail_msg: "Fing network connectivity is not working"

- name: Verify Fing port accessibility
  ansible.builtin.wait_for:
    host: "localhost"
    port: "{{ item }}"
    delay: 5
    timeout: 30
  loop:
    - "{{ fing_web_port }}"
    - "{{ fing_api_port }}"
    - "{{ fing_metrics_port }}"
  when: fing_metrics_enabled | default(true)

- name: Display Fing deployment validation summary
  ansible.builtin.debug:
    msg: |
      Fing Deployment Validation Complete:
      
      Container Status:
      - Container: {{ fing_container_name }}
      - Status: {{ fing_container_status.container.State.Status }}
      - Health: {{ fing_container_status.container.State.Health.Status | default('N/A') }}
      
      Service Endpoints:
      - Web Interface: {{ fing_web_check.status | default('N/A') }}
      - API Endpoint: {{ fing_api_check.status | default('N/A') }}
      - Metrics Endpoint: {{ fing_metrics_check.status | default('N/A') }}
      - Traefik Integration: {{ fing_traefik_check.status | default('N/A') }}
      
      Database & Discovery:
      - Database Status: {{ fing_db_check.rc | default('N/A') }}
      - Network Discovery: {{ fing_discovery_check.rc | default('N/A') }}
      - Authentication: {{ fing_auth_check.status | default('N/A') }}
      
      Integration Status:
      - Prometheus Targets: {{ prometheus_targets_check.status | default('N/A') }}
      - Homepage Services: {{ homepage_services_check.status | default('N/A') }}
      - Fail2ban Jail: {{ fail2ban_jail_check.rc | default('N/A') }}
      
      Functionality Tests:
      - Backup Test: {{ fing_backup_check.rc | default('N/A') }}
      - Alert Test: {{ fing_alert_check.rc | default('N/A') }}
      - Network Connectivity: {{ fing_network_check.rc | default('N/A') }}
      
      System Integration:
      - Log Files: {{ fing_log_files.files | length }} files
      - Config Files: {{ fing_config_files.files | length }} files
      - Cron Jobs: {{ fing_backup_cron_check.changed | default(false) | ternary('Not Configured', 'Configured') }}
      - Systemd Service: {{ fing_service_check.status.ActiveState }}
      - Systemd Timer: {{ fing_timer_check.status.ActiveState | default('N/A') }}
      
      Resource Usage:
      - CPU & Memory: {{ fing_resource_check.stdout | default('N/A') }}
      
      Port Accessibility:
      - Web Port ({{ fing_web_port }}): Accessible
      - API Port ({{ fing_api_port }}): Accessible
      - Metrics Port ({{ fing_metrics_port }}): Accessible
      
      All validation checks passed successfully!
      
      Fing is now fully deployed and operational:
      - Web Interface: https://{{ fing_domain }}
      - API Endpoint: https://{{ fing_domain }}/api/{{ fing_api_version }}
      - Metrics: https://{{ fing_domain }}/metrics
      - Homepage: Available in Network category
      
      Next Steps:
      1. Access the web interface and configure network discovery
      2. Set up monitoring dashboards in Grafana
      3. Configure alerting rules in Alertmanager
      4. Test network discovery functionality
      5. Monitor logs and metrics
      6. Configure additional security rules
      7. Set up backup verification
      8. Test alert notifications 