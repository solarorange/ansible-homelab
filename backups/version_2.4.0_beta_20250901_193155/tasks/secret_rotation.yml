---
# Secret Rotation Management
# Implements comprehensive secret rotation for all services

- name: Define secret rotation configuration
  ansible.builtin.set_fact:
    secret_rotation:
      enabled: true
      rotation_interval_days: 90
      notification_webhook: "{{ vault_notification_webhook | default('') }}"
      backup_old_secrets: true
      force_rotation: "{{ force_secret_rotation | default(false) }}"
      rotation_date: "{{ ansible_date_time.date }}"
  tags: [security, secrets, rotation]

- name: Check if secret rotation is due
  ansible.builtin.stat:
    path: "{{ logs_dir }}/last_secret_rotation.txt"
  register: last_rotation_check
  tags: [security, secrets, rotation]

- name: Read last rotation date
  ansible.builtin.slurp:
    src: "{{ logs_dir }}/last_secret_rotation.txt"
  register: last_rotation_date
  when: last_rotation_check.stat.exists
  tags: [security, secrets, rotation]

- name: Calculate days since last rotation
  ansible.builtin.set_fact:
    days_since_rotation: "{{ ((ansible_date_time.epoch | int) - (last_rotation_date.content | b64decode | from_json | json_query('last_rotation_epoch'))) / 86400 | int }}"
  when: last_rotation_check.stat.exists
  tags: [security, secrets, rotation]

- name: Set default rotation status
  ansible.builtin.set_fact:
    rotation_needed: true
    days_since_rotation: 999
  when: not last_rotation_check.stat.exists
  tags: [security, secrets, rotation]

- name: Determine if rotation is needed
  ansible.builtin.set_fact:
    rotation_needed: "{{ force_secret_rotation | default(false) or days_since_rotation >= secret_rotation.rotation_interval_days }}"
  tags: [security, secrets, rotation]

- name: Display rotation status
  ansible.builtin.debug:
    msg: |
      Secret Rotation Status:
      - Rotation enabled: {{ secret_rotation.enabled }}
      - Days since last rotation: {{ days_since_rotation }}
      - Rotation interval: {{ secret_rotation.rotation_interval_days }} days
      - Rotation needed: {{ rotation_needed }}
      - Force rotation: {{ force_secret_rotation | default(false) }}
  tags: [security, secrets, rotation]

- name: Backup current secrets before rotation
  block:
    - name: Create backup directory
      ansible.builtin.file:
        path: "{{ backup_dir }}/secrets/{{ ansible_date_time.date }}"
        state: directory
        mode: "0700"
        owner: "{{ username }}"
        group: "{{ username }}"
      tags: [security, secrets, rotation]

    - name: Backup vault file
      ansible.builtin.copy:
        src: "{{ vault_file_path | default('group_vars/all/vault.yml') }}"
        dest: "{{ backup_dir }}/secrets/{{ ansible_date_time.date }}/vault_backup.yml"
        remote_src: true
        mode: "0600"
        owner: "{{ username }}"
        group: "{{ username }}"
      when: vault_file_path is defined
      tags: [security, secrets, rotation]

    - name: Backup environment variables
      ansible.builtin.copy:
        src: "{{ env_file_path | default('.env') }}"
        dest: "{{ backup_dir }}/secrets/{{ ansible_date_time.date }}/env_backup"
        remote_src: true
        mode: "0600"
        owner: "{{ username }}"
        group: "{{ username }}"
      when: env_file_path is defined
      tags: [security, secrets, rotation]

  when:
    - rotation_needed
    - secret_rotation.backup_old_secrets
  tags: [security, secrets, rotation]

- name: Generate new secrets for rotation
  block:
    - name: Generate new database passwords
      ansible.builtin.set_fact:
        new_vault_postgresql_password: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=30') }}"
        new_vault_redis_password: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=32') }}"
        new_vault_media_database_password: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=30') }}"
        new_vault_paperless_database_password: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=30') }}"
      tags: [security, secrets, rotation]

    - name: Generate new service passwords
      ansible.builtin.set_fact:
        new_vault_grafana_admin_password: "{{ lookup('password', '/dev/null chars=ascii_letters,digits,punctuation length=32') }}"
        new_vault_authentik_admin_password: "{{ lookup('password', '/dev/null chars=ascii_letters,digits,punctuation length=32') }}"
        new_vault_portainer_admin_password: "{{ lookup('password', '/dev/null chars=ascii_letters,digits,punctuation length=32') }}"
        new_vault_gitlab_root_password: "{{ lookup('password', '/dev/null chars=ascii_letters,digits,punctuation length=32') }}"
      tags: [security, secrets, rotation]

    - name: Generate new API keys
      ansible.builtin.set_fact:
        new_vault_sonarr_api_key: "sonarr_{{ lookup('password', '/dev/null chars=ascii_letters,digits length=64') }}"
        new_vault_radarr_api_key: "radarr_{{ lookup('password', '/dev/null chars=ascii_letters,digits length=64') }}"
        new_vault_lidarr_api_key: "lidarr_{{ lookup('password', '/dev/null chars=ascii_letters,digits length=64') }}"
        new_vault_readarr_api_key: "readarr_{{ lookup('password', '/dev/null chars=ascii_letters,digits length=64') }}"
        new_vault_prowlarr_api_key: "prowlarr_{{ lookup('password', '/dev/null chars=ascii_letters,digits length=64') }}"
        new_vault_bazarr_api_key: "bazarr_{{ lookup('password', '/dev/null chars=ascii_letters,digits length=64') }}"
      tags: [security, secrets, rotation]

    - name: Generate new secret keys
      ansible.builtin.set_fact:
        new_vault_authentik_secret_key: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=64') }}"
        new_vault_grafana_secret_key: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=64') }}"
        new_vault_paperless_secret_key: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=64') }}"
        new_vault_immich_jwt_secret: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=64') }}"
      tags: [security, secrets, rotation]

  when: rotation_needed
  tags: [security, secrets, rotation]

- name: Update vault variables with new secrets
  block:
    - name: Update database passwords
      ansible.builtin.replace:
        path: "{{ vault_file_path | default('group_vars/all/vault.yml') }}"
        regexp: "vault_postgresql_password: .*"
        replace: "vault_postgresql_password: {{ new_vault_postgresql_password }}"
      tags: [security, secrets, rotation]

    - name: Update service passwords
      ansible.builtin.replace:
        path: "{{ vault_file_path | default('group_vars/all/vault.yml') }}"
        regexp: "vault_grafana_admin_password: .*"
        replace: "vault_grafana_admin_password: {{ new_vault_grafana_admin_password }}"
      tags: [security, secrets, rotation]

    - name: Update API keys
      ansible.builtin.replace:
        path: "{{ vault_file_path | default('group_vars/all/vault.yml') }}"
        regexp: "vault_sonarr_api_key: .*"
        replace: "vault_sonarr_api_key: {{ new_vault_sonarr_api_key }}"
      tags: [security, secrets, rotation]

    - name: Update secret keys
      ansible.builtin.replace:
        path: "{{ vault_file_path | default('group_vars/all/vault.yml') }}"
        regexp: "vault_authentik_secret_key: .*"
        replace: "vault_authentik_secret_key: {{ new_vault_authentik_secret_key }}"
      tags: [security, secrets, rotation]

  when: rotation_needed
  tags: [security, secrets, rotation]

- name: Restart services with new secrets
  block:
    - name: Restart database services
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: restarted
      loop:
        - postgresql
        - redis
        - mariadb
      when: item in enabled_services
      tags: [security, secrets, rotation]

    - name: Restart authentication services
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: restarted
      loop:
        - authentik
        - grafana
        - portainer
      when: item in enabled_services
      tags: [security, secrets, rotation]

    - name: Restart media services
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: restarted
      loop:
        - sonarr
        - radarr
        - lidarr
        - readarr
        - prowlarr
        - bazarr
      when: item in enabled_services
      tags: [security, secrets, rotation]

  when: rotation_needed
  tags: [security, secrets, rotation]

- name: Update rotation timestamp
  ansible.builtin.copy:
    content: |
      {
        "last_rotation_date": "{{ ansible_date_time.iso8601 }}",
        "last_rotation_epoch": {{ ansible_date_time.epoch }},
        "rotation_interval_days": {{ secret_rotation.rotation_interval_days }},
        "next_rotation_date": "{{ ((ansible_date_time.epoch | int) + (secret_rotation.rotation_interval_days * 86400)) | strftime('%Y-%m-%d %H:%M:%S') }}"
      }
    dest: "{{ logs_dir }}/last_secret_rotation.txt"
    mode: "0600"
    owner: "{{ username }}"
    group: "{{ username }}"
  when: rotation_needed
  tags: [security, secrets, rotation]

- name: Send secret rotation notification
  ansible.builtin.uri:
    url: "{{ secret_rotation.notification_webhook }}"
    method: POST
    body_format: json
    body: |
      {
        "alert_type": "secret_rotation",
        "host": "{{ inventory_hostname }}",
        "timestamp": "{{ ansible_date_time.iso8601 }}",
        "rotation_status": "{{ 'COMPLETED' if rotation_needed else 'NOT_NEEDED' }}",
        "days_since_last_rotation": {{ days_since_rotation }},
        "next_rotation_date": "{{ ((ansible_date_time.epoch | int) + (secret_rotation.rotation_interval_days * 86400)) | strftime('%Y-%m-%d %H:%M:%S') }}"
      }
  when:
    - secret_rotation.notification_webhook is defined
    - rotation_needed
  tags: [security, secrets, rotation, notifications]

- name: Create secret rotation report
  ansible.builtin.template:
    src: templates/secret_rotation_report.j2
    dest: "{{ logs_dir }}/secret_rotation_report.txt"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0600"
  vars:
    report_timestamp: "{{ ansible_date_time.iso8601 }}"
    rotation_performed: "{{ rotation_needed }}"
  tags: [security, secrets, rotation]

- name: Display secret rotation summary
  ansible.builtin.debug:
    msg: |
      Secret Rotation Summary:
      - Rotation enabled: {{ secret_rotation.enabled }}
      - Rotation performed: {{ rotation_needed }}
      - Days since last rotation: {{ days_since_rotation }}
      - Next rotation due: {{ ((ansible_date_time.epoch | int) + (secret_rotation.rotation_interval_days * 86400)) | strftime('%Y-%m-%d %H:%M:%S') }}
      - Backup created: {{ secret_rotation.backup_old_secrets }}
  tags: [security, secrets, rotation]
