#!/bin/bash
# ErsatzTV Health Check Script
# Generated by Ansible - Do not edit manually

set -e

# Configuration
CONTAINER_NAME="{{ ersatztv_container_name }}"
SERVICE_PORT="{{ ersatztv_port }}"
HEALTH_URL="http://{{ ansible_default_ipv4.address }}:$SERVICE_PORT/api/health"
API_URL="http://{{ ansible_default_ipv4.address }}:$SERVICE_PORT/api"
LOG_FILE="{{ ersatztv_logs_dir }}/healthcheck.log"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}" | tee -a "$LOG_FILE"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}" | tee -a "$LOG_FILE"
}

warning() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}" | tee -a "$LOG_FILE"
}

# Check if container is running
check_container_running() {
    if ! docker ps --format "table {{.Names}}" | grep -q "^$CONTAINER_NAME$"; then
        error "Container $CONTAINER_NAME is not running"
        return 1
    fi
    log "Container $CONTAINER_NAME is running"
    return 0
}

# Check container health status
check_container_health() {
    local health_status
    health_status=$(docker inspect --format='{{.State.Health.Status}}' "$CONTAINER_NAME" 2>/dev/null || echo "unknown")
    
    if [[ "$health_status" == "healthy" ]]; then
        log "Container health status: $health_status"
        return 0
    elif [[ "$health_status" == "starting" ]]; then
        warning "Container health status: $health_status (still starting)"
        return 0
    else
        error "Container health status: $health_status"
        return 1
    fi
}

# Check web interface accessibility
check_web_interface() {
    if curl -f -s --max-time 10 "$HEALTH_URL" > /dev/null 2>&1; then
        log "Web interface is accessible"
        return 0
    else
        error "Web interface is not accessible"
        return 1
    fi
}

# Check API endpoints
check_api_endpoints() {
    local endpoints=("$API_URL/status" "$API_URL/channels" "$API_URL/collections")
    local failed_endpoints=()
    
    for endpoint in "${endpoints[@]}"; do
        if ! curl -f -s --max-time 10 "$endpoint" > /dev/null 2>&1; then
            failed_endpoints+=("$endpoint")
        fi
    done
    
    if [[ ${#failed_endpoints[@]} -eq 0 ]]; then
        log "All API endpoints are accessible"
        return 0
    else
        warning "Some API endpoints are not accessible: ${failed_endpoints[*]}"
        return 1
    fi
}

# Check resource usage
check_resource_usage() {
    local container_stats
    container_stats=$(docker stats --no-stream --format "table {{.CPUPerc}}\t{{.MemUsage}}" "$CONTAINER_NAME" 2>/dev/null || echo "unknown")
    
    if [[ "$container_stats" != "unknown" ]]; then
        log "Resource usage: $container_stats"
    else
        warning "Unable to get resource usage"
    fi
}

# Check logs for errors
check_logs() {
    local error_count
    error_count=$(docker logs --since 5m "$CONTAINER_NAME" 2>&1 | grep -i "error\|exception\|fail" | wc -l)
    
    if [[ $error_count -gt 0 ]]; then
        warning "Found $error_count errors in recent logs"
        return 1
    else
        log "No recent errors found in logs"
        return 0
    fi
}

# Main health check
main() {
    log "Starting ErsatzTV health check"
    
    local exit_code=0
    
    # Run all checks
    check_container_running || exit_code=1
    check_container_health || exit_code=1
    check_web_interface || exit_code=1
    check_api_endpoints || exit_code=1
    check_resource_usage
    check_logs || exit_code=1
    
    if [[ $exit_code -eq 0 ]]; then
        log "Health check passed"
    else
        error "Health check failed"
    fi
    
    exit $exit_code
}

# Run main function
main "$@" 