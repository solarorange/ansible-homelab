#!/bin/bash
# ErsatzTV Backup Script
# Generated by Ansible - Do not edit manually

set -e

# Configuration
CONTAINER_NAME="{{ ersatztv_container_name }}"
CONFIG_DIR="{{ ersatztv_config_dir }}"
DATA_DIR="{{ ersatztv_data_dir }}"
BACKUP_DIR="{{ ersatztv_backup_dir }}"
BACKUP_RETENTION="{{ ersatztv_backup_retention | default(7) }}"
BACKUP_NAME="ersatztv-backup-$(date +%Y%m%d-%H%M%S).tar.gz"
BACKUP_FILE="$BACKUP_DIR/$BACKUP_NAME"
LOG_FILE="$BACKUP_DIR/backup.log"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}" | tee -a "$LOG_FILE"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}" | tee -a "$LOG_FILE"
}

warning() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}" | tee -a "$LOG_FILE"
}

# Check if running as root
if [[ $EUID -eq 0 ]]; then
   error "This script should not be run as root"
   exit 1
fi

# Create backup directory if it doesn't exist
if [[ ! -d "$BACKUP_DIR" ]]; then
    log "Creating backup directory: $BACKUP_DIR"
    mkdir -p "$BACKUP_DIR"
fi

# Check if container is running
if ! docker ps --format "table {{.Names}}" | grep -q "^$CONTAINER_NAME$"; then
    warning "Container $CONTAINER_NAME is not running, proceeding with backup anyway"
fi

# Stop the service before backup (optional)
if [[ "{{ ersatztv_backup_stop_service | default(false) }}" == "true" ]]; then
    log "Stopping ErsatzTV service for backup"
    docker stop "$CONTAINER_NAME" || true
    sleep 5
fi

# Create backup
log "Creating backup: $BACKUP_FILE"

# Backup configuration and data
tar -czf "$BACKUP_FILE" \
    --exclude="$BACKUP_DIR" \
    --exclude="*.tmp" \
    --exclude="*.log" \
    --exclude="cache" \
    --exclude="transcode" \
    "$CONFIG_DIR" \
    "$DATA_DIR" 2>/dev/null || {
    error "Failed to create backup"
    exit 1
}

# Verify backup
if [[ -f "$BACKUP_FILE" ]]; then
    backup_size=$(du -h "$BACKUP_FILE" | cut -f1)
    log "Backup created successfully: $BACKUP_FILE ($backup_size)"
else
    error "Backup file not found after creation"
    exit 1
fi

# Start the service if it was stopped
if [[ "{{ ersatztv_backup_stop_service | default(false) }}" == "true" ]]; then
    log "Starting ErsatzTV service after backup"
    docker start "$CONTAINER_NAME" || true
fi

# Clean up old backups
log "Cleaning up old backups (keeping last $BACKUP_RETENTION)"
find "$BACKUP_DIR" -name "ersatztv-backup-*.tar.gz" -type f -mtime +$BACKUP_RETENTION -delete 2>/dev/null || true

# List remaining backups
remaining_backups=$(find "$BACKUP_DIR" -name "ersatztv-backup-*.tar.gz" -type f | wc -l)
log "Remaining backups: $remaining_backups"

# Check backup integrity
log "Verifying backup integrity"
if tar -tzf "$BACKUP_FILE" > /dev/null 2>&1; then
    log "Backup integrity check passed"
else
    error "Backup integrity check failed"
    exit 1
fi

log "Backup completed successfully" 