---
# Redis deployment, configuration, backup, validation, homepage integration

- name: Ensure Redis directories exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0755"
  loop:
    - "{{ docker_dir }}/redis/data"
    - "{{ docker_dir }}/redis/config"
    - "{{ docker_dir }}/redis/scripts"
    - "{{ docker_dir }}/redis/backup"
    - "{{ logs_dir }}/redis"

- name: Deploy redis.conf
  ansible.builtin.template:
    src: redis.conf.j2
    dest: "{{ docker_dir }}/redis/config/redis.conf"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0640"

- name: Deploy Redis backup script
  ansible.builtin.template:
    src: backup-redis.sh.j2
    dest: "{{ docker_dir }}/redis/scripts/backup.sh"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0750"

- name: Deploy Redis restore script
  ansible.builtin.template:
    src: restore-redis.sh.j2
    dest: "{{ docker_dir }}/redis/scripts/restore.sh"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0750"

- name: Deploy Redis management script
  ansible.builtin.template:
    src: manage-redis.sh.j2
    dest: "{{ docker_dir }}/redis/scripts/manage.sh"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0750"

- name: Ensure Redis secrets directory exists
  ansible.builtin.file:
    path: "{{ docker_dir }}/redis/secrets"
    state: directory
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0700"

- name: Write Redis password secret file from provided value (disabled by default)
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/redis/secrets/redis_password"
    content: "{{ redis_password | default('') }}\n"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0600"
  when: databases_redis_write_secret_file | default(false) | bool and (redis_password | default('') != '')
  notify: restart redis

- name: Start Redis container
  community.docker.docker_container:
    name: "{{ redis_container_name }}"
    image: "{{ redis_image }}"
    restart_policy: "{{ redis_restart_policy }}"
    networks:
      - name: homelab
    env:
      REDIS_PASSWORD_FILE: /run/secrets/redis_password
    command: >
      sh -c 'exec redis-server /usr/local/etc/redis/redis.conf --requirepass "$(cat /run/secrets/redis_password)"'
    volumes:
      - "{{ docker_dir }}/redis/secrets/redis_password:/run/secrets/redis_password:ro"
      - "{{ docker_dir }}/redis/data:/data"
      - "{{ docker_dir }}/redis/config:/usr/local/etc/redis"
      - "{{ docker_dir }}/redis/scripts:/docker-entrypoint-initdb.d"
      - "{{ docker_dir }}/redis/backup:/backup"
      - "{{ logs_dir }}/redis:/var/log/redis"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a \"$(cat /run/secrets/redis_password)\" ping | grep -q PONG"]
      interval: 30s
      timeout: 10s
      retries: 5
    state: started
    restart: true
  register: redis_container

- name: Validate Redis is running
  ansible.builtin.command: docker exec {{ redis_container_name }} bash -lc 'redis-cli -a "$(cat /run/secrets/redis_password)" ping'
  register: redis_ping_result
  changed_when: false
  failed_when: redis_ping_result.stdout.strip() != 'PONG'

- name: Schedule Redis backup cron job
  ansible.builtin.cron:
    name: "Redis Backup"
    job: "{{ docker_dir }}/redis/scripts/backup.sh >> {{ logs_dir }}/redis/backup.log 2>&1"
    minute: "0"
    hour: "3"
    user: "{{ vault_databases_user }}"
    state: present

- name: Integrate Redis with homepage
  ansible.builtin.template:
    src: homepage-redis.yml.j2
    dest: "{{ homepage_config_dir }}/services/redis.yml"
    mode: "0644"
  when: redis_homepage_enabled | default(true)

# Security and SSL tasks can be added here as needed
