version: '3.8'

networks:
  {{ immich_network_name }}:
    external: {{ immich_network_external | lower }}

services:
  # Immich Server
  {% if immich_components | default([]).server.enabled | default(true) %}
  immich-server:
    image: "{{ immich_components | default([]).server.image }}"
    container_name: "{{ immich_components | default([]).server.container_name }}"
    restart: "{{ immich_container_restart_policy }}"
    networks:
      - "{{ immich_network_name }}"
    environment:
      - PUID={{ PUID | default(1000) }}
      - PGID={{ PGID | default(1000) }}
      - TZ={{ timezone }}
      {% for key, value in immich_components | default([]).server.environment.items() %}
      {% if key is match('(PASSWORD|TOKEN|SECRET|KEY)') %}
      - {{ key }}_FILE=/run/secrets/{{ key }}
      {% else %}
      - {{ key }}={{ value }}
      {% endif %}
      {% endfor %}
    volumes:
      {% if immich_components is defined and immich_components
      for volume in immich_components.server.volumes %}
      - "{{ volume }}"
      {% endfor %}
      {% if immich_manage_secret_files | default(true) %}
      {% for secret in immich_secret_files %}
      - "{{ docker_dir }}/immich/secrets/{{ secret.name }}:/run/secrets/{{ secret.name }}:ro"
      {% endfor %}
      {% endif %}
    {% if immich_direct_expose_server | default(false) %}
    ports:
      - "{{ immich_ports.server }}:{{ immich_ports.server }}"
    {% endif %}
    labels:
      - "traefik.enable={{ 'true' if immich_traefik_enabled else 'false' }}"
      - "traefik.http.routers.immich-server.rule=Host(`{{ immich_subdomain }}.{{ domain }}`)"
      - "traefik.http.routers.immich-server.entrypoints=websecure"
      - "traefik.http.routers.immich-server.tls.certresolver={{ immich_traefik_ssl_resolver }}"
      - "traefik.http.services.immich-server.loadbalancer.server.port={{ immich_ports.server }}"
      - "traefik.http.routers.immich-server.middlewares={{ immich_traefik_auth_middleware }}"
      # Prometheus scraping labels
      - "immich.prometheus.scrape=true"
      - "immich.prometheus.port={{ immich_ports.server }}"
      - "immich.prometheus.path=/metrics"
      # Loki scraping label
      - "immich.loki.scrape=true"
    healthcheck:
      test: {{ immich_components | default([]).server.healthcheck.test }}
      interval: "{{ immich_components | default([]).server.healthcheck.interval }}"
      timeout: "{{ immich_components | default([]).server.healthcheck.timeout }}"
      retries: {{ immich_components | default([]).server.healthcheck.retries }}
    depends_on:
      {% if immich_components is defined and immich_components
      for dependency in immich_components.server.depends_on %}
      - {{ dependency }}
      {% endfor %}
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp
    user: "{{ PUID | default(1000) }}:{{ PGID | default(1000) }}"
    mem_limit: {{ immich_components | default([]).server.resources.limits.memory }}
    cpus: '{{ immich_components | default([]).server.resources.limits.cpus }}'
  {% endif %}

  # Immich Web
  {% if immich_components | default([]).web.enabled | default(true) %}
  immich-web:
    image: "{{ immich_components | default([]).web.image }}"
    container_name: "{{ immich_components | default([]).web.container_name }}"
    restart: "{{ immich_container_restart_policy }}"
    networks:
      - "{{ immich_network_name }}"
    environment:
      - PUID={{ PUID | default(1000) }}
      - PGID={{ PGID | default(1000) }}
      - TZ={{ timezone }}
      {% for key, value in immich_components | default([]).web.environment.items() %}
      {% if key is match('(PASSWORD|TOKEN|SECRET|KEY)') %}
      - {{ key }}_FILE=/run/secrets/{{ key }}
      {% else %}
      - {{ key }}={{ value }}
      {% endif %}
      {% endfor %}
    volumes:
      {% if immich_components is defined and immich_components
      for volume in immich_components.web.volumes %}
      - "{{ volume }}"
      {% endfor %}
      {% if immich_manage_secret_files | default(true) %}
      {% for secret in immich_secret_files %}
      - "{{ docker_dir }}/immich/secrets/{{ secret.name }}:/run/secrets/{{ secret.name }}:ro"
      {% endfor %}
      {% endif %}
    {% if immich_direct_expose_web | default(false) %}
    ports:
      - "{{ immich_ports.web }}:{{ immich_ports.web }}"
    {% endif %}
    labels:
      - "traefik.enable={{ 'true' if immich_traefik_enabled else 'false' }}"
      - "traefik.http.routers.immich-web.rule=Host(`{{ immich_subdomain }}.{{ domain }}`) && PathPrefix(`/`)"
      - "traefik.http.routers.immich-web.entrypoints=websecure"
      - "traefik.http.routers.immich-web.tls.certresolver={{ immich_traefik_ssl_resolver }}"
      - "traefik.http.services.immich-web.loadbalancer.server.port={{ immich_ports.web }}"
      - "traefik.http.routers.immich-web.middlewares={{ immich_traefik_auth_middleware }}"
      # Prometheus scraping labels
      - "immich.prometheus.scrape=true"
      - "immich.prometheus.port={{ immich_ports.web }}"
      - "immich.prometheus.path=/metrics"
      # Loki scraping label
      - "immich.loki.scrape=true"
    healthcheck:
      test: {{ immich_components | default([]).web.healthcheck.test }}
      interval: "{{ immich_components | default([]).web.healthcheck.interval }}"
      timeout: "{{ immich_components | default([]).web.healthcheck.timeout }}"
      retries: {{ immich_components | default([]).web.healthcheck.retries }}
    depends_on:
      {% if immich_components is defined and immich_components
      for dependency in immich_components.web.depends_on %}
      - {{ dependency }}
      {% endfor %}
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp
    user: "{{ PUID | default(1000) }}:{{ PGID | default(1000) }}"
    mem_limit: {{ immich_components | default([]).web.resources.limits.memory }}
    cpus: '{{ immich_components | default([]).web.resources.limits.cpus }}'
  {% endif %}

  # Immich PostgreSQL Database
  {% if immich_components | default([]).postgres.enabled | default(true) %}
  immich-postgres:
    image: "{{ immich_components | default([]).postgres.image }}"
    container_name: "{{ immich_components | default([]).postgres.container_name }}"
    restart: "{{ immich_container_restart_policy }}"
    networks:
      - "{{ immich_network_name }}"
    environment:
      - PUID={{ PUID | default(1000) }}
      - PGID={{ PGID | default(1000) }}
      - TZ={{ timezone }}
      {% for key, value in immich_components | default([]).postgres.environment.items() %}
      {% if key is match('(PASSWORD|TOKEN|SECRET|KEY)') %}
      - {{ key }}_FILE=/run/secrets/{{ key }}
      {% else %}
      - {{ key }}={{ value }}
      {% endif %}
      {% endfor %}
    volumes:
      {% if immich_components is defined and immich_components
      for volume in immich_components.postgres.volumes %}
      - "{{ volume }}"
      {% endfor %}
      {% if immich_manage_secret_files | default(true) %}
      {% for secret in immich_secret_files %}
      - "{{ docker_dir }}/immich/secrets/{{ secret.name }}:/run/secrets/{{ secret.name }}:ro"
      {% endfor %}
      {% endif %}
    labels:
      # Prometheus scraping labels
      - "immich.prometheus.scrape=true"
      - "immich.prometheus.port=5432"
      # Loki scraping label
      - "immich.loki.scrape=true"
    healthcheck:
      test: {{ immich_components | default([]).postgres.healthcheck.test }}
      interval: "{{ immich_components | default([]).postgres.healthcheck.interval }}"
      timeout: "{{ immich_components | default([]).postgres.healthcheck.timeout }}"
      retries: {{ immich_components | default([]).postgres.healthcheck.retries }}
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: false
    tmpfs:
      - /tmp
    user: "{{ PUID | default(1000) }}:{{ PGID | default(1000) }}"
    mem_limit: {{ immich_components | default([]).postgres.resources.limits.memory }}
    cpus: '{{ immich_components | default([]).postgres.resources.limits.cpus }}'
  {% endif %}

  # Immich Redis Cache
  {% if immich_components | default([]).redis.enabled | default(true) %}
  immich-redis:
    image: "{{ immich_components | default([]).redis.image }}"
    container_name: "{{ immich_components | default([]).redis.container_name }}"
    restart: "{{ immich_container_restart_policy }}"
    networks:
      - "{{ immich_network_name }}"
    command: "{{ immich_components | default([]).redis.command }}"
    volumes:
      {% if immich_components is defined and immich_components
      for volume in immich_components.redis.volumes %}
      - "{{ volume }}"
      {% endfor %}
      {% if immich_manage_secret_files | default(true) %}
      {% for secret in immich_secret_files %}
      - "{{ docker_dir }}/immich/secrets/{{ secret.name }}:/run/secrets/{{ secret.name }}:ro"
      {% endfor %}
      {% endif %}
    labels:
      # Prometheus scraping labels
      - "immich.prometheus.scrape=true"
      - "immich.prometheus.port=6379"
      # Loki scraping label
      - "immich.loki.scrape=true"
    healthcheck:
      test: {{ immich_components | default([]).redis.healthcheck.test }}
      interval: "{{ immich_components | default([]).redis.healthcheck.interval }}"
      timeout: "{{ immich_components | default([]).redis.healthcheck.timeout }}"
      retries: {{ immich_components | default([]).redis.healthcheck.retries }}
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: false
    tmpfs:
      - /tmp
    user: "{{ PUID | default(1000) }}:{{ PGID | default(1000) }}"
    mem_limit: {{ immich_components | default([]).redis.resources.limits.memory }}
    cpus: '{{ immich_components | default([]).redis.resources.limits.cpus }}'
  {% endif %}

  # Immich Machine Learning
  {% if immich_components | default([]).machine_learning.enabled | default(true) %}
  immich-machine-learning:
    image: "{{ immich_components | default([]).machine_learning.image }}"
    container_name: "{{ immich_components | default([]).machine_learning.container_name }}"
    restart: "{{ immich_container_restart_policy }}"
    networks:
      - "{{ immich_network_name }}"
    environment:
      - PUID={{ PUID | default(1000) }}
      - PGID={{ PGID | default(1000) }}
      - TZ={{ timezone }}
      {% for key, value in immich_components | default([]).machine_learning.environment.items() %}
      {% if key is match('(PASSWORD|TOKEN|SECRET|KEY)') %}
      - {{ key }}_FILE=/run/secrets/{{ key }}
      {% else %}
      - {{ key }}={{ value }}
      {% endif %}
      {% endfor %}
    volumes:
      {% if immich_components is defined and immich_components
      for volume in immich_components.machine_learning.volumes %}
      - "{{ volume }}"
      {% endfor %}
      {% if immich_manage_secret_files | default(true) %}
      {% for secret in immich_secret_files %}
      - "{{ immich_config_dir }}/secrets/{{ secret.name }}:/run/secrets/{{ secret.name }}:ro"
      {% endfor %}
      {% endif %}
    {% if immich_direct_expose_ml | default(false) %}
    ports:
      - "{{ immich_ports.machine_learning }}:{{ immich_ports.machine_learning }}"
    {% endif %}
    labels:
      # Prometheus scraping labels
      - "immich.prometheus.scrape=true"
      - "immich.prometheus.port={{ immich_ports.machine_learning }}"
      - "immich.prometheus.path=/metrics"
      # Loki scraping label
      - "immich.loki.scrape=true"
    healthcheck:
      test: {{ immich_components | default([]).machine_learning.healthcheck.test }}
      interval: "{{ immich_components | default([]).machine_learning.healthcheck.interval }}"
      timeout: "{{ immich_components | default([]).machine_learning.healthcheck.timeout }}"
      retries: {{ immich_components | default([]).machine_learning.healthcheck.retries }}
    depends_on:
      {% if immich_components is defined and immich_components
      for dependency in immich_components.machine_learning.depends_on %}
      - {{ dependency }}
      {% endfor %}
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: false
    tmpfs:
      - /tmp
    user: "{{ PUID | default(1000) }}:{{ PGID | default(1000) }}"
    mem_limit: {{ immich_components | default([]).machine_learning.resources.limits.memory }}
    cpus: '{{ immich_components | default([]).machine_learning.resources.limits.cpus }}'
  {% endif %} 