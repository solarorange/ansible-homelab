#!/bin/bash
# DumbAssets Restore Script
# Generated by Ansible - Do not edit manually

set -euo pipefail

# Configuration
SERVICE_NAME="dumbassets"
CONTAINER_NAME="{{ dumbassets_container_name }}"
DATA_DIR="{{ dumbassets_data_dir }}"
BACKUP_DIR="{{ dumbassets_backup_dir }}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check if backup file is provided
if [ -z "$1" ]; then
    echo -e "${RED}ERROR: Please specify a backup file${NC}"
    echo "Usage: $0 <backup_file>"
    exit 1
fi

BACKUP_FILE="$1"

# Check if backup file exists
if [ ! -f "$BACKUP_FILE" ]; then
    echo -e "${RED}ERROR: Backup file $BACKUP_FILE does not exist${NC}"
    exit 1
fi

echo -e "${BLUE}Starting ${SERVICE_NAME} restore from: $BACKUP_FILE${NC}"

# Stop the service before restore
echo "Stopping ${SERVICE_NAME} service..."
cd "{{ dumbassets_docker_dir }}"
docker-compose down

# Wait for service to stop
sleep 10

# Backup current data directory
if [ -d "$DATA_DIR" ]; then
    echo "Creating backup of current data..."
    CURRENT_BACKUP="${BACKUP_DIR}/pre_restore_$(date +%Y%m%d_%H%M%S).tar.gz"
    tar -czf "$CURRENT_BACKUP" -C "$(dirname "$DATA_DIR")" "$(basename "$DATA_DIR")"
    echo "Current data backed up to: $CURRENT_BACKUP"
fi

# Remove current data directory
echo "Removing current data directory..."
rm -rf "$DATA_DIR"

# Create data directory
mkdir -p "$DATA_DIR"

# Extract backup
echo "Extracting backup..."
if [[ "$BACKUP_FILE" == *.tar.gz ]]; then
    tar -xzf "$BACKUP_FILE" -C "$(dirname "$DATA_DIR")"
else
    tar -xf "$BACKUP_FILE" -C "$(dirname "$DATA_DIR")"
fi

# Set proper permissions
echo "Setting permissions..."
chown -R "{{ username | default('homelab') }}:{{ username | default('homelab') }}" "$DATA_DIR"
chmod -R 750 "$DATA_DIR"

# Start the service
echo "Starting ${SERVICE_NAME} service..."
docker-compose up -d

# Wait for service to start
sleep 30

# Verify service is running
if docker ps | grep -q "${CONTAINER_NAME}"; then
    echo -e "${GREEN}Service started successfully${NC}"
else
    echo -e "${RED}ERROR: Service failed to start!${NC}"
    exit 1
fi

# Verify data integrity
echo "Verifying data integrity..."
if [ -d "$DATA_DIR" ] && [ "$(ls -A "$DATA_DIR")" ]; then
    echo -e "${GREEN}Data restore completed successfully${NC}"
else
    echo -e "${RED}ERROR: Data restore failed!${NC}"
    exit 1
fi

echo -e "${GREEN}Restore completed successfully at $(date)${NC}" 