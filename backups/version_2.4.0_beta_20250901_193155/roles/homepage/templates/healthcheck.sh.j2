#!/bin/bash

# Homepage Health Check Script
# Performs comprehensive health checks for Homepage

set -e

# Configuration
CONTAINER_NAME="{{ homepage_container_name }}"
PORT="{{ homepage_port }}"
API_BASE="http://{{ ansible_default_ipv4.address }}:$PORT/api"
TIMEOUT=30

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}================================${NC}"
}

# Function to check if container is running
check_container() {
    if docker ps --format "table {{.Names}}" | grep -q "$CONTAINER_NAME"; then
        return 0
    else
        return 1
    fi
}

# Function to check if port is listening
check_port() {
    if netstat -tuln 2>/dev/null | grep -q ":$PORT "; then
        return 0
    elif ss -tuln 2>/dev/null | grep -q ":$PORT "; then
        return 0
    else
        return 1
    fi
}

# Function to check HTTP endpoint
check_http() {
    local url="$1"
    local description="$2"
    
    if curl -s -f --max-time "$TIMEOUT" "$url" >/dev/null; then
        print_status "✅ $description: OK"
        return 0
    else
        print_error "❌ $description: FAILED"
        return 1
    fi
}

# Function to check API endpoint
check_api() {
    local endpoint="$1"
    local description="$2"
    
    if curl -s -f --max-time "$TIMEOUT" "$API_BASE/$endpoint" >/dev/null; then
        print_status "✅ $description: OK"
        return 0
    else
        print_error "❌ $description: FAILED"
        return 1
    fi
}

# Main health check function
main() {
    local exit_code=0
    
    print_header "Homepage Health Check"
    
    # Check 1: Container Status
    print_status "Checking container status..."
    if check_container; then
        print_status "✅ Container is running"
        
        # Get container details
        CONTAINER_ID=$(docker ps --filter "name=$CONTAINER_NAME" --format "{{.ID}}")
        CONTAINER_IMAGE=$(docker inspect --format='{{.Config.Image}}' "$CONTAINER_ID" 2>/dev/null || echo "Unknown")
        CONTAINER_STATUS=$(docker inspect --format='{{.State.Status}}' "$CONTAINER_ID" 2>/dev/null || echo "Unknown")
        
        print_status "Container ID: $CONTAINER_ID"
        print_status "Image: $CONTAINER_IMAGE"
        print_status "Status: $CONTAINER_STATUS"
    else
        print_error "❌ Container is not running"
        exit_code=1
    fi
    
    # Check 2: Port Listening
    print_status "Checking port $PORT..."
    if check_port; then
        print_status "✅ Port $PORT is listening"
    else
        print_error "❌ Port $PORT is not listening"
        exit_code=1
    fi
    
    # Check 3: Web Interface
    print_status "Checking web interface..."
    if check_http "http://{{ ansible_default_ipv4.address }}:$PORT" "Web Interface"; then
        print_status "✅ Web interface is accessible"
    else
        print_error "❌ Web interface is not accessible"
        exit_code=1
    fi
    
    # Check 4: API Health
    print_status "Checking API health..."
    if check_api "health" "API Health"; then
        print_status "✅ API health check passed"
    else
        print_error "❌ API health check failed"
        exit_code=1
    fi
    
    # Check 5: Services API
    print_status "Checking services API..."
    if check_api "services" "Services API"; then
        print_status "✅ Services API is accessible"
    else
        print_warning "⚠️  Services API is not accessible"
    fi
    
    # Check 6: Bookmarks API
    print_status "Checking bookmarks API..."
    if check_api "bookmarks" "Bookmarks API"; then
        print_status "✅ Bookmarks API is accessible"
    else
        print_warning "⚠️  Bookmarks API is not accessible"
    fi
    
    # Check 7: Weather API (optional)
    print_status "Checking weather API..."
    if curl -s --max-time "$TIMEOUT" "$API_BASE/weather" >/dev/null 2>&1; then
        print_status "✅ Weather API is accessible"
    else
        print_warning "⚠️  Weather API is not configured or accessible"
    fi
    
    # Check 8: Container Resources
    print_status "Checking container resources..."
    if check_container; then
        CONTAINER_ID=$(docker ps --filter "name=$CONTAINER_NAME" --format "{{.ID}}")
        
        # Check memory usage
        MEMORY_USAGE=$(docker stats --no-stream --format "table {{.MemUsage}}" "$CONTAINER_ID" 2>/dev/null | tail -n1 || echo "Unknown")
        print_status "Memory Usage: $MEMORY_USAGE"
        
        # Check CPU usage
        CPU_USAGE=$(docker stats --no-stream --format "table {{.CPUPerc}}" "$CONTAINER_ID" 2>/dev/null | tail -n1 || echo "Unknown")
        print_status "CPU Usage: $CPU_USAGE"
        
        # Check container logs for errors
        ERROR_COUNT=$(docker logs "$CONTAINER_ID" 2>&1 | grep -i "error\|exception\|fatal" | wc -l)
        if [ "$ERROR_COUNT" -gt 0 ]; then
            print_warning "⚠️  Found $ERROR_COUNT error(s) in container logs"
        else
            print_status "✅ No errors found in container logs"
        fi
    fi
    
    # Check 9: Configuration Files
    print_status "Checking configuration files..."
    CONFIG_DIR="{{ homepage_config_dir }}"
    REQUIRED_FILES=("config.yml" "services.yml" "bookmarks.yml")
    
    for file in "${REQUIRED_FILES[@]}"; do
        if [ -f "$CONFIG_DIR/$file" ]; then
            print_status "✅ $file exists"
        else
            print_error "❌ $file is missing"
            exit_code=1
        fi
    done
    
    # Check 10: Docker Compose
    print_status "Checking Docker Compose configuration..."
    DOCKER_DIR="{{ homepage_docker_dir }}"
    if [ -f "$DOCKER_DIR/docker-compose.yml" ]; then
        print_status "✅ docker-compose.yml exists"
        
        # Validate Docker Compose file
        if cd "$DOCKER_DIR" && docker-compose config >/dev/null 2>&1; then
            print_status "✅ docker-compose.yml is valid"
        else
            print_error "❌ docker-compose.yml is invalid"
            exit_code=1
        fi
    else
        print_error "❌ docker-compose.yml is missing"
        exit_code=1
    fi
    
    # Summary
    print_header "Health Check Summary"
    if [ $exit_code -eq 0 ]; then
        print_status "✅ All critical health checks passed"
        print_status "Homepage is healthy and operational"
    else
        print_error "❌ Some health checks failed"
        print_error "Please review the errors above and take corrective action"
    fi
    
    exit $exit_code
}

# Run health check
main "$@" 