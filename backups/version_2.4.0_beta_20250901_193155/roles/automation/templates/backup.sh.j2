#!/bin/bash
set -euo pipefail

BACKUP_DIR="{{ target_backup_dir }}"
SERVICE_NAME="{{ service_name }}"
SOURCE_PATH="{{ data_to_backup_path }}"
SOURCE_DIR="{{ data_to_backup_dir }}"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
BACKUP_FILE="${BACKUP_DIR}/${SERVICE_NAME}_${TIMESTAMP}.tar.gz"
RETENTION_DAYS="{{ automation_backup_retention }}"
LOG_FILE="{{ logs_dir }}/automation/backup.log"

log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "${LOG_FILE}"
}

# Test mode
if [ "${1:-}" == "test" ]; then
  log "Running backup in test mode for ${SERVICE_NAME}."
  if [ ! -d "${SOURCE_PATH}/${SOURCE_DIR}" ]; then
    log "ERROR: Source directory not found: ${SOURCE_PATH}/${SOURCE_DIR}"
    exit 1
  fi
  log "SUCCESS: Source directory found."
  exit 0
fi

# Create backup
mkdir -p "$BACKUP_DIR"
log "Starting backup for ${SERVICE_NAME}..."
tar -czf "${BACKUP_FILE}" -C "${SOURCE_PATH}" "${SOURCE_DIR}"
if [ $? -eq 0 ]; then
  log "Backup for ${SERVICE_NAME} created successfully at ${BACKUP_FILE}"
else
  log "ERROR: Backup for ${SERVICE_NAME} failed."
  exit 1
fi

# Cleanup old backups
log "Cleaning up old backups for ${SERVICE_NAME}..."
find "${BACKUP_DIR}" -name "${SERVICE_NAME}_*.tar.gz" -mtime +"${RETENTION_DAYS}" -exec rm {} \;
log "Cleanup complete." 