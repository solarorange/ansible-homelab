---
# Fing Monitoring Integration
# Integrates Fing with the existing monitoring stack

- name: Configure Telegraf for Fing metrics
  ansible.builtin.template:
    src: "telegraf.conf.j2"
    dest: "{{ docker_dir }}/monitoring/telegraf/conf.d/fing.conf"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0644"
  when: fing_telegraf_enabled | default(true)

- name: Configure Prometheus for Fing scraping
  ansible.builtin.template:
    src: "prometheus.yml.j2"
    dest: "{{ docker_dir }}/monitoring/prometheus/conf.d/fing.yml"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0644"
  when: fing_prometheus_enabled | default(true)

- name: Configure Loki for Fing logs
  ansible.builtin.template:
    src: "loki.yml.j2"
    dest: "{{ docker_dir }}/monitoring/loki/conf.d/fing.yml"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0644"
  when: fing_loki_enabled | default(true)

- name: Configure Promtail for Fing logs
  ansible.builtin.template:
    src: "promtail.yml.j2"
    dest: "{{ docker_dir }}/monitoring/promtail/conf.d/fing.yml"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0644"
  when: fing_loki_enabled | default(true)

- name: Create Grafana dashboard for Fing
  ansible.builtin.template:
    src: "grafana-dashboard.json.j2"
    dest: "{{ docker_dir }}/monitoring/grafana/provisioning/dashboards/fing.json"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0644"
  when: fing_grafana_enabled | default(true)

- name: Create Grafana datasource for Fing
  ansible.builtin.template:
    src: "grafana-datasource.yml.j2"
    dest: "{{ docker_dir }}/monitoring/grafana/provisioning/datasources/fing.yml"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0644"
  when: fing_grafana_enabled | default(true)

- name: Create Alertmanager configuration for Fing
  ansible.builtin.template:
    src: "alertmanager.yml.j2"
    dest: "{{ docker_dir }}/monitoring/alertmanager/conf.d/fing.yml"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0644"
  when: fing_alerting_enabled | default(true)

- name: Create Prometheus alert rules for Fing
  ansible.builtin.template:
    src: "prometheus-rules.yml.j2"
    dest: "{{ docker_dir }}/monitoring/prometheus/rules/fing.yml"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0644"
  when: fing_alerting_enabled | default(true)

- name: Create Fing monitoring script
  ansible.builtin.template:
    src: "monitoring.sh.j2"
    dest: "{{ docker_dir }}/fing/monitoring.sh"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0755"

- name: Create Fing metrics collection script
  ansible.builtin.template:
    src: "metrics.sh.j2"
    dest: "{{ docker_dir }}/fing/metrics.sh"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0755"

- name: Create Fing log collection script
  ansible.builtin.template:
    src: "logs.sh.j2"
    dest: "{{ docker_dir }}/fing/logs.sh"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0755"

- name: Create Fing performance monitoring script
  ansible.builtin.template:
    src: "performance.sh.j2"
    dest: "{{ docker_dir }}/fing/performance.sh"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0755"

- name: Create Fing network monitoring script
  ansible.builtin.template:
    src: "network-monitor.sh.j2"
    dest: "{{ docker_dir }}/fing/network-monitor.sh"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0755"

- name: Create Fing device monitoring script
  ansible.builtin.template:
    src: "device-monitor.sh.j2"
    dest: "{{ docker_dir }}/fing/device-monitor.sh"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0755"

- name: Create Fing alert monitoring script
  ansible.builtin.template:
    src: "alert-monitor.sh.j2"
    dest: "{{ docker_dir }}/fing/alert-monitor.sh"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0755"

- name: Create Fing monitoring cron jobs
  ansible.builtin.cron:
    name: "Fing metrics collection"
    minute: "*/5"
    job: "{{ docker_dir }}/fing/metrics.sh"
    user: "{{ vault_fing_user }}"
  when: fing_telegraf_enabled | default(true)

- name: Create Fing log collection cron
  ansible.builtin.cron:
    name: "Fing log collection"
    minute: "*/2"
    job: "{{ docker_dir }}/fing/logs.sh"
    user: "{{ vault_fing_user }}"
  when: fing_loki_enabled | default(true)

- name: Create Fing performance monitoring cron
  ansible.builtin.cron:
    name: "Fing performance monitoring"
    minute: "*/10"
    job: "{{ docker_dir }}/fing/performance.sh"
    user: "{{ vault_fing_user }}"
  when: fing_monitoring_enabled | default(true)

- name: Create Fing network monitoring cron
  ansible.builtin.cron:
    name: "Fing network monitoring"
    minute: "*/15"
    job: "{{ docker_dir }}/fing/network-monitor.sh"
    user: "{{ vault_fing_user }}"
  when: fing_monitoring_enabled | default(true)

- name: Create Fing device monitoring cron
  ansible.builtin.cron:
    name: "Fing device monitoring"
    minute: "*/30"
    job: "{{ docker_dir }}/fing/device-monitor.sh"
    user: "{{ vault_fing_user }}"
  when: fing_monitoring_enabled | default(true)

- name: Create Fing alert monitoring cron
  ansible.builtin.cron:
    name: "Fing alert monitoring"
    minute: "*/1"
    job: "{{ docker_dir }}/fing/alert-monitor.sh"
    user: "{{ vault_fing_user }}"
  when: fing_alerting_enabled | default(true)

- name: Restart monitoring services to apply configuration
  community.docker.docker_compose_v2:
    project_src: "{{ docker_dir }}/monitoring"
    state: present
    restarted: true
  when:
    - fing_monitoring_enabled | default(true)
    - (fing_telegraf_enabled | default(true) or fing_prometheus_enabled | default(true) or fing_loki_enabled | default(true) or fing_grafana_enabled | default(true))
  register: monitoring_restart_result

- name: Wait for monitoring services to be ready
  ansible.builtin.wait_for:
    host: "{{ ansible_default_ipv4.address }}"
    port: "{{ item }}"
    delay: 10
    timeout: 300
  loop:
    - 9090  # Prometheus
    - 3000  # Grafana
    - 3100  # Loki
    - 8125  # Telegraf
  when: monitoring_restart_result.changed

- name: Verify Fing metrics endpoint
  ansible.builtin.uri:
    url: "http://{{ ansible_default_ipv4.address }}:{{ fing_metrics_port }}/metrics"
    method: GET
    status_code: 200
    timeout: 10
  register: fing_metrics_check
  retries: 3
  delay: 10
  until: fing_metrics_check.status == 200
  when: fing_metrics_enabled | default(true)

- name: Verify Fing health endpoint
  ansible.builtin.uri:
    url: "http://{{ ansible_default_ipv4.address }}:{{ fing_web_port }}{{ fing_health_check_url }}"
    method: GET
    status_code: 200
    timeout: "{{ fing_health_check_timeout }}"
  register: fing_health_check
  retries: 3
  delay: 10
  until: fing_health_check.status == 200

- name: Test Fing API endpoint
  ansible.builtin.uri:
    url: "http://{{ ansible_default_ipv4.address }}:{{ fing_api_port }}/api/{{ fing_api_version }}/health"
    method: GET
    status_code: 200
    timeout: 10
  register: fing_api_check
  retries: 3
  delay: 10
  until: fing_api_check.status == 200
  when: fing_api_enabled | default(true)

- name: Create Fing monitoring summary
  ansible.builtin.debug:
    msg: |
      Fing Monitoring Integration Complete:

      Metrics Collection:
      - Telegraf: {{ fing_telegraf_enabled | default(true) }}
      - Prometheus: {{ fing_prometheus_enabled | default(true) }}
      - Metrics Port: {{ fing_metrics_port }}
      - Metrics Endpoint: {{ fing_metrics_check.status | default('N/A') }}

      Log Aggregation:
      - Loki: {{ fing_loki_enabled | default(true) }}
      - Promtail: {{ fing_loki_enabled | default(true) }}
      - Log Level: {{ fing_log_level }}
      - Log Format: {{ fing_log_format }}

      Visualization:
      - Grafana: {{ fing_grafana_enabled | default(true) }}
      - Dashboard: {{ docker_dir }}/monitoring/grafana/provisioning/dashboards/fing.json
      - Datasource: {{ docker_dir }}/monitoring/grafana/provisioning/datasources/fing.yml

      Alerting:
      - Alertmanager: {{ fing_alerting_enabled | default(true) }}
      - Prometheus Rules: {{ docker_dir }}/monitoring/prometheus/rules/fing.yml
      - Alert Provider: {{ fing_alerting_provider }}
      - Webhook: {{ fing_alerting_webhook }}

      Health Checks:
      - Web Health: {{ fing_health_check.status | default('N/A') }}
      - API Health: {{ fing_api_check.status | default('N/A') }}
      - Metrics Health: {{ fing_metrics_check.status | default('N/A') }}

      Monitoring Scripts:
      - Metrics Collection: {{ docker_dir }}/fing/metrics.sh
      - Log Collection: {{ docker_dir }}/fing/logs.sh
      - Performance Monitoring: {{ docker_dir }}/fing/performance.sh
      - Network Monitoring: {{ docker_dir }}/fing/network-monitor.sh
      - Device Monitoring: {{ docker_dir }}/fing/device-monitor.sh
      - Alert Monitoring: {{ docker_dir }}/fing/alert-monitor.sh

      Cron Jobs:
      - Metrics Collection: Every 5 minutes
      - Log Collection: Every 2 minutes
      - Performance Monitoring: Every 10 minutes
      - Network Monitoring: Every 15 minutes
      - Device Monitoring: Every 30 minutes
      - Alert Monitoring: Every minute

      Access URLs:
      - Grafana Dashboard: https://grafana.{{ domain }}/d/fing
      - Prometheus Targets: https://prometheus.{{ domain }}/targets
      - Loki Logs: https://loki.{{ domain }}
      - Alertmanager: https://alerts.{{ domain }}

      Next Steps:
      1. Access Grafana dashboard for Fing metrics
      2. Configure alerting rules in Alertmanager
      3. Set up log queries in Loki
      4. Monitor device discovery and network status
      5. Configure custom dashboards and alerts
