#!/bin/bash
# Paperless-ngx Health Check Script
# Generated by Ansible - Do not edit manually

set -e

# Configuration
SERVICE_NAME="paperless-ngx"
CONTAINER_NAME="{{ paperless_ngx_container_name }}"
HEALTH_URL="http://{{ ansible_default_ipv4.address }}:{{ paperless_ngx_web_port }}{{ paperless_ngx_health_check_url }}"
TIMEOUT="{{ paperless_ngx_health_check_timeout }}"
RETRIES="{{ paperless_ngx_health_check_retries }}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# Check if container is running
check_container() {
    log "Checking if container $CONTAINER_NAME is running..."
    
    if docker ps --format "table {{.Names}}" | grep -q "^$CONTAINER_NAME$"; then
        log "${GREEN}✓ Container $CONTAINER_NAME is running${NC}"
        return 0
    else
        log "${RED}✗ Container $CONTAINER_NAME is not running${NC}"
        return 1
    fi
}

# Check container health status
check_health() {
    log "Checking container health status..."
    
    HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' $CONTAINER_NAME 2>/dev/null || echo "none")
    
    if [ "$HEALTH_STATUS" = "healthy" ]; then
        log "${GREEN}✓ Container health status: $HEALTH_STATUS${NC}"
        return 0
    elif [ "$HEALTH_STATUS" = "starting" ]; then
        log "${YELLOW}⚠ Container health status: $HEALTH_STATUS (still starting)${NC}"
        return 0
    else
        log "${RED}✗ Container health status: $HEALTH_STATUS${NC}"
        return 1
    fi
}

# Check web interface
check_web_interface() {
    log "Checking web interface at $HEALTH_URL..."
    
    for i in $(seq 1 $RETRIES); do
        if curl -f -s --max-time $TIMEOUT "$HEALTH_URL" > /dev/null 2>&1; then
            log "${GREEN}✓ Web interface is responding${NC}"
            return 0
        else
            if [ $i -lt $RETRIES ]; then
                log "${YELLOW}⚠ Web interface not responding (attempt $i/$RETRIES), retrying...${NC}"
                sleep 2
            else
                log "${RED}✗ Web interface not responding after $RETRIES attempts${NC}"
                return 1
            fi
        fi
    done
}

# Check API endpoint
check_api() {
    log "Checking API endpoint..."
    
    API_URL="http://{{ ansible_default_ipv4.address }}:{{ paperless_ngx_web_port }}/api/"
    
    if curl -f -s --max-time $TIMEOUT "$API_URL" > /dev/null 2>&1; then
        log "${GREEN}✓ API endpoint is responding${NC}"
        return 0
    else
        log "${RED}✗ API endpoint not responding${NC}"
        return 1
    fi
}

# Check database connectivity
check_database() {
    log "Checking database connectivity..."
    
    # Check if we can connect to the database through the container
    if docker exec $CONTAINER_NAME python -c "
import os
import django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'paperless.settings')
django.setup()
from django.db import connection
connection.ensure_connection()
print('Database connection successful')
" 2>/dev/null; then
        log "${GREEN}✓ Database connectivity is working${NC}"
        return 0
    else
        log "${RED}✗ Database connectivity failed${NC}"
        return 1
    fi
}

# Check Redis connectivity
check_redis() {
    log "Checking Redis connectivity..."
    
    REDIS_HOST="{{ paperless_ngx_redis_host }}"
    REDIS_PORT="{{ paperless_ngx_redis_port }}"
    
    if docker exec $CONTAINER_NAME redis-cli -h $REDIS_HOST -p $REDIS_PORT ping 2>/dev/null | grep -q "PONG"; then
        log "${GREEN}✓ Redis connectivity is working${NC}"
        return 0
    else
        log "${RED}✗ Redis connectivity failed${NC}"
        return 1
    fi
}

# Check disk space
check_disk_space() {
    log "Checking disk space..."
    
    # Get the data directory
    DATA_DIR="{{ data_dir }}/paperless-ngx"
    
    if [ -d "$DATA_DIR" ]; then
        AVAILABLE_SPACE=$(df "$DATA_DIR" | awk 'NR==2 {print $4}')
        AVAILABLE_GB=$((AVAILABLE_SPACE / 1024 / 1024))
        
        if [ $AVAILABLE_GB -gt 10 ]; then
            log "${GREEN}✓ Sufficient disk space available: ${AVAILABLE_GB}GB${NC}"
            return 0
        else
            log "${YELLOW}⚠ Low disk space: ${AVAILABLE_GB}GB available${NC}"
            return 1
        fi
    else
        log "${RED}✗ Data directory $DATA_DIR does not exist${NC}"
        return 1
    fi
}

# Check log files
check_logs() {
    log "Checking log files..."
    
    LOG_DIR="{{ logs_dir }}/paperless-ngx"
    
    if [ -d "$LOG_DIR" ]; then
        # Check if log files are being written to
        RECENT_LOGS=$(find "$LOG_DIR" -name "*.log" -mtime -1 2>/dev/null | wc -l)
        
        if [ $RECENT_LOGS -gt 0 ]; then
            log "${GREEN}✓ Log files are being updated${NC}"
            return 0
        else
            log "${YELLOW}⚠ No recent log files found${NC}"
            return 1
        fi
    else
        log "${RED}✗ Log directory $LOG_DIR does not exist${NC}"
        return 1
    fi
}

# Main health check function
main() {
    log "Starting health check for $SERVICE_NAME..."
    
    local exit_code=0
    
    # Run all checks
    check_container || exit_code=1
    check_health || exit_code=1
    check_web_interface || exit_code=1
    check_api || exit_code=1
    check_database || exit_code=1
    check_redis || exit_code=1
    check_disk_space || exit_code=1
    check_logs || exit_code=1
    
    # Summary
    if [ $exit_code -eq 0 ]; then
        log "${GREEN}✓ All health checks passed for $SERVICE_NAME${NC}"
    else
        log "${RED}✗ Some health checks failed for $SERVICE_NAME${NC}"
    fi
    
    exit $exit_code
}

# Handle command line arguments
case "${1:-}" in
    "container")
        check_container
        ;;
    "health")
        check_health
        ;;
    "web")
        check_web_interface
        ;;
    "api")
        check_api
        ;;
    "database")
        check_database
        ;;
    "redis")
        check_redis
        ;;
    "disk")
        check_disk_space
        ;;
    "logs")
        check_logs
        ;;
    "all"|"")
        main
        ;;
    *)
        echo "Usage: $0 [container|health|web|api|database|redis|disk|logs|all]"
        echo "  container  - Check if container is running"
        echo "  health     - Check container health status"
        echo "  web        - Check web interface"
        echo "  api        - Check API endpoint"
        echo "  database   - Check database connectivity"
        echo "  redis      - Check Redis connectivity"
        echo "  disk       - Check disk space"
        echo "  logs       - Check log files"
        echo "  all        - Run all checks (default)"
        exit 1
        ;;
esac 