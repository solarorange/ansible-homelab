---
# Media Stack Deployment Validation
# Post-deployment validation tasks for media stack

- name: Validate Media Stack deployment
  block:
    - name: Verify media stack service health
      ansible.builtin.command: "{{ config_dir }}/media-health.sh"
      register: health_check
      changed_when: false
      retries: 3
      delay: 30
      until: health_check.rc == 0

    - name: Verify downloader service connectivity
      ansible.builtin.uri:
        url: "http://{{ ansible_default_ipv4.address }}:{{ item.value.port }}{{ item.value.healthcheck.test[2] }}"
        method: GET
        status_code: 200
      loop: "{{ media_downloaders | dict2items }}"
      when: item.value.enabled | default(false)
      register: downloader_connectivity_check
      changed_when: false

    - name: Verify ARR service connectivity
      ansible.builtin.uri:
        url: "http://{{ ansible_default_ipv4.address }}:{{ item.value.port }}/health"
        method: GET
        status_code: 200
      loop: "{{ media_arr_services | dict2items }}"
      when: item.value.enabled | default(false)
      register: arr_connectivity_check
      changed_when: false

    - name: Verify media player connectivity
      ansible.builtin.uri:
        url: "http://{{ ansible_default_ipv4.address }}:{{ item.value.port }}/health"
        method: GET
        status_code: 200
      loop: "{{ media_players | dict2items }}"
      when: item.value.enabled | default(false)
      register: player_connectivity_check
      changed_when: false

    - name: Verify media stack monitoring integration
      ansible.builtin.uri:
        url: "http://{{ ansible_default_ipv4.address }}:{{ prometheus_port | default(9090) }}/api/v1/targets"
        method: GET
        status_code: 200
      register: monitoring_check
      changed_when: false
      when: media_monitoring_enabled | default(true)

    - name: Verify media stack backup configuration
      ansible.builtin.stat:
        path: "{{ backup_dir }}/media"
      register: backup_check
      when: media_backup_enabled | default(true)

    - name: Verify media stack security configuration
      ansible.builtin.stat:
        path: "/etc/fail2ban/jail.d/media-stack.conf"
      register: security_check
      when: media_fail2ban_enabled | default(true)

    - name: Verify media stack homepage integration
      ansible.builtin.stat:
        path: "{{ homepage_config_dir }}/services"
      register: homepage_check
      when: media_homepage_enabled | default(true)

    - name: Verify media stack alerting configuration
      ansible.builtin.stat:
        path: "{{ alertmanager_config_dir }}/media-stack.yml"
      register: alerting_check
      when: media_alerting_enabled | default(true)

    - name: Check media stack resource usage
      ansible.builtin.shell: |
        echo "CPU Usage: $(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1)%"
        echo "Memory Usage: $(free | grep Mem | awk '{printf "%.2f%%", $3/$2 * 100.0}')"
        echo "Disk Usage: $(df -h {{ data_dir }} | awk 'NR==2 {print $5}')"
      register: resource_check
      changed_when: false

    - name: Verify media stack log aggregation
      ansible.builtin.uri:
        url: "http://{{ ansible_default_ipv4.address }}:{{ loki_port | default(3100) }}/ready"
        method: GET
        status_code: 200
      register: log_check
      changed_when: false
      when: media_loki_enabled | default(true)

    - name: Verify media stack metrics collection
      ansible.builtin.uri:
        url: "http://{{ ansible_default_ipv4.address }}:{{ prometheus_port | default(9090) }}/api/v1/query?query=up"
        method: GET
        status_code: 200
      register: metrics_check
      changed_when: false
      when: media_prometheus_enabled | default(true)

    - name: Verify media stack service dependencies
      ansible.builtin.shell: |
        cd {{ docker_dir }}/media
        docker-compose ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"
      register: service_status
      changed_when: false

    - name: Verify media stack network connectivity
      ansible.builtin.shell: |
        docker network ls | grep {{ media_network_name }}
      register: network_check
      changed_when: false

    - name: Verify media stack volume mounts
      ansible.builtin.shell: |
        docker volume ls | grep media
      register: volume_check
      changed_when: false

    - name: Verify media stack configuration files
      ansible.builtin.stat:
        path: "{{ item }}"
      register: config_file_check
      loop:
        - "{{ docker_dir }}/media/docker-compose.yml"
        - "{{ config_dir }}/media-health.sh"
        - "{{ config_dir }}/media-manage.sh"
        - "{{ config_dir }}/media-backup.sh"

    - name: Verify media stack permissions
      ansible.builtin.shell: |
        ls -la {{ data_dir }}/media
        ls -la {{ docker_dir }}/media
        ls -la {{ logs_dir }}/media
      register: permission_check
      changed_when: false

    - name: Generate media stack deployment report
      ansible.builtin.template:
        src: media-deployment-report.md.j2
        dest: "{{ config_dir }}/media/media-deployment-report.md"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "0644"

    - name: Display media stack deployment summary
      ansible.builtin.debug:
        msg: |
          Media Stack Deployment Validation Complete:

          Health Check: {{ health_check.rc == 0 | ternary('PASSED', 'FAILED') }}
          Downloader Services: {{ downloader_connectivity_check.results | length }} verified
          ARR Services: {{ arr_connectivity_check.results | length }} verified
          Media Players: {{ player_connectivity_check.results | length }} verified
          Monitoring: {{ monitoring_check.status == 200 | ternary('CONNECTED', 'DISCONNECTED') }}
          Backup: {{ backup_check.stat.exists | ternary('CONFIGURED', 'NOT CONFIGURED') }}
          Security: {{ security_check.stat.exists | ternary('ENABLED', 'DISABLED') }}
          Homepage: {{ homepage_check.stat.exists | ternary('INTEGRATED', 'NOT INTEGRATED') }}
          Alerting: {{ alerting_check.stat.exists | ternary('CONFIGURED', 'NOT CONFIGURED') }}

          Resource Usage:
          {{ resource_check.stdout }}

          Service Status:
          {{ service_status.stdout }}

          Next Steps:
          1. Configure individual media services
          2. Set up indexers in Prowlarr
          3. Configure download clients
          4. Import media libraries
          5. Set up monitoring dashboards
          6. Configure backup schedules
          7. Test alerting notifications

  tags: [media, validation]
