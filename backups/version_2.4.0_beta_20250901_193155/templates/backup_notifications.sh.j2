#!/bin/bash

# Backup Notification Script
# Integrates with existing monitoring stack (Grafana, Alertmanager, Loki)

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LOG_DIR="$SCRIPT_DIR/logs"
STATUS_DIR="$SCRIPT_DIR/status"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_DIR/notifications.log"
}

# Configuration
ALERTMANAGER_URL="http://alertmanager:9093"
GRAFANA_URL="http://grafana:3000"
LOKI_URL="http://loki:3100"
PROMETHEUS_URL="http://prometheus:9090"

# Notification types
NOTIFICATION_TYPE="$1"
shift
MESSAGE="$*"

# Send notification to Alertmanager
send_alertmanager_notification() {
    local severity="$1"
    local summary="$2"
    local description="$3"
    local labels="$4"
    
    local alert_data=$(cat <<EOF
{
  "alerts": [
    {
      "status": "firing",
      "labels": {
        "alertname": "backup_${NOTIFICATION_TYPE}",
        "severity": "${severity}",
        "service": "backup_orchestration",
        "instance": "$(hostname)",
        ${labels}
      },
      "annotations": {
        "summary": "${summary}",
        "description": "${description}",
        "dashboard": "https://grafana.{{ domain }}/d/backup-orchestration"
      },
      "startsAt": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)",
      "endsAt": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)"
    }
  ]
}
EOF
)
    
    log "Sending Alertmanager notification: ${summary}"
    curl -s -X POST "${ALERTMANAGER_URL}/api/v1/alerts" \
        -H "Content-Type: application/json" \
        -d "$alert_data" || log "Failed to send Alertmanager notification"
}

# Send log to Loki
send_loki_log() {
    local level="$1"
    local message="$2"
    local labels="$3"
    
    local timestamp=$(date +%s)000000000
    local log_data=$(cat <<EOF
{
  "streams": [
    {
      "stream": {
        "job": "backup_orchestration",
        "service": "notifications",
        "level": "${level}",
        "host": "$(hostname)",
        ${labels}
      },
      "values": [
        ["${timestamp}", "${message}"]
      ]
    }
  ]
}
EOF
)
    
    log "Sending log to Loki: ${message}"
    curl -s -X POST "${LOKI_URL}/loki/api/v1/push" \
        -H "Content-Type: application/json" \
        -d "$log_data" || log "Failed to send log to Loki"
}

# Send metric to Prometheus
send_prometheus_metric() {
    local metric_name="$1"
    local value="$2"
    local labels="$3"
    
    local metric_data="${metric_name}{${labels}} ${value}"
    
    log "Sending metric to Prometheus: ${metric_data}"
    curl -s -X POST "${PROMETHEUS_URL}/api/v1/import/prometheus" \
        -H "Content-Type: text/plain" \
        -d "$metric_data" || log "Failed to send metric to Prometheus"
}

# Handle different notification types
case $NOTIFICATION_TYPE in
    "orchestration_complete")
        local time_slot="$2"
        local summary="Backup orchestration completed for ${time_slot}"
        local description="All backups in time slot ${time_slot} have completed successfully"
        
        send_alertmanager_notification "info" "$summary" "$description" '"time_slot": "'${time_slot}'"'
        send_loki_log "info" "$summary" '"time_slot": "'${time_slot}'"'
        send_prometheus_metric "backup_orchestration_completed_total" "1" 'time_slot="'${time_slot}'"'
        ;;
    
    "backup_failed")
        local service="$2"
        local error="$3"
        local summary="Backup failed for ${service}"
        local description="Backup for ${service} failed with error: ${error}"
        
        send_alertmanager_notification "critical" "$summary" "$description" '"service": "'${service}'"'
        send_loki_log "error" "$summary - $error" '"service": "'${service}'"'
        send_prometheus_metric "backup_failures_total" "1" 'service="'${service}'"'
        ;;
    
    "backup_completed")
        local service="$2"
        local duration="$3"
        local size="$4"
        local summary="Backup completed for ${service}"
        local description="Backup for ${service} completed in ${duration} with size ${size}"
        
        send_alertmanager_notification "info" "$summary" "$description" '"service": "'${service}'"'
        send_loki_log "info" "$summary - Duration: ${duration}, Size: ${size}" '"service": "'${service}'"'
        send_prometheus_metric "backup_success_total" "1" 'service="'${service}'"'
        send_prometheus_metric "backup_duration_seconds" "$duration" 'service="'${service}'"'
        send_prometheus_metric "backup_size_bytes" "$size" 'service="'${service}'"'
        ;;
    
    "resource_throttling")
        local reason="$2"
        local summary="Resource throttling triggered"
        local description="Backup orchestration throttled due to: ${reason}"
        
        send_alertmanager_notification "warning" "$summary" "$description" '"reason": "'${reason}'"'
        send_loki_log "warning" "$summary - $reason" '"reason": "'${reason}'"'
        send_prometheus_metric "backup_throttling_total" "1" 'reason="'${reason}'"'
        ;;
    
    "dependency_failed")
        local service="$2"
        local dependency="$3"
        local summary="Dependency failed for ${service}"
        local description="Backup for ${service} failed because dependency ${dependency} failed"
        
        send_alertmanager_notification "warning" "$summary" "$description" '"service": "'${service}'", "dependency": "'${dependency}'"'
        send_loki_log "warning" "$summary - Dependency: ${dependency}" '"service": "'${service}'", "dependency": "'${dependency}'"'
        send_prometheus_metric "backup_dependency_failures_total" "1" 'service="'${service}'",dependency="'${dependency}'"'
        ;;
    
    "backup_timeout")
        local service="$2"
        local duration="$3"
        local summary="Backup timeout for ${service}"
        local description="Backup for ${service} timed out after ${duration} minutes"
        
        send_alertmanager_notification "critical" "$summary" "$description" '"service": "'${service}'"'
        send_loki_log "error" "$summary - Duration: ${duration} minutes" '"service": "'${service}'"'
        send_prometheus_metric "backup_timeouts_total" "1" 'service="'${service}'"'
        ;;
    
    "backup_started")
        local service="$2"
        local summary="Backup started for ${service}"
        local description="Backup process started for ${service}"
        
        send_loki_log "info" "$summary" '"service": "'${service}'"'
        send_prometheus_metric "backup_started_total" "1" 'service="'${service}'"'
        ;;
    
    "cleanup_completed")
        local deleted_count="$2"
        local freed_space="$3"
        local summary="Backup cleanup completed"
        local description="Cleaned up ${deleted_count} old backups, freed ${freed_space}"
        
        send_loki_log "info" "$summary - Deleted: ${deleted_count}, Freed: ${freed_space}" '"deleted_count": "'${deleted_count}'"'
        send_prometheus_metric "backup_cleanup_deleted_total" "$deleted_count" 'type="backup"'
        ;;
    
    "health_check")
        local status="$2"
        local details="$3"
        local summary="Backup health check: ${status}"
        local description="Backup system health check: ${details}"
        
        if [ "$status" = "healthy" ]; then
            send_alertmanager_notification "info" "$summary" "$description" '"status": "'${status}'"'
            send_loki_log "info" "$summary - $details" '"status": "'${status}'"'
        else
            send_alertmanager_notification "warning" "$summary" "$description" '"status": "'${status}'"'
            send_loki_log "warning" "$summary - $details" '"status": "'${status}'"'
        fi
        send_prometheus_metric "backup_health_status" "$([ "$status" = "healthy" ] && echo "1" || echo "0")" 'status="'${status}'"'
        ;;
    
    *)
        log "Unknown notification type: $NOTIFICATION_TYPE"
        send_loki_log "warning" "Unknown notification type: $NOTIFICATION_TYPE" '"type": "'${NOTIFICATION_TYPE}'"'
        exit 1
        ;;
esac

log "Notification sent successfully for type: $NOTIFICATION_TYPE" 