---
# COMMENT: Production-ready Ansible playbook for homelab infrastructure deployment
# COMMENT: Staged deployment with comprehensive infrastructure management and security validation
- name: "Production Homelab Infrastructure - Staged Deployment"
  hosts: "{{ target_hosts | default('all') }}"
  # COMMENT: Use explicit privilege escalation control for security
  become: true
  become_method: sudo
  become_user: root
  # COMMENT: Enable fact gathering for system validation
  gather_facts: true
  # COMMENT: Add deployment metadata for tracking and auditing
  vars:
    deployment_timestamp: "{{ ansible_date_time.iso8601 }}"
    deployment_user: "{{ ansible_user }}"
    deployment_environment: "{{ deployment_env | default('production') }}"
    # COMMENT: Define deployment stages for proper dependency management
    deployment_stages:
      stage1: [security, databases, storage, logging, certificate_management]
      stage2: [media, paperless_ngx, fing, utilities, automation]
      stage3: [homepage, grafana, gluetun, pinchflat]
    # COMMENT: Set validation timeouts and retries for production reliability
    validation_timeout: "{{ validation_timeout_seconds | default(300) }}"
    validation_retries: "{{ validation_retry_count | default(3) }}"
    # COMMENT: Security validation variables for production hardening
    security_validation_enabled: "{{ security_validation | default(true) }}"
    # COMMENT: Rollback configuration for production safety
    rollback_enabled: "{{ enable_rollback | default(true) }}"
    rollback_retention_hours: "{{ rollback_retention_hours | default(24) }}"

  # COMMENT: Configuration loading with proper error handling
  vars_files:
    - group_vars/all/common.yml
    - group_vars/all/roles.yml
    - group_vars/all/advanced_config.yml
    - group_vars/all/notifications.yml
    - group_vars/all/monitoring_thresholds.yml

  # COMMENT: Pre-flight checks and system preparation for production readiness
  pre_tasks:
    # COMMENT: Load advanced configuration with validation
    - name: "Load and validate advanced configuration"
      block:
        - name: "Load advanced configuration"
          ansible.builtin.include_vars: group_vars/all/advanced_config.yml
          tags: [always, config, validation]

        - name: "Validate advanced configuration variables"
          ansible.builtin.assert:
            that:
              - deployment_environment in ['production', 'staging', 'development']
              - validation_timeout > 0
              - validation_retries > 0
            fail_msg: |
              Invalid advanced configuration:
              - deployment_environment: {{ deployment_environment | default('NOT_SET') }}
              - validation_timeout: {{ validation_timeout | default('NOT_SET') }}
              - validation_retries: {{ validation_retries | default('NOT_SET') }}
          tags: [always, config, validation]

    # COMMENT: Load notification configuration with validation
    - name: "Load and validate notification configuration"
      block:
        - name: "Load notification configuration"
          ansible.builtin.include_vars: group_vars/all/notifications.yml
          tags: [always, config, notifications]

        - name: "Validate notification configuration"
          ansible.builtin.assert:
            that:
              - notification_webhook_url is defined or notification_webhook_url == ''
              - admin_email is defined and admin_email != ''
            fail_msg: |
              Invalid notification configuration:
              - admin_email: {{ admin_email | default('NOT_SET') }}
          tags: [always, config, notifications, validation]

    # COMMENT: Load monitoring thresholds with validation
    - name: "Load and validate monitoring thresholds"
      block:
        - name: "Load monitoring thresholds"
          ansible.builtin.include_vars: group_vars/all/monitoring_thresholds.yml
          tags: [always, config, monitoring]

        - name: "Validate monitoring thresholds"
          ansible.builtin.assert:
            that:
              - cpu_warning_threshold is defined and cpu_warning_threshold > 0
              - memory_warning_threshold is defined and memory_warning_threshold > 0
              - disk_warning_threshold is defined and disk_warning_threshold > 0
            fail_msg: |
              Invalid monitoring thresholds:
              - cpu_warning_threshold: {{ cpu_warning_threshold | default('NOT_SET') }}
              - memory_warning_threshold: {{ memory_warning_threshold | default('NOT_SET') }}
              - disk_warning_threshold: {{ disk_warning_threshold | default('NOT_SET') }}
          tags: [always, config, monitoring, validation]

    # COMMENT: Validate system prerequisites for production deployment
    - name: "Validate system prerequisites"
      block:
        - name: "Check system resources"
          ansible.builtin.assert:
            that:
              - (ansible_memtotal_mb | int) >= 4096
              - (ansible_processor_cores | int) >= 2
              - (ansible_mounts | selectattr('mount', 'equalto', '/') | map(attribute='size_available') | first | int) >= 40000000000
            fail_msg: |
              System prerequisites not met:
              - RAM: {{ ansible_memtotal_mb }}MB (minimum 4GB required)
              - CPU cores: {{ ansible_processor_cores }} (minimum 2 required)
              - Disk space: {{ (ansible_mounts | selectattr('mount', 'equalto', '/') | map(attribute='size_available') | first | int / 1000000000) | round(1) }}GB (minimum 40GB required)
          tags: [always, validation, prerequisites]

        - name: "Include advanced validation tasks"
          ansible.builtin.include_tasks: tasks/advanced_validation.yml
          tags: [always, validation, advanced]

    # COMMENT: Setup pre-flight tasks for deployment preparation
    - name: "Setup pre-flight deployment tasks"
      block:
        - name: "Include pre-flight tasks"
          ansible.builtin.include_tasks: tasks/pre_tasks.yml
          tags: [always, validation, pre_flight]

        - name: "Create deployment log entry"
          ansible.builtin.lineinfile:
            path: "/var/log/ansible-deployments.log"
            line: "{{ deployment_timestamp }} - Starting staged deployment by {{ deployment_user }} on {{ inventory_hostname }}"
            create: yes
            mode: '0644'
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
          delegate_to: localhost
          run_once: yes
          tags: [always, logging, pre_flight]

    # COMMENT: Create rollback point before deployment for production safety
    - name: "Create rollback point before deployment"
      block:
        - name: "Include advanced rollback tasks"
          ansible.builtin.include_tasks: tasks/advanced_rollback.yml
          tags: [rollback, point, safety]

        - name: "Log rollback point creation"
          ansible.builtin.lineinfile:
            path: "/var/log/ansible-deployments.log"
            line: "{{ deployment_timestamp }} - Rollback point created for {{ inventory_hostname }}"
            create: yes
            mode: '0644'
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
          delegate_to: localhost
          run_once: yes
          tags: [rollback, logging, safety]

  # COMMENT: Staged deployment with clear dependencies and error handling
  roles:
    # COMMENT: Stage 1: Infrastructure (must run first)
    - name: security
      tags: [security, infrastructure, stage1]
      when: security_enabled | default(true) | bool
      # COMMENT: Add error handling for critical infrastructure
      rescue:
        - name: "Handle security role failure"
          ansible.builtin.fail:
            msg: "Security role deployment failed - critical for production deployment"
          tags: [security, failure, critical]

    # COMMENT: Stage 2: Core Services (depends on infrastructure)
    - name: databases
      tags: [databases, core_services, stage2]
      when: databases_enabled | default(true) | bool
      # COMMENT: Add dependency validation
      pre_tasks:
        - name: "Validate database prerequisites"
          ansible.builtin.assert:
            that:
              - security_enabled | default(true) | bool
            fail_msg: "Security infrastructure must be deployed before databases"
          tags: [databases, validation, dependencies]

    - name: storage
      tags: [storage, core_services, stage2]
      when: storage_enabled | default(true) | bool
      # COMMENT: Add dependency validation
      pre_tasks:
        - name: "Validate storage prerequisites"
          ansible.builtin.assert:
            that:
              - security_enabled | default(true) | bool
            fail_msg: "Security infrastructure must be deployed before storage"
          tags: [storage, validation, dependencies]

    - name: logging
      tags: [logging, core_services, stage2]
      when: logging_enabled | default(true) | bool
      # COMMENT: Add dependency validation
      pre_tasks:
        - name: "Validate logging prerequisites"
          ansible.builtin.assert:
            that:
              - security_enabled | default(true) | bool
            fail_msg: "Security infrastructure must be deployed before logging"
          tags: [logging, validation, dependencies]

    - name: certificate_management
      tags: [certificates, core_services, stage2]
      when: certificate_management_enabled | default(true) | bool
      # COMMENT: Add dependency validation
      pre_tasks:
        - name: "Validate certificate management prerequisites"
          ansible.builtin.assert:
            that:
              - security_enabled | default(true) | bool
              - cloudflare_enabled | default(false) | bool
            fail_msg: "Security infrastructure and Cloudflare must be enabled before certificate management"
          tags: [certificates, validation, dependencies]

    # COMMENT: Stage 3: Applications (depends on core services)
    - name: media
      tags: [media, applications, stage3]
      when: media_enabled | default(true) | bool
      # COMMENT: Add dependency validation
      pre_tasks:
        - name: "Validate media services prerequisites"
          ansible.builtin.assert:
            that:
              - databases_enabled | default(true) | bool
              - storage_enabled | default(true) | bool
            fail_msg: "Database and storage services must be deployed before media services"
          tags: [media, validation, dependencies]

    - name: paperless_ngx
      tags: [paperless, applications, stage3]
      when: paperless_ngx_enabled | default(true) | bool
      # COMMENT: Add dependency validation
      pre_tasks:
        - name: "Validate paperless prerequisites"
          ansible.builtin.assert:
            that:
              - databases_enabled | default(true) | bool
              - storage_enabled | default(true) | bool
            fail_msg: "Database and storage services must be deployed before paperless"
          tags: [paperless, validation, dependencies]

    - name: fing
      tags: [fing, applications, stage3]
      when: fing_enabled | default(true) | bool
      # COMMENT: Add dependency validation
      pre_tasks:
        - name: "Validate fing prerequisites"
          ansible.builtin.assert:
            that:
              - security_enabled | default(true) | bool
            fail_msg: "Security infrastructure must be deployed before fing"
          tags: [fing, validation, dependencies]

    - name: utilities
      tags: [utilities, applications, stage3]
      when: utilities_enabled | default(true) | bool
      # COMMENT: Add dependency validation
      pre_tasks:
        - name: "Validate utilities prerequisites"
          ansible.builtin.assert:
            that:
              - security_enabled | default(true) | bool
            fail_msg: "Security infrastructure must be deployed before utilities"
          tags: [utilities, validation, dependencies]

    - name: automation
      tags: [automation, applications, stage3]
      when: automation_enabled | default(true) | bool
      # COMMENT: Add dependency validation
      pre_tasks:
        - name: "Validate automation prerequisites"
          ansible.builtin.assert:
            that:
              - security_enabled | default(true) | bool
              - logging_enabled | default(true) | bool
            fail_msg: "Security and logging infrastructure must be deployed before automation"
          tags: [automation, validation, dependencies]

    # COMMENT: Stage 3.5: Dashboard and Management (depends on applications)
    - name: homepage
      tags: [homepage, dashboard, stage3.5]
      when: homepage_enabled | default(true) | bool
      # COMMENT: Add dependency validation
      pre_tasks:
        - name: "Validate homepage prerequisites"
          ansible.builtin.assert:
            that:
              - media_enabled | default(true) | bool
              - utilities_enabled | default(true) | bool
            fail_msg: "Media and utility services must be deployed before homepage dashboard"
          tags: [homepage, validation, dependencies]

    # COMMENT: Individual Service Roles - Core Infrastructure
    - name: authentik
      tags: [authentik, authentication, stage1]
      when: authentik_enabled | default(true) | bool

    - name: traefik
      tags: [traefik, proxy, stage1]
      when: traefik_enabled | default(true) | bool

    - name: pihole
      tags: [pihole, dns, stage1]
      when: pihole_enabled | default(true) | bool

    - name: nginx_proxy_manager
      tags: [nginx_proxy_manager, proxy, stage1]
      when: nginx_proxy_manager_enabled | default(true) | bool

    # COMMENT: Individual Service Roles - Monitoring Stack
    - name: prometheus
      tags: [prometheus, monitoring, stage2]
      when: prometheus_enabled | default(true) | bool

    - name: grafana
      tags: [grafana, monitoring, stage2]
      when: grafana_enabled | default(true) | bool

    - name: loki
      tags: [loki, monitoring, stage2]
      when: loki_enabled | default(true) | bool

    - name: promtail
      tags: [promtail, monitoring, stage2]
      when: promtail_enabled | default(true) | bool

    - name: alertmanager
      tags: [alertmanager, monitoring, stage2]
      when: alertmanager_enabled | default(true) | bool

    - name: telegraf
      tags: [telegraf, monitoring, stage2]
      when: telegraf_enabled | default(true) | bool

    - name: influxdb
      tags: [influxdb, monitoring, stage2]
      when: influxdb_enabled | default(true) | bool

    - name: blackbox_exporter
      tags: [blackbox_exporter, monitoring, stage2]
      when: blackbox_exporter_enabled | default(true) | bool

    # COMMENT: Individual Service Roles - Security Services
    - name: crowdsec
      tags: [crowdsec, security, stage1]
      when: crowdsec_enabled | default(true) | bool

    - name: fail2ban
      tags: [fail2ban, security, stage1]
      when: fail2ban_enabled | default(true) | bool

    - name: vault
      tags: [vault, security, stage1]
      when: vault_enabled | default(true) | bool

    - name: wireguard
      tags: [wireguard, security, stage1]
      when: wireguard_enabled | default(true) | bool

    # COMMENT: Individual Service Roles - Media Services
    - name: plex
      tags: [plex, media, stage3]
      when: plex_enabled | default(true) | bool

    - name: jellyfin
      tags: [jellyfin, media, stage3]
      when: jellyfin_enabled | default(true) | bool

    - name: emby
      tags: [emby, media, stage3]
      when: emby_enabled | default(true) | bool

    - name: sonarr
      tags: [sonarr, media, stage3]
      when: sonarr_enabled | default(true) | bool

    - name: radarr
      tags: [radarr, media, stage3]
      when: radarr_enabled | default(true) | bool

    - name: lidarr
      tags: [lidarr, media, stage3]
      when: lidarr_enabled | default(true) | bool

    - name: readarr
      tags: [readarr, media, stage3]
      when: readarr_enabled | default(true) | bool

    - name: prowlarr
      tags: [prowlarr, media, stage3]
      when: prowlarr_enabled | default(true) | bool

    - name: bazarr
      tags: [bazarr, media, stage3]
      when: bazarr_enabled | default(true) | bool

    - name: sabnzbd
      tags: [sabnzbd, media, stage3]
      when: sabnzbd_enabled | default(true) | bool

    - name: qbittorrent
      tags: [qbittorrent, media, stage3]
      when: qbittorrent_enabled | default(true) | bool

    - name: deluge
      tags: [deluge, media, stage3]
      when: deluge_enabled | default(true) | bool

    - name: transmission
      tags: [transmission, media, stage3]
      when: transmission_enabled | default(true) | bool

    - name: rtorrent
      tags: [rtorrent, media, stage3]
      when: rtorrent_enabled | default(true) | bool

    - name: tdarr
      tags: [tdarr, media, stage3]
      when: tdarr_enabled | default(true) | bool

    - name: unmanic
      tags: [unmanic, media, stage3]
      when: unmanic_enabled | default(true) | bool

    - name: overseerr
      tags: [overseerr, media, stage3]
      when: overseerr_enabled | default(true) | bool

    - name: tautulli
      tags: [tautulli, media, stage3]
      when: tautulli_enabled | default(true) | bool

    - name: immich
      tags: [immich, media, stage3]
      when: immich_enabled | default(true) | bool

    - name: calibre
      tags: [calibre, media, stage3]
      when: calibre_web_enabled | default(true) | bool

    - name: audiobookshelf
      tags: [audiobookshelf, media, stage3]
      when: audiobookshelf_enabled | default(true) | bool

    - name: komga
      tags: [komga, media, stage3]
      when: komga_enabled | default(true) | bool

    - name: ersatztv
      tags: [ersatztv, media, stage3]
      when: ersatztv_enabled | default(true) | bool

    # COMMENT: Individual Service Roles - Database Services
    - name: postgresql
      tags: [postgresql, database, stage2]
      when: postgresql_enabled | default(true) | bool

    - name: mariadb
      tags: [mariadb, database, stage2]
      when: mariadb_enabled | default(true) | bool

    - name: redis
      tags: [redis, database, stage2]
      when: redis_enabled | default(true) | bool

    - name: elasticsearch
      tags: [elasticsearch, database, stage2]
      when: elasticsearch_enabled | default(true) | bool

    # COMMENT: Individual Service Roles - Storage Services
    - name: nextcloud
      tags: [nextcloud, storage, stage2]
      when: nextcloud_enabled | default(true) | bool

    - name: samba
      tags: [samba, storage, stage2]
      when: samba_enabled | default(true) | bool

    - name: syncthing
      tags: [syncthing, storage, stage2]
      when: syncthing_enabled | default(true) | bool

    # COMMENT: Individual Service Roles - Development Services
    - name: gitlab
      tags: [gitlab, development, stage3]
      when: gitlab_enabled | default(true) | bool

    - name: harbor
      tags: [harbor, development, stage3]
      when: harbor_enabled | default(true) | bool

    - name: minio
      tags: [minio, development, stage3]
      when: minio_enabled | default(true) | bool

    - name: paperless
      tags: [paperless, development, stage3]
      when: paperless_enabled | default(true) | bool

    - name: bookstack
      tags: [bookstack, development, stage3]
      when: bookstack_enabled | default(true) | bool

    - name: filebrowser
      tags: [filebrowser, development, stage3]
      when: filebrowser_enabled | default(true) | bool

    - name: linkwarden
      tags: [linkwarden, development, stage3]
      when: linkwarden_enabled | default(true) | bool

    - name: vaultwarden
      tags: [vaultwarden, development, stage3]
      when: vaultwarden_enabled | default(true) | bool

    - name: code_server
      tags: [code_server, development, stage3]
      when: code_server_enabled | default(true) | bool

    - name: dumbassets
      tags: [dumbassets, development, stage3]
      when: dumbassets_enabled | default(true) | bool

    # COMMENT: Individual Service Roles - Automation Services
    - name: portainer
      tags: [portainer, automation, stage3]
      when: portainer_enabled | default(true) | bool

    - name: watchtower
      tags: [watchtower, automation, stage3]
      when: watchtower_enabled | default(true) | bool

    - name: homeassistant
      tags: [homeassistant, automation, stage3]
      when: homeassistant_enabled | default(true) | bool

    - name: nodered
      tags: [nodered, automation, stage3]
      when: nodered_enabled | default(true) | bool

    - name: n8n
      tags: [n8n, automation, stage3]
      when: n8n_enabled | default(true) | bool

    - name: mosquitto
      tags: [mosquitto, automation, stage3]
      when: mosquitto_enabled | default(true) | bool

    # COMMENT: Individual Service Roles - Dashboard Services
    - name: dashdot
      tags: [dashdot, dashboard, stage3.5]
      when: dashdot_enabled | default(true) | bool

    - name: heimdall
      tags: [heimdall, dashboard, stage3.5]
      when: heimdall_enabled | default(true) | bool

    - name: homarr
      tags: [homarr, dashboard, stage3.5]
      when: homarr_enabled | default(true) | bool

    # COMMENT: Individual Service Roles - Utility Services
    - name: uptime_kuma
      tags: [uptime_kuma, utility, stage3]
      when: uptime_kuma_enabled | default(true) | bool

    - name: guacamole
      tags: [guacamole, utility, stage3]
      when: guacamole_enabled | default(true) | bool

    - name: requestrr
      tags: [requestrr, utility, stage3]
      when: requestrr_enabled | default(true) | bool

    - name: romm
      tags: [romm, utility, stage3]
      when: romm_enabled | default(true) | bool

    - name: fing
      tags: [fing, utility, stage3]
      when: fing_enabled | default(true) | bool

    - name: kopia
      tags: [kopia, utility, stage3]
      when: kopia_enabled | default(true) | bool

    # COMMENT: Additional Services with proper dependency management
    - name: gluetun
      tags: [gluetun, security, stage1]
      when: gluetun_enabled | default(true) | bool
      # COMMENT: Add dependency validation
      pre_tasks:
        - name: "Validate gluetun prerequisites"
          ansible.builtin.assert:
            that:
              - security_enabled | default(true) | bool
            fail_msg: "Security infrastructure must be deployed before gluetun"
          tags: [gluetun, validation, dependencies]

    - name: pinchflat
      tags: [pinchflat, media, stage3]
      when: pinchflat_enabled | default(true) | bool
      # COMMENT: Add dependency validation
      pre_tasks:
        - name: "Validate pinchflat prerequisites"
          ansible.builtin.assert:
            that:
              - media_enabled | default(true) | bool
            fail_msg: "Media services must be deployed before pinchflat"
          tags: [pinchflat, validation, dependencies]

  # COMMENT: Post-deployment validation and health checks
  post_tasks:
    # COMMENT: Validate deployment success with comprehensive health checks
    - name: "Validate deployment success"
      block:
        - name: "Wait for critical services to be ready"
          ansible.builtin.wait_for:
            port: "{{ item.port }}"
            host: "{{ item.host | default('127.0.0.1') }}"
            timeout: "{{ validation_timeout }}"
            delay: 10
          loop:
            - { port: 80, host: "127.0.0.1" }
            - { port: 443, host: "127.0.0.1" }
            - { port: 8080, host: "127.0.0.1" }
          tags: [validation, health_check, critical]

        - name: "Execute comprehensive health check validation"
          ansible.builtin.include_tasks: tasks/health_validation.yml
          tags: [validation, health_check, comprehensive]

        - name: "Validate SSL certificate deployment"
          ansible.builtin.uri:
            url: "https://{{ domain }}/"
            method: GET
            timeout: 30
            validate_certs: true
          register: ssl_validation
          retries: "{{ validation_retries }}"
          delay: 10
          until: ssl_validation.status == 200
          tags: [validation, ssl, critical]

        - name: "Validate monitoring stack functionality"
          ansible.builtin.include_tasks: tasks/monitoring_validation.yml
          when: monitoring_enabled | default(true) | bool
          tags: [validation, monitoring, critical]

      tags: [validation, post_deployment, critical]

    # COMMENT: Log deployment completion for audit trail
    - name: "Log deployment completion"
      ansible.builtin.lineinfile:
        path: "/var/log/ansible-deployments.log"
        line: "{{ deployment_timestamp }} - Staged deployment completed successfully on {{ inventory_hostname }}"
      delegate_to: localhost
      run_once: yes
      tags: [logging, completion]

    # COMMENT: Send deployment notification
    - name: "Send deployment completion notification"
      ansible.builtin.uri:
        url: "{{ notification_webhook_url }}"
        method: POST
        body_format: json
        body: |
          {
            "text": "Staged deployment completed successfully on {{ inventory_hostname }}",
            "timestamp": "{{ deployment_timestamp }}",
            "environment": "{{ deployment_environment }}",
            "stages_completed": "{{ deployment_stages.keys() | list | length }}"
          }
      when: notification_webhook_url is defined and notification_webhook_url != ''
      tags: [notification, completion]

  # COMMENT: Error handling and rollback procedures
  handlers:
    # COMMENT: Rollback handler for deployment failures
    - name: "rollback_staged_deployment"
      block:
        - name: "Execute staged rollback procedure"
          ansible.builtin.include_tasks: tasks/advanced_rollback.yml
          vars:
            rollback_timestamp: "{{ deployment_timestamp }}"
            rollback_reason: "Staged deployment failure detected"
            rollback_stage: "{{ failed_stage | default('unknown') }}"
          tags: [rollback, emergency, staged]

        - name: "Notify administrators of staged rollback"
          ansible.builtin.uri:
            url: "{{ notification_webhook_url }}"
            method: POST
            body_format: json
            body: |
              {
                "text": "Staged deployment rollback executed on {{ inventory_hostname }}",
                "timestamp": "{{ deployment_timestamp }}",
                "reason": "{{ rollback_reason }}",
                "failed_stage": "{{ rollback_stage }}"
              }
          when: notification_webhook_url != '' and notification_webhook_url is defined
          tags: [rollback, notification, staged]
      when: rollback_enabled | default(false) | bool

    # COMMENT: Restart critical services after configuration changes
    - name: "restart_critical_services"
      ansible.builtin.service:
        name: "{{ item }}"
        state: restarted
        enabled: yes
      loop: "{{ critical_services | default(['docker', 'traefik']) }}"
      tags: [services, restart, critical]

    # COMMENT: Validate configuration after changes
    - name: "validate_configuration"
      ansible.builtin.include_tasks: tasks/config_validation.yml
      tags: [validation, configuration]

  # COMMENT: Add proper error handling and notification
  # COMMENT: Ensure all tasks are idempotent and can run multiple times safely
  # COMMENT: All roles include proper error handling and rollback capabilities
