---
# COMMENT: Production-ready Backup Orchestration Configuration
# COMMENT: Comprehensive backup management with security and validation
# COMMENT: Generated by: {{ ansible_managed }}
# COMMENT: Timestamp: {{ ansible_date_time.iso8601 }}
# COMMENT: Environment: {{ deployment_environment | default('production') }}

# COMMENT: Backup root directory with security validation
backup_root: "{{ backup_dir | default('/var/backups/ansible-homelab') }}"

# COMMENT: Docker directory with path validation
docker_dir: "{{ docker_dir | default('/opt/services') }}"

# COMMENT: Username with security validation
username: "{{ username | default(ansible_user) }}"

# COMMENT: Backup priority levels and timing with production scheduling
priority_levels:
  critical:
    description: "Essential services that must backup first - production critical"
    time_slot: "{{ backup_critical_time | default('1:00 AM') }}"
    max_duration_minutes: 30
    retry_attempts: 3
    services:
      - authentik
      - traefik
      - vault
      - postgresql
      - mariadb
      - redis
      - pihole
  
  high:
    description: "Important services with moderate data - production important"
    time_slot: "{{ backup_high_time | default('2:00 AM') }}"
    max_duration_minutes: 45
    retry_attempts: 2
    services:
      - homeassistant
      - zigbee2mqtt
      - mosquitto
      - influxdb
      - telegraf
      - crowdsec
  
  media_core:
    description: "Core media management services - production important"
    time_slot: "{{ backup_media_core_time | default('3:00 AM') }}"
    max_duration_minutes: 60
    retry_attempts: 2
    services:
      - sonarr
      - radarr
      - lidarr
      - readarr
      - prowlarr
      - bazarr
  
  media_download:
    description: "Download and processing services - production standard"
    time_slot: "{{ backup_media_download_time | default('4:00 AM') }}"
    max_duration_minutes: 90
    retry_attempts: 1
    services:
      - qbittorrent
      - sabnzbd
      - tdarr
      - komga
      - audiobookshelf
  
  media_playback:
    description: "Media playback and streaming services - production standard"
    time_slot: "{{ backup_media_playback_time | default('5:00 AM') }}"
    max_duration_minutes: 75
    retry_attempts: 1
    services:
      - jellyfin
      - emby
      - tautulli
      - overseerr
  
  file_services:
    description: "File storage and sharing services - production standard"
    time_slot: "{{ backup_file_services_time | default('6:00 AM') }}"
    max_duration_minutes: 120
    retry_attempts: 1
    services:
      - nextcloud
      - samba
      - syncthing
      - paperless_ngx
      - immich
      - minio
  
  utilities:
    description: "Utility and monitoring services - production standard"
    time_slot: "{{ backup_utilities_time | default('7:00 AM') }}"
    max_duration_minutes: 60
    retry_attempts: 1
    services:
      - portainer
      - grafana
      - prometheus
      - loki
      - alertmanager
      - pihole
      - n8n

# COMMENT: Staggered backup schedules with production timing (in cron format)
schedules:
  # COMMENT: Critical services with minimal overlap
  authentik: "{{ backup_schedules.authentik | default('0 1 * * *') }}"
  traefik: "{{ backup_schedules.traefik | default('5 1 * * *') }}"
  vault: "{{ backup_schedules.vault | default('10 1 * * *') }}"
  postgresql: "{{ backup_schedules.postgresql | default('15 1 * * *') }}"
  mariadb: "{{ backup_schedules.mariadb | default('20 1 * * *') }}"
  redis: "{{ backup_schedules.redis | default('25 1 * * *') }}"
  
  # COMMENT: High priority services with staggered timing
  homeassistant: "{{ backup_schedules.homeassistant | default('0 2 * * *') }}"
  zigbee2mqtt: "{{ backup_schedules.zigbee2mqtt | default('5 2 * * *') }}"
  mosquitto: "{{ backup_schedules.mosquitto | default('10 2 * * *') }}"
  influxdb: "{{ backup_schedules.influxdb | default('15 2 * * *') }}"
  telegraf: "{{ backup_schedules.telegraf | default('20 2 * * *') }}"
  
  # COMMENT: Media core services with production scheduling
  sonarr: "{{ backup_schedules.sonarr | default('0 3 * * *') }}"
  radarr: "{{ backup_schedules.radarr | default('5 3 * * *') }}"
  lidarr: "{{ backup_schedules.lidarr | default('10 3 * * *') }}"
  readarr: "{{ backup_schedules.readarr | default('15 3 * * *') }}"
  prowlarr: "{{ backup_schedules.prowlarr | default('20 3 * * *') }}"
  bazarr: "{{ backup_schedules.bazarr | default('25 3 * * *') }}"
  
  # COMMENT: Media download services with extended timing
  qbittorrent: "{{ backup_schedules.qbittorrent | default('0 4 * * *') }}"
  sabnzbd: "{{ backup_schedules.sabnzbd | default('5 4 * * *') }}"
  tdarr: "{{ backup_schedules.tdarr | default('10 4 * * *') }}"
  komga: "{{ backup_schedules.komga | default('15 4 * * *') }}"
  audiobookshelf: "{{ backup_schedules.audiobookshelf | default('20 4 * * *') }}"
  
  # COMMENT: Media playback services with validation timing
  jellyfin: "{{ backup_schedules.jellyfin | default('0 5 * * *') }}"
  emby: "{{ backup_schedules.emby | default('5 5 * * *') }}"
  tautulli: "{{ backup_schedules.tautulli | default('10 5 * * *') }}"
  overseerr: "{{ backup_schedules.overseerr | default('15 5 * * *') }}"
  
  # COMMENT: File services with extended timing for large data
  nextcloud: "{{ backup_schedules.nextcloud | default('0 6 * * *') }}"
  samba: "{{ backup_schedules.samba | default('5 6 * * *') }}"
  syncthing: "{{ backup_schedules.syncthing | default('10 6 * * *') }}"
  paperless_ngx: "{{ backup_schedules.paperless_ngx | default('15 6 * * *') }}"
  immich: "{{ backup_schedules.immich | default('20 6 * * *') }}"
  
  # COMMENT: Utility services with monitoring timing
  portainer: "{{ backup_schedules.portainer | default('0 7 * * *') }}"
  grafana: "{{ backup_schedules.grafana | default('5 7 * * *') }}"
  prometheus: "{{ backup_schedules.prometheus | default('10 7 * * *') }}"
  loki: "{{ backup_schedules.loki | default('15 7 * * *') }}"
  alertmanager: "{{ backup_schedules.alertmanager | default('20 7 * * *') }}"
  pihole: "{{ backup_schedules.pihole | default('25 7 * * *') }}"

# COMMENT: Backup dependencies with production validation
dependencies:
  sonarr:
    depends_on: ["postgresql", "qbittorrent"]
    required: true
    timeout_minutes: 30
  radarr:
    depends_on: ["postgresql", "qbittorrent"]
    required: true
    timeout_minutes: 30
  lidarr:
    depends_on: ["postgresql", "qbittorrent"]
    required: true
    timeout_minutes: 30
  readarr:
    depends_on: ["postgresql", "qbittorrent"]
    required: true
    timeout_minutes: 30
  jellyfin:
    depends_on: ["postgresql", "sonarr", "radarr"]
    required: false
    timeout_minutes: 45
  emby:
    depends_on: ["postgresql", "sonarr", "radarr"]
    required: false
    timeout_minutes: 45
  nextcloud:
    depends_on: ["postgresql", "redis"]
    required: true
    timeout_minutes: 60
  paperless_ngx:
    depends_on: ["postgresql", "redis"]
    required: true
    timeout_minutes: 45

# COMMENT: Resource limits with production constraints
resource_limits:
  max_concurrent_backups: "{{ backup_resource_limits.max_concurrent_backups | default(3) }}"
  max_backup_duration_minutes: "{{ backup_resource_limits.max_backup_duration_minutes | default(180) }}"
  max_backup_size_gb: "{{ backup_resource_limits.max_backup_size_gb | default(100) }}"
  backup_timeout_minutes: "{{ backup_resource_limits.backup_timeout_minutes | default(240) }}"
  max_cpu_percent: "{{ backup_resource_limits.max_cpu_percent | default(80) }}"
  max_memory_percent: "{{ backup_resource_limits.max_memory_percent | default(85) }}"
  max_io_wait_percent: "{{ backup_resource_limits.max_io_wait_percent | default(70) }}"

# COMMENT: Resource thresholds with production monitoring
resource_thresholds:
  cpu_warning: "{{ backup_thresholds.cpu_warning | default(70) }}"
  cpu_critical: "{{ backup_thresholds.cpu_critical | default(85) }}"
  memory_warning: "{{ backup_thresholds.memory_warning | default(75) }}"
  memory_critical: "{{ backup_thresholds.memory_critical | default(85) }}"
  disk_warning: "{{ backup_thresholds.disk_warning | default(85) }}"
  disk_critical: "{{ backup_thresholds.disk_critical | default(95) }}"
  io_warning: "{{ backup_thresholds.io_warning | default(70) }}"
  io_critical: "{{ backup_thresholds.io_critical | default(85) }}"
  network_warning: "{{ backup_thresholds.network_warning | default(80) }}"
  network_critical: "{{ backup_thresholds.network_critical | default(90) }}"

# COMMENT: Backup retention with production policies
retention:
  daily: "{{ backup_retention.daily | default(7) }}"
  weekly: "{{ backup_retention.weekly | default(30) }}"
  monthly: "{{ backup_retention.monthly | default(365) }}"
  yearly: "{{ backup_retention.yearly | default(7) }}"
  critical_services_retention_days: "{{ backup_retention.critical_services_retention_days | default(90) }}"
  encryption_required: "{{ backup_retention.encryption_required | default(true) }}"
  compression_required: "{{ backup_retention.compression_required | default(true) }}"

# COMMENT: Monitoring and alerting with production integration
monitoring:
  enabled: "{{ backup_monitoring.enabled | default(true) }}"
  check_interval_minutes: "{{ backup_monitoring.check_interval_minutes | default(15) }}"
  alert_on_failure: "{{ backup_monitoring.alert_on_failure | default(true) }}"
  alert_on_timeout: "{{ backup_monitoring.alert_on_timeout | default(true) }}"
  alert_on_size_exceeded: "{{ backup_monitoring.alert_on_size_exceeded | default(true) }}"
  alert_on_dependency_failure: "{{ backup_monitoring.alert_on_dependency_failure | default(true) }}"
  alert_on_verification_failure: "{{ backup_monitoring.alert_on_verification_failure | default(true) }}"
  health_check_enabled: "{{ backup_monitoring.health_check_enabled | default(true) }}"
  metrics_collection: "{{ backup_monitoring.metrics_collection | default(true) }}"

# COMMENT: Notification settings with production security
notifications:
  email:
    enabled: "{{ backup_notifications.email.enabled | default(false) }}"
    smtp_host: "{{ vault_backup_smtp_host | default('') }}"
    smtp_port: "{{ backup_notifications.email.smtp_port | default(587) }}"
    smtp_username: "{{ vault_backup_smtp_username | default('') }}"
    # COMMENT: SECURITY: Use Ansible Vault for SMTP credentials - NEVER hardcode
    smtp_password: "{{ vault_backup_smtp_password | default('') }}"
    from_address: "{{ vault_backup_monitoring_email | default('backup-monitoring@' + domain) }}"
    to_address: "{{ vault_backup_admin_email | default('admin@' + domain) }}"
    tls_enabled: "{{ backup_notifications.email.tls_enabled | default(true) }}"
    tls_insecure_skip_verify: "{{ backup_notifications.email.tls_insecure_skip_verify | default(false) }}"
  
  webhook:
    enabled: "{{ backup_notifications.webhook.enabled | default(false) }}"
    url: "{{ vault_backup_webhook_url | default('') }}"
    method: "{{ backup_notifications.webhook.method | default('POST') }}"
    headers: "{{ backup_notifications.webhook.headers | default({}) }}"
    timeout_seconds: "{{ backup_notifications.webhook.timeout_seconds | default(30) }}"
  
  slack:
    enabled: "{{ backup_notifications.slack.enabled | default(false) }}"
    webhook_url: "{{ vault_backup_slack_webhook_url | default('') }}"
    channel: "{{ backup_notifications.slack.channel | default('#backups') }}"
    username: "{{ backup_notifications.slack.username | default('BackupBot') }}"
  
  telegram:
    enabled: "{{ backup_notifications.telegram.enabled | default(false) }}"
    bot_token: "{{ vault_backup_telegram_bot_token | default('') }}"
    chat_id: "{{ vault_backup_telegram_chat_id | default('') }}"

# COMMENT: Weekend backup schedule with production maintenance windows
weekend_schedule:
  saturday:
    start_time: "{{ backup_weekend_schedule.saturday.start_time | default('2:00 AM') }}"
    end_time: "{{ backup_weekend_schedule.saturday.end_time | default('10:00 AM') }}"
    extended_window: "{{ backup_weekend_schedule.saturday.extended_window | default(true) }}"
    maintenance_mode: "{{ backup_weekend_schedule.saturday.maintenance_mode | default(false) }}"
  
  sunday:
    start_time: "{{ backup_weekend_schedule.sunday.start_time | default('2:00 AM') }}"
    end_time: "{{ backup_weekend_schedule.sunday.end_time | default('8:00 AM') }}"
    extended_window: "{{ backup_weekend_schedule.sunday.extended_window | default(false) }}"
    maintenance_mode: "{{ backup_weekend_schedule.sunday.maintenance_mode | default(true) }}"

# COMMENT: Service-specific backup settings with production optimization
service_settings:
  postgresql:
    include_databases: "{{ backup_service_settings.postgresql.include_databases | default(['sonarr', 'radarr', 'lidarr', 'readarr', 'nextcloud', 'paperless_ngx']) }}"
    compression: "{{ backup_service_settings.postgresql.compression | default(true) }}"
    parallel_jobs: "{{ backup_service_settings.postgresql.parallel_jobs | default(2) }}"
    backup_format: "{{ backup_service_settings.postgresql.backup_format | default('custom') }}"
    include_globals: "{{ backup_service_settings.postgresql.include_globals | default(true) }}"
  
  mariadb:
    include_databases: "{{ backup_service_settings.mariadb.include_databases | default(['homeassistant', 'authentik']) }}"
    compression: "{{ backup_service_settings.mariadb.compression | default(true) }}"
    parallel_jobs: "{{ backup_service_settings.mariadb.parallel_jobs | default(2) }}"
    backup_format: "{{ backup_service_settings.mariadb.backup_format | default('sql') }}"
    single_transaction: "{{ backup_service_settings.mariadb.single_transaction | default(true) }}"
  
  redis:
    include_keys: "{{ backup_service_settings.redis.include_keys | default(['*']) }}"
    compression: "{{ backup_service_settings.redis.compression | default(false) }}"
    parallel_jobs: "{{ backup_service_settings.redis.parallel_jobs | default(1) }}"
    backup_format: "{{ backup_service_settings.redis.backup_format | default('rdb') }}"
    save_before_backup: "{{ backup_service_settings.redis.save_before_backup | default(true) }}"
  
  nextcloud:
    include_data: "{{ backup_service_settings.nextcloud.include_data | default(true) }}"
    include_config: "{{ backup_service_settings.nextcloud.include_config | default(true) }}"
    exclude_patterns: "{{ backup_service_settings.nextcloud.exclude_patterns | default(['*/cache/*', '*/tmp/*', '*/thumbnails/*']) }}"
    compression: "{{ backup_service_settings.nextcloud.compression | default(true) }}"
    parallel_jobs: "{{ backup_service_settings.nextcloud.parallel_jobs | default(4) }}"
  
  paperless_ngx:
    include_documents: "{{ backup_service_settings.paperless_ngx.include_documents | default(true) }}"
    include_media: "{{ backup_service_settings.paperless_ngx.include_media | default(true) }}"
    include_database: "{{ backup_service_settings.paperless_ngx.include_database | default(true) }}"
    compression: "{{ backup_service_settings.paperless_ngx.compression | default(true) }}"
    parallel_jobs: "{{ backup_service_settings.paperless_ngx.parallel_jobs | default(2) }}"
  
  jellyfin:
    include_libraries: "{{ backup_service_settings.jellyfin.include_libraries | default(true) }}"
    include_config: "{{ backup_service_settings.jellyfin.include_config | default(true) }}"
    exclude_patterns: "{{ backup_service_settings.jellyfin.exclude_patterns | default(['*/transcoding-temp/*', '*/cache/*']) }}"
    compression: "{{ backup_service_settings.jellyfin.compression | default(true) }}"
    parallel_jobs: "{{ backup_service_settings.jellyfin.parallel_jobs | default(3) }}"
  
  sonarr:
    include_database: "{{ backup_service_settings.sonarr.include_database | default(true) }}"
    include_config: "{{ backup_service_settings.sonarr.include_config | default(true) }}"
    include_downloads: "{{ backup_service_settings.sonarr.include_downloads | default(false) }}"
    compression: "{{ backup_service_settings.sonarr.compression | default(true) }}"
    parallel_jobs: "{{ backup_service_settings.sonarr.parallel_jobs | default(1) }}"
  
  radarr:
    include_database: "{{ backup_service_settings.radarr.include_database | default(true) }}"
    include_config: "{{ backup_service_settings.radarr.include_config | default(true) }}"
    include_downloads: "{{ backup_service_settings.radarr.include_downloads | default(false) }}"
    compression: "{{ backup_service_settings.radarr.compression | default(true) }}"
    parallel_jobs: "{{ backup_service_settings.radarr.parallel_jobs | default(1) }}"

# COMMENT: Backup verification settings with production validation
verification:
  enabled: "{{ backup_verification.enabled | default(true) }}"
  check_integrity: "{{ backup_verification.check_integrity | default(true) }}"
  check_permissions: "{{ backup_verification.check_permissions | default(true) }}"
  check_size: "{{ backup_verification.check_size | default(true) }}"
  verify_after_backup: "{{ backup_verification.verify_after_backup | default(true) }}"
  verify_schedule: "{{ backup_verification.verify_schedule | default('0 8 * * *') }}"  # Daily at 8 AM
  integrity_check_method: "{{ backup_verification.integrity_check_method | default('sha256') }}"
  sample_restore_test: "{{ backup_verification.sample_restore_test | default(false) }}"
  restore_test_frequency: "{{ backup_verification.restore_test_frequency | default('weekly') }}"

# COMMENT: Logging configuration with production standards
logging:
  level: "{{ backup_logging.level | default('INFO') }}"
  max_log_size_mb: "{{ backup_logging.max_log_size_mb | default(100) }}"
  max_log_files: "{{ backup_logging.max_log_files | default(10) }}"
  log_rotation: "{{ backup_logging.log_rotation | default('daily') }}"
  log_format: "{{ backup_logging.log_format | default('%(asctime)s - %(name)s - %(levelname)s - %(message)s') }}"
  structured_logging: "{{ backup_logging.structured_logging | default(true) }}"
  log_retention_days: "{{ backup_logging.log_retention_days | default(90) }}"

# COMMENT: Security configuration with production hardening
security:
  encryption_enabled: "{{ backup_security.encryption_enabled | default(true) }}"
  encryption_algorithm: "{{ backup_security.encryption_algorithm | default('AES-256-GCM') }}"
  encryption_key_rotation_days: "{{ backup_security.encryption_key_rotation_days | default(90) }}"
  access_control_enabled: "{{ backup_security.access_control_enabled | default(true) }}"
  backup_file_permissions: "{{ backup_security.backup_file_permissions | default('0600') }}"
  backup_directory_permissions: "{{ backup_security.backup_directory_permissions | default('0700') }}"
  network_isolation: "{{ backup_security.network_isolation | default(false) }}"
  audit_logging: "{{ backup_security.audit_logging | default(true) }}"

# COMMENT: Performance optimization with production tuning
performance:
  parallel_processing: "{{ backup_performance.parallel_processing | default(true) }}"
  max_parallel_jobs: "{{ backup_performance.max_parallel_jobs | default(4) }}"
  compression_level: "{{ backup_performance.compression_level | default(6) }}"
  buffer_size_mb: "{{ backup_performance.buffer_size_mb | default(64) }}"
  io_scheduler: "{{ backup_performance.io_scheduler | default('bfq') }}"
  cpu_affinity: "{{ backup_performance.cpu_affinity | default(false) }}"
  memory_limit_mb: "{{ backup_performance.memory_limit_mb | default(1024) }}"

# COMMENT: Disaster recovery configuration with production planning
disaster_recovery:
  enabled: "{{ backup_disaster_recovery.enabled | default(true) }}"
  offsite_backup_enabled: "{{ backup_disaster_recovery.offsite_backup_enabled | default(false) }}"
  offsite_backup_location: "{{ backup_disaster_recovery.offsite_backup_location | default('') }}"
  recovery_time_objective_hours: "{{ backup_disaster_recovery.recovery_time_objective_hours | default(24) }}"
  recovery_point_objective_hours: "{{ backup_disaster_recovery.recovery_point_objective_hours | default(1) }}"
  automated_recovery_testing: "{{ backup_disaster_recovery.automated_recovery_testing | default(false) }}"
  recovery_testing_frequency: "{{ backup_disaster_recovery.recovery_testing_frequency | default('monthly') }}" 