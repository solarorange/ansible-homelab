#!/bin/bash

# Service Configuration Validator
# This script validates service configurations before deployment

LOG_FILE="/var/log/service_config_validation.log"
CONFIG_DIR="/etc/ansible/service_management/configs"

log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

validate_docker_compose() {
    local service=$1
    local compose_file="$CONFIG_DIR/docker-compose/$service.yml"
    
    if [ ! -f "$compose_file" ]; then
        log "ERROR: Docker Compose file not found for service: $service"
        return 1
    fi
    
    # Validate docker-compose file syntax
    if ! docker-compose -f "$compose_file" config > /dev/null 2>&1; then
        log "ERROR: Invalid Docker Compose configuration for service: $service"
        return 1
    fi
    
    # Check for required environment variables
    if [ -f "$CONFIG_DIR/env/$service.env" ]; then
        while IFS='=' read -r key value; do
            if [[ ! "$key" =~ ^# ]] && [ ! -z "$key" ]; then
                if [ -z "$value" ]; then
                    log "ERROR: Empty value for required environment variable: $key in $service"
                    return 1
                fi
            fi
        done < "$CONFIG_DIR/env/$service.env"
    fi
    
    log "INFO: Docker Compose configuration valid for service: $service"
    return 0
}

validate_systemd_service() {
    local service=$1
    local service_file="/etc/systemd/system/$service.service"
    
    if [ ! -f "$service_file" ]; then
        log "ERROR: Systemd service file not found for service: $service"
        return 1
    }
    
    # Validate systemd service file
    if ! systemd-analyze verify "$service_file" > /dev/null 2>&1; then
        log "ERROR: Invalid Systemd service configuration for service: $service"
        return 1
    fi
    
    # Check for required dependencies
    local requires=$(grep -E "^Requires=|^After=" "$service_file" | cut -d'=' -f2)
    for dep in $requires; do
        if ! systemctl is-enabled "$dep" > /dev/null 2>&1; then
            log "ERROR: Required dependency $dep not enabled for service: $service"
            return 1
        fi
    done
    
    log "INFO: Systemd service configuration valid for service: $service"
    return 0
}

validate_nginx_config() {
    local service=$1
    local config_file="$CONFIG_DIR/nginx/$service.conf"
    
    if [ ! -f "$config_file" ]; then
        log "ERROR: Nginx configuration file not found for service: $service"
        return 1
    }
    
    # Validate nginx configuration
    if ! nginx -t -c "$config_file" > /dev/null 2>&1; then
        log "ERROR: Invalid Nginx configuration for service: $service"
        return 1
    fi
    
    log "INFO: Nginx configuration valid for service: $service"
    return 0
}

validate_traefik_config() {
    local service=$1
    local config_file="$CONFIG_DIR/traefik/$service.yml"
    
    if [ ! -f "$config_file" ]; then
        log "ERROR: Traefik configuration file not found for service: $service"
        return 1
    }
    
    # Validate YAML syntax
    if ! yq eval "$config_file" > /dev/null 2>&1; then
        log "ERROR: Invalid YAML syntax in Traefik configuration for service: $service"
        return 1
    }
    
    # Check for required fields
    local required_fields=("entryPoints" "http" "routers" "services")
    for field in "${required_fields[@]}"; do
        if ! yq eval ".$field" "$config_file" > /dev/null 2>&1; then
            log "ERROR: Missing required field '$field' in Traefik configuration for service: $service"
            return 1
        fi
    done
    
    log "INFO: Traefik configuration valid for service: $service"
    return 0
}

validate_service_config() {
    local service=$1
    local service_type=$2
    
    case $service_type in
        "docker")
            validate_docker_compose "$service"
            ;;
        "systemd")
            validate_systemd_service "$service"
            ;;
        "nginx")
            validate_nginx_config "$service"
            ;;
        "traefik")
            validate_traefik_config "$service"
            ;;
        *)
            log "ERROR: Unknown service type: $service_type for service: $service"
            return 1
            ;;
    esac
}

main() {
    # Create log file if it doesn't exist
    touch "$LOG_FILE"
    
    # Get list of services and their types from Ansible
    local services_file="/etc/ansible/service_management/services.json"
    
    if [ ! -f "$services_file" ]; then
        log "ERROR: Services configuration file not found"
        exit 1
    fi
    
    local validation_failed=()
    
    # Read services and their types from JSON
    while IFS= read -r line; do
        service=$(echo "$line" | jq -r '.name')
        type=$(echo "$line" | jq -r '.type')
        
        if [ ! -z "$service" ] && [ ! -z "$type" ]; then
            validate_service_config "$service" "$type"
            if [ $? -ne 0 ]; then
                validation_failed+=("$service")
            fi
        fi
    done < <(jq -c '.[]' "$services_file")
    
    if [ ${#validation_failed[@]} -gt 0 ]; then
        log "ERROR: Configuration validation failed for the following services: ${validation_failed[*]}"
        exit 1
    fi
    
    log "INFO: All service configurations are valid"
    exit 0
}

main 