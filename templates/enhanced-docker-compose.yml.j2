# COMMENT: Production-ready Enhanced Docker Compose Template with Security Hardening
# COMMENT: Comprehensive security validation, input sanitization, and error handling
# COMMENT: Generated by: {{ ansible_managed }}
# COMMENT: Timestamp: {{ ansible_date_time.iso8601 }}
# COMMENT: Environment: {{ deployment_environment | default('production') }}

version: '3.8'

# COMMENT: Production input validation and sanitization with security
{% if not service_name or service_name | length > 50 %}
  {{ 'Service name must be defined and under 50 characters for production security' | fail }}
{% endif %}

{% if not service_image or ':' not in service_image %}
  {{ 'Service image must be defined and include tag for production deployment' | fail }}
{% endif %}

# COMMENT: Production service configuration with security hardening
services:
  {{ service_name | lower | replace(' ', '_') | replace('-', '_') }}:
    # COMMENT: Image configuration with security validation
    image: {{ service_image | regex_replace('[^a-zA-Z0-9/:._-]', '') }}
    container_name: {{ service_container_name | default(service_name | lower | replace(' ', '_') | replace('-', '_')) }}
    restart: {{ (service_restart_policy | default('unless-stopped')) if (service_restart_policy | default('unless-stopped')) in ['always','unless-stopped','no'] else 'unless-stopped' }}
    
    # COMMENT: Production resource limits with validation and security
    {% if service_memory_limit is defined %}
    mem_limit: {{ service_memory_limit | regex_replace('^([0-9]+[KMG]?)$', '\1') | default("512M") }}
    mem_reservation: {{ service_memory_reservation | default("256M") | regex_replace('^([0-9]+[KMG]?)$', '\1') }}
    {% endif %}
    
    {% if service_cpu_limit is defined %}
    cpus: '{{ service_cpu_limit | float | default(0.5) | round(2) }}'
    cpu_quota: {{ service_cpu_quota | default(50000) | int }}
    cpu_period: {{ service_cpu_period | default(100000) | int }}
    {% endif %}
    
    # COMMENT: Production security hardening with comprehensive protection
    # COMMENT: CRITICAL FIX: Replace unconfined seccomp with hardened profile
    security_opt:
      - "no-new-privileges:true"
      # COMMENT: Use hardened seccomp profile instead of unconfined
      - "seccomp={{ docker_seccomp_profile | default('/etc/docker/seccomp/hardened.json') }}"
      - "apparmor={{ docker_apparmor_profile | default('docker-default') }}"
      - "cap-drop=ALL"
      - "security-opt=no-new-privileges"
    
    # COMMENT: Production capability management with security validation
    {% if service_capabilities is defined and service_capabilities is list %}
    cap_add:
      {% for capability in service_capabilities %}
      {% if capability is string and capability in ['CHOWN', 'SETGID', 'SETUID', 'DAC_OVERRIDE', 'FOWNER', 'MKNOD', 'NET_RAW', 'SETFCAP', 'NET_ADMIN', 'SYS_ADMIN', 'SYS_CHROOT'] %}
      - {{ capability }}
      {% endif %}
      {% endfor %}
    {% endif %}
    
    # COMMENT: Production filesystem security with read-only root
    read_only: {{ service_read_only | default(true) | bool }}
    tmpfs:
      - /tmp:size={{ service_tmpfs_size | default('100M') }},noexec,nosuid,nodev
      - /var/tmp:size={{ service_tmpfs_size | default('100M') }},noexec,nosuid,nodev
      {% if service_additional_tmpfs is defined %}
      {% for tmpfs in service_additional_tmpfs %}
      {% if tmpfs is string and ':' in tmpfs %}
      - {{ tmpfs | regex_replace('[^a-zA-Z0-9/:_-]', '') }}:noexec,nosuid,nodev
      {% endif %}
      {% endfor %}
      {% endif %}
    
    # COMMENT: Production user mapping with security validation
    # COMMENT: Run as non-root user with validated UID:GID
    user: "{{ service_user | default('1000:1000') | regex_replace('^([0-9]+:[0-9]+)$', '\1') }}"
    
    # COMMENT: Production environment variable sanitization with security
    # COMMENT: Use Docker secrets for sensitive data, not environment variables
    environment:
      {% if service_environment is defined and service_environment is mapping %}
      {% for key, value in service_environment.items() %}
      {% if key is string and value is string and key | length < 100 and value | length < 1000 %}
      {% if not key.startswith('SECRET_') and not key.startswith('PASSWORD') and not key.startswith('TOKEN') and not key.startswith('KEY') %}
      - {{ key | regex_replace('[^a-zA-Z0-9_]', '') }}={{ value | regex_replace('[^a-zA-Z0-9/._-]', '') }}
      {% endif %}
      {% endif %}
      {% endfor %}
      {% endif %}
    
    # COMMENT: Production secrets management with security
    {% if service_secrets is defined and service_secrets is list %}
    secrets:
      {% for secret in service_secrets %}
      {% if secret is mapping and secret.source is defined %}
      - source: {{ secret.source | regex_replace('[^a-zA-Z0-9_-]', '') }}
        target: {{ secret.target | default(secret.source) | regex_replace('[^a-zA-Z0-9/._-]', '') }}
        uid: "{{ secret.uid | default('1000') | regex_replace('[^0-9]', '') }}"
        gid: "{{ secret.gid | default('1000') | regex_replace('[^0-9]', '') }}"
        mode: {{ secret.mode | default('0400') | regex_replace('[^0-7]', '') }}
      {% endif %}
      {% endfor %}
    {% endif %}
    
    # COMMENT: Production volume path validation with security
    volumes:
      {% if service_volumes is defined and service_volumes is list %}
      {% for volume in service_volumes %}
      {% if volume is string and volume.startswith('/') and volume | length < 200 %}
      - {{ volume | regex_replace('[^a-zA-Z0-9/._-]', '') }}:{{ volume | regex_replace('[^a-zA-Z0-9/._-]', '') }}:ro
      {% endif %}
      {% endfor %}
      {% endif %}
    
    # COMMENT: Production port validation and security with network policies
    # COMMENT: Avoid publishing host ports unless strictly needed
    # COMMENT: Prefer ingress controller (Traefik) with TLS and network policies
    {% if service_ports is defined and service_ports is list and service_ports | length > 0 %}
    ports:
      {% for port in service_ports %}
      {% if port is string and ':' in port %}
      {% set host_port, container_port = port.split(':') %}
      {% if host_port is match('^[0-9]+$') and container_port is defined and container_port | length > 0 %}
        {% set sanitized_container_port = container_port | regex_replace('[^0-9]', '') %}
        {% if sanitized_container_port | length > 0 and host_port | int >= 1024 and host_port | int <= 65535 %}
      - "{{ host_port }}:{{ sanitized_container_port }}"
        {% endif %}
      {% endif %}
      {% endif %}
      {% endfor %}
    {% endif %}
    
    # COMMENT: Production network security with validation
    networks:
      {% if service_networks is defined and service_networks is list %}
      {% for network in service_networks %}
      {% if network is string and network | length < 50 %}
      - {{ network | regex_replace('[^a-zA-Z0-9_-]', '') }}
      {% endif %}
      {% endfor %}
      {% else %}
      - homelab_secure_network
      {% endif %}
    
    # COMMENT: Production health check with comprehensive validation
    # COMMENT: Ensure healthcheck endpoints require no auth and are fast
    healthcheck:
      test: {{ service_healthcheck_test | default('["CMD-SHELL", "wget -qO- --timeout=5 --tries=1 http://127.0.0.1:{{ service_port | default(8080) }}/health || exit 1"]') | regex_replace('[^a-zA-Z0-9"\\[\\]\\s\\-_:]', '') }}
      interval: "{{ service_healthcheck_interval | default('30s') | regex_replace('^([0-9]+[smhd])$', '\\1') }}"
      timeout: "{{ service_healthcheck_timeout | default('10s') | regex_replace('^([0-9]+[smhd])$', '\\1') }}"
      retries: {{ service_healthcheck_retries | default(3) | int | max(1) | min(10) }}
      start_period: "{{ service_healthcheck_start_period | default('40s') | regex_replace('^([0-9]+[smhd])$', '\\1') }}"
      disable: {{ service_healthcheck_disable | default(false) | bool }}
    
    # COMMENT: Production dependency validation with health checks
    depends_on:
      {% if service_dependencies is defined and service_dependencies is list %}
      {% for dependency in service_dependencies %}
      {% if dependency is mapping and dependency.name is defined %}
      {{ dependency.name | regex_replace('[^a-zA-Z0-9_-]', '') }}:
        condition: {{ dependency.condition | default('service_healthy') | regex_replace('^(service_started|service_healthy|service_completed_successfully)$', '\\1') }}
      {% endif %}
      {% endfor %}
      {% endif %}
    
    # COMMENT: Production logging with rotation and security
    logging:
      driver: "json-file"
      options:
        max-size: "{{ (service_log_max_size | default('50m')) if (service_log_max_size | default('50m')) is match('^[0-9]+[kKmMgG]$') else '50m' }}"
        max-file: "{{ service_log_max_files | default(5) | int | max(1) | min(10) }}"
        compress: "true"
        labels: "com.homelab.service={{ service_name | lower | replace(' ', '_') | replace('-', '_') }}"
    
    # COMMENT: Production labels for orchestration and security
    labels:
      {% if service_labels is defined and service_labels is list %}
      {% for label in service_labels %}
      {% if label is string and '=' in label %}
      - "{{ label | regex_replace('[^a-zA-Z0-9=._-]', '') }}"
      {% endif %}
      {% endfor %}
      {% endif %}
      - "com.homelab.service={{ service_name | lower | replace(' ', '_') | replace('-', '_') }}"
      - "com.homelab.version={{ service_version | default('latest') | regex_replace('[^a-zA-Z0-9._-]', '') }}"
      - "com.homelab.managed=true"
      - "com.homelab.security.hardened=true"
      - "com.homelab.monitoring.enabled=true"
      - "com.homelab.environment={{ deployment_environment | default('production') }}"
      - "com.homelab.deployment.timestamp={{ deployment_timestamp | default(ansible_date_time.iso8601) }}"
    
    # COMMENT: Production ulimits for resource control
    {% if service_ulimits is defined and service_ulimits is mapping %}
    ulimits:
      {% for limit, value in service_ulimits.items() %}
      {% if limit in ['nproc', 'nofile', 'core', 'memlock'] %}
      {{ limit }}:
        soft: {{ value.soft | default(1024) | int }}
        hard: {{ value.hard | default(2048) | int }}
      {% endif %}
      {% endfor %}
    {% endif %}
    
    # COMMENT: Production device restrictions for security
    {% if service_devices is defined and service_devices is list %}
    devices:
      {% for device in service_devices %}
      {% if device is string and device.startswith('/dev/') %}
      - {{ device | regex_replace('[^a-zA-Z0-9/._-]', '') }}
      {% endif %}
      {% endfor %}
    {% endif %}
    
    # COMMENT: Production sysctls for security tuning
    {% if service_sysctls is defined and service_sysctls is mapping %}
    sysctls:
      {% for sysctl, value in service_sysctls.items() %}
      {% if sysctl.startswith('net.') or sysctl.startswith('kernel.') %}
      {{ sysctl | regex_replace('[^a-zA-Z0-9._]', '') }}: {{ value | regex_replace('[^a-zA-Z0-9._-]', '') }}
      {% endif %}
      {% endfor %}
    {% endif %}

# COMMENT: Production volume configuration with security
volumes:
  {% if volumes is defined and volumes is list %}
  {% for volume in volumes %}
  {% if volume is mapping and volume.name is defined %}
  {{ volume.name | regex_replace('[^a-zA-Z0-9_-]', '') }}:
    driver: {{ volume.driver | default('local') | regex_replace('^(local|nfs|tmpfs)$', '\\1') }}
    {% if volume.driver_opts is defined and volume.driver_opts is mapping %}
    driver_opts:
      {% for key, value in volume.driver_opts.items() %}
      {% if key is string and value is string and key | length < 50 and value | length < 200 %}
      {{ key | regex_replace('[^a-zA-Z0-9_]', '') }}: {{ value | regex_replace('[^a-zA-Z0-9/._-]', '') }}
      {% endif %}
      {% endfor %}
    {% endif %}
    {% if volume.labels is defined and volume.labels is mapping %}
    labels:
      {% for key, value in volume.labels.items() %}
      {% if key is string and value is string and key | length < 50 and value | length < 200 %}
      {{ key | regex_replace('[^a-zA-Z0-9._-]', '') }}: {{ value | regex_replace('[^a-zA-Z0-9/._-]', '') }}
      {% endif %}
      {% endfor %}
    {% endif %}
  {% endif %}
  {% endfor %}
  {% endif %}

# COMMENT: Production network configuration with security
networks:
  {% if networks is defined and networks is list %}
  {% for network in networks %}
  {% if network is mapping and network.name is defined %}
  {{ network.name | regex_replace('[^a-zA-Z0-9_-]', '') }}:
    driver: {{ network.driver | default('bridge') | regex_replace('^(bridge|host|overlay|macvlan)$', '\\1') }}
    {% if network.driver_opts is defined and network.driver_opts is mapping %}
    driver_opts:
      {% for key, value in network.driver_opts.items() %}
      {% if key is string and value is string and key | length < 50 and value | length < 200 %}
      {{ key | regex_replace('[^a-zA-Z0-9_]', '') }}: {{ value | regex_replace('[^a-zA-Z0-9/._-]', '') }}
      {% endif %}
      {% endfor %}
    {% endif %}
    {% if network.external is defined %}
    external: {{ network.external | bool }}
    {% endif %}
    {% if network.internal is defined %}
    internal: {{ network.internal | bool }}
    {% endif %}
    {% if network.attachable is defined %}
    attachable: {{ network.attachable | bool }}
    {% endif %}
    {% if network.labels is defined and network.labels is mapping %}
    labels:
      {% for key, value in network.labels.items() %}
      {% if key is string and value is string and key | length < 50 and value | length < 200 %}
      {{ key | regex_replace('[^a-zA-Z0-9._-]', '') }}: {{ value | regex_replace('[^a-zA-Z0-9/._-]', '') }}
      {% endif %}
      {% endfor %}
    {% endif %}
  {% endif %}
  {% endfor %}
  {% else %}
  # COMMENT: Default secure network configuration
  homelab_secure_network:
    driver: bridge
    internal: false
    attachable: true
    labels:
      com.homelab.network.secure: "true"
      com.homelab.network.managed: "true"
  {% endif %}

# COMMENT: Production secrets configuration with security
{% if secrets is defined and secrets is list %}
secrets:
  {% for secret in secrets %}
  {% if secret is mapping and secret.name is defined %}
  {{ secret.name | regex_replace('[^a-zA-Z0-9_-]', '') }}:
    {% if secret.file is defined %}
    file: {{ secret.file | regex_replace('[^a-zA-Z0-9/._-]', '') }}
    {% endif %}
    {% if secret.external is defined %}
    external: {{ secret.external | bool }}
    {% endif %}
    {% if secret.labels is defined and secret.labels is mapping %}
    labels:
      {% for key, value in secret.labels.items() %}
      {% if key is string and value is string and key | length < 50 and value | length < 200 %}
      {{ key | regex_replace('[^a-zA-Z0-9._-]', '') }}: {{ value | regex_replace('[^a-zA-Z0-9/._-]', '') }}
      {% endif %}
      {% endfor %}
    {% endif %}
  {% endif %}
  {% endfor %}
{% endif %}

# COMMENT: Production configs configuration with security
{% if configs is defined and configs is list %}
configs:
  {% for config in configs %}
  {% if config is mapping and config.name is defined %}
  {{ config.name | regex_replace('[^a-zA-Z0-9_-]', '') }}:
    {% if config.file is defined %}
    file: {{ config.file | regex_replace('[^a-zA-Z0-9/._-]', '') }}
    {% endif %}
    {% if config.external is defined %}
    external: {{ config.external | bool }}
    {% endif %}
    {% if config.labels is defined and config.labels is mapping %}
    labels:
      {% for key, value in config.labels.items() %}
      {% if key is string and value is string and key | length < 50 and value | length < 200 %}
      {{ key | regex_replace('[^a-zA-Z0-9._-]', '') }}: {{ value | regex_replace('[^a-zA-Z0-9/._-]', '') }}
      {% endif %}
      {% endfor %}
    {% endif %}
  {% endif %}
  {% endfor %}
{% endif %}