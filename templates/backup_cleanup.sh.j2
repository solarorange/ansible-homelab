#!/bin/bash

# Backup Cleanup Script
# Removes old backup files and logs, sends cleanup metrics to monitoring stack

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LOG_DIR="$SCRIPT_DIR/logs"
STATUS_DIR="$SCRIPT_DIR/status"
BACKUP_ROOT="{{ backup_dir }}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_DIR/cleanup.log"
}

# Configuration
RETENTION_DAYS={{ backup_retention.daily | default(7) }}
MAX_LOG_AGE_DAYS=30
MAX_STATUS_AGE_HOURS=24

# Send notification
send_notification() {
    if [ -f "$SCRIPT_DIR/notifications.sh" ]; then
        "$SCRIPT_DIR/notifications.sh" "$@"
    fi
}

# Clean up old backup files
cleanup_backup_files() {
    local deleted_count=0
    local freed_space=0
    
    log "Starting backup file cleanup (retention: ${RETENTION_DAYS} days)"
    
    # Find and remove old backup files
    while IFS= read -r -d '' file; do
        local file_size=$(stat -c %s "$file" 2>/dev/null || echo "0")
        local file_age=$(find "$file" -mtime +${RETENTION_DAYS} -printf "%T@\n" 2>/dev/null || echo "0")
        
        if [ "$file_age" != "0" ]; then
            log "Removing old backup file: $file (size: $(numfmt --to=iec $file_size))"
            rm -f "$file"
            deleted_count=$((deleted_count + 1))
            freed_space=$((freed_space + file_size))
        fi
    done < <(find "$BACKUP_ROOT" -type f \( -name "*.tar.gz" -o -name "*.sql" -o -name "*.sql.gz" -o -name "*.backup" \) -print0 2>/dev/null || true)
    
    log "Backup file cleanup completed - Deleted: $deleted_count files, Freed: $(numfmt --to=iec $freed_space)"
    
    # Send cleanup notification
    if [ "$deleted_count" -gt 0 ]; then
        send_notification "cleanup_completed" "$deleted_count" "$(numfmt --to=iec $freed_space)"
    fi
    
    echo "$deleted_count"
}

# Clean up old log files
cleanup_log_files() {
    local deleted_count=0
    
    log "Starting log file cleanup (max age: ${MAX_LOG_AGE_DAYS} days)"
    
    # Clean up orchestration logs
    if [ -d "$LOG_DIR" ]; then
        while IFS= read -r -d '' file; do
            log "Removing old log file: $file"
            rm -f "$file"
            deleted_count=$((deleted_count + 1))
        done < <(find "$LOG_DIR" -type f -name "*.log" -mtime +${MAX_LOG_AGE_DAYS} -print0 2>/dev/null || true)
    fi
    
    # Clean up service-specific backup logs
    for service_dir in "$BACKUP_ROOT"/*/; do
        if [ -d "$service_dir/logs" ]; then
            while IFS= read -r -d '' file; do
                log "Removing old service log file: $file"
                rm -f "$file"
                deleted_count=$((deleted_count + 1))
            done < <(find "$service_dir/logs" -type f -name "*.log" -mtime +${MAX_LOG_AGE_DAYS} -print0 2>/dev/null || true)
        fi
    done
    
    log "Log file cleanup completed - Deleted: $deleted_count files"
    echo "$deleted_count"
}

# Clean up old status files
cleanup_status_files() {
    local deleted_count=0
    local current_time=$(date +%s)
    
    log "Starting status file cleanup (max age: ${MAX_STATUS_AGE_HOURS} hours)"
    
    if [ -d "$STATUS_DIR" ]; then
        for status_file in "$STATUS_DIR"/*.status; do
            if [ ! -f "$status_file" ]; then
                continue
            fi
            
            local file_time=$(stat -c %Y "$status_file" 2>/dev/null || echo "0")
            local age_hours=$(( (current_time - file_time) / 3600 ))
            
            if [ "$age_hours" -gt "$MAX_STATUS_AGE_HOURS" ]; then
                local service=$(basename "$status_file" .status)
                log "Removing old status file for $service (age: ${age_hours}h)"
                rm -f "$status_file"
                rm -f "$STATUS_DIR/${service}.pid"
                rm -f "$STATUS_DIR/${service}.started"
                rm -f "$STATUS_DIR/${service}.error"
                deleted_count=$((deleted_count + 1))
            fi
        done
    fi
    
    log "Status file cleanup completed - Deleted: $deleted_count files"
    echo "$deleted_count"
}

# Clean up empty directories
cleanup_empty_directories() {
    local deleted_count=0
    
    log "Starting empty directory cleanup"
    
    # Find and remove empty directories (but keep the main backup directory)
    while IFS= read -r -d '' dir; do
        if [ "$dir" != "$BACKUP_ROOT" ] && [ "$dir" != "$BACKUP_ROOT/" ]; then
            log "Removing empty directory: $dir"
            rmdir "$dir" 2>/dev/null && deleted_count=$((deleted_count + 1)) || true
        fi
    done < <(find "$BACKUP_ROOT" -type d -empty -print0 2>/dev/null || true)
    
    log "Empty directory cleanup completed - Deleted: $deleted_count directories"
    echo "$deleted_count"
}

# Clean up temporary files
cleanup_temp_files() {
    local deleted_count=0
    
    log "Starting temporary file cleanup"
    
    # Remove temporary backup files
    while IFS= read -r -d '' file; do
        log "Removing temporary file: $file"
        rm -f "$file"
        deleted_count=$((deleted_count + 1))
    done < <(find "$BACKUP_ROOT" -type f \( -name "*.tmp" -o -name "*.temp" -o -name "*.part" \) -print0 2>/dev/null || true)
    
    log "Temporary file cleanup completed - Deleted: $deleted_count files"
    echo "$deleted_count"
}

# Get disk usage statistics
get_disk_usage() {
    local backup_dir_usage=$(df "$BACKUP_ROOT" | tail -1 | awk '{print $3}')
    local backup_dir_total=$(df "$BACKUP_ROOT" | tail -1 | awk '{print $2}')
    local usage_percent=$(df "$BACKUP_ROOT" | tail -1 | awk '{print $5}' | sed 's/%//')
    
    echo "$backup_dir_usage $backup_dir_total $usage_percent"
}

# Main cleanup function
main() {
    log "Starting backup cleanup process"
    
    # Get initial disk usage
    read -r initial_usage initial_total initial_percent <<< "$(get_disk_usage)"
    log "Initial disk usage: $(numfmt --to=iec $initial_usage) / $(numfmt --to=iec $initial_total) (${initial_percent}%)"
    
    # Perform cleanup operations
    local backup_deleted=$(cleanup_backup_files)
    local log_deleted=$(cleanup_log_files)
    local status_deleted=$(cleanup_status_files)
    local dir_deleted=$(cleanup_empty_directories)
    local temp_deleted=$(cleanup_temp_files)
    
    # Get final disk usage
    read -r final_usage final_total final_percent <<< "$(get_disk_usage)"
    local freed_space=$((initial_usage - final_usage))
    
    # Summary
    local total_deleted=$((backup_deleted + log_deleted + status_deleted + dir_deleted + temp_deleted))
    
    log "Cleanup completed successfully!"
    log "Summary:"
    log "  - Backup files deleted: $backup_deleted"
    log "  - Log files deleted: $log_deleted"
    log "  - Status files deleted: $status_deleted"
    log "  - Empty directories deleted: $dir_deleted"
    log "  - Temporary files deleted: $temp_deleted"
    log "  - Total items deleted: $total_deleted"
    log "  - Space freed: $(numfmt --to=iec $freed_space)"
    log "  - Final disk usage: $(numfmt --to=iec $final_usage) / $(numfmt --to=iec $final_total) (${final_percent}%)"
    
    # Send final notification if any files were deleted
    if [ "$total_deleted" -gt 0 ]; then
        send_notification "cleanup_completed" "$total_deleted" "$(numfmt --to=iec $freed_space)"
    fi
    
    log "Backup cleanup process completed"
}

# Run cleanup
main 