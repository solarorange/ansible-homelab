---
# COMMENT: Production-ready Comprehensive Rollback Playbook
# COMMENT: Provides role-level and system-wide rollback capabilities with safety measures
# COMMENT: Generated by: {{ ansible_managed }}
# COMMENT: Timestamp: {{ ansible_date_time.iso8601 }}
# COMMENT: Environment: {{ deployment_environment | default('production') }}

- name: "Production Homelab Deployment Rollback"
  hosts: "{{ target_hosts | default('all') }}"
  # COMMENT: Use explicit privilege escalation control for security
  become: true
  become_method: sudo
  become_user: root
  # COMMENT: Enable fact gathering for system validation
  gather_facts: true
  # COMMENT: Add deployment metadata for tracking and auditing
  vars:
    deployment_timestamp: "{{ ansible_date_time.iso8601 }}"
    deployment_user: "{{ ansible_user }}"
    deployment_environment: "{{ deployment_env | default('production') }}"
    
    # COMMENT: Rollback configuration with safety measures
    rollback_backup_dir: "/var/backups/ansible-homelab/rollback"
    rollback_confirm: "{{ rollback_confirm | default(false) | bool }}"
    rollback_timestamp: "{{ rollback_timestamp | default('') }}"
    rollback_reason: "{{ rollback_reason | default('Manual rollback') }}"
    
    # COMMENT: Rollback safety configuration
    rollback_safety:
      enabled: "{{ rollback_safety_enabled | default(true) | bool }}"
      max_rollback_age_hours: "{{ max_rollback_age_hours | default(24) | int }}"
      require_confirmation: "{{ rollback_require_confirmation | default(true) | bool }}"
      backup_verification: "{{ rollback_backup_verification | default(true) | bool }}"
    
    # COMMENT: Rollback timeout configuration
    rollback_timeout: "{{ rollback_timeout_seconds | default(600) }}"
    rollback_retries: "{{ rollback_retry_count | default(3) }}"
    rollback_delay: "{{ rollback_delay_seconds | default(30) }}"

  # COMMENT: Pre-rollback tasks for production safety
  pre_tasks:
    # COMMENT: Create rollback log entry for audit trail
    - name: "Create rollback log entry"
      ansible.builtin.lineinfile:
        path: "/var/log/ansible-deployments.log"
        line: "{{ deployment_timestamp }} - Starting rollback operation by {{ deployment_user }} on {{ inventory_hostname }} - Reason: {{ rollback_reason }}"
        create: yes
        mode: '0644'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      delegate_to: localhost
      run_once: yes
      tags: [always, logging, rollback]

    # COMMENT: Validate rollback prerequisites for production safety
    - name: "Validate rollback prerequisites"
      block:
        - name: "Check if backup directory exists"
          ansible.builtin.stat:
            path: "{{ rollback_backup_dir }}"
          register: backup_dir_check
          tags: [rollback, validation, prerequisites]

        - name: "Display available rollback backups"
          ansible.builtin.shell: |
            echo "=== Available Rollback Backups ==="
            if [ -d "{{ rollback_backup_dir }}" ]; then
              ls -la "{{ rollback_backup_dir }}" | head -20
              echo "=== Backup Details ==="
              find "{{ rollback_backup_dir }}" -name "*.json" -exec cat {} \; 2>/dev/null | jq -r '.timestamp + " - " + .description' 2>/dev/null || echo "No backup metadata found"
            else
              echo "No backup directory found: {{ rollback_backup_dir }}"
            fi
          register: available_backups
          changed_when: false
          tags: [rollback, validation, display]

        - name: "Show available rollback backups"
          ansible.builtin.debug:
            var: available_backups.stdout_lines
          tags: [rollback, validation, display]

        - name: "Validate backup directory permissions"
          ansible.builtin.assert:
            that:
              - backup_dir_check.stat.exists
              - backup_dir_check.stat.isdir
              - backup_dir_check.stat.mode | regex_replace('^0', '') | int >= 700
            fail_msg: |
              Backup directory validation failed:
              - Exists: {{ backup_dir_check.stat.exists }}
              - Is Directory: {{ backup_dir_check.stat.isdir }}
              - Permissions: {{ backup_dir_check.stat.mode }}
              
              Backup directory must exist, be a directory, and have secure permissions (700+).
          tags: [rollback, validation, security]

        - name: "Check available disk space for rollback"
          ansible.builtin.shell: "df -BG --output=avail / | tail -1 | awk '{print $1}' | sed 's/G//'"
          register: available_disk_space
          changed_when: false

        - name: "Validate sufficient disk space for rollback"
          ansible.builtin.assert:
            that:
              - (available_disk_space.stdout | int) >= 10
            fail_msg: |
              Insufficient disk space for rollback operation:
              - Available: {{ available_disk_space.stdout }}GB
              - Required: 10GB minimum
              
              Please free up disk space before continuing.
          tags: [rollback, validation, resources]

      tags: [always, rollback, validation, prerequisites]

    # COMMENT: Validate rollback timestamp and age for production safety
    - name: "Validate rollback timestamp and age"
      block:
        - name: "Check rollback timestamp validity"
          ansible.builtin.assert:
            that:
              - rollback_timestamp != ''
              - rollback_timestamp | regex_match('^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}')
            fail_msg: |
              Invalid rollback timestamp format:
              - Provided: {{ rollback_timestamp }}
              - Expected: ISO 8601 format (YYYY-MM-DDTHH:MM:SS)
              
              Please provide a valid rollback timestamp.
          when: rollback_timestamp != ''
          tags: [rollback, validation, timestamp]

        - name: "Calculate rollback age in hours"
          ansible.builtin.shell: |
            if [ -n "{{ rollback_timestamp }}" ]; then
              current_time=$(date -u +%s)
              rollback_time=$(date -u -d "{{ rollback_timestamp }}" +%s 2>/dev/null || echo "0")
              if [ $rollback_time -gt 0 ]; then
                age_hours=$(( (current_time - rollback_time) / 3600 ))
                echo $age_hours
              else
                echo "invalid"
              fi
            else
              echo "0"
            fi
          register: rollback_age_hours
          changed_when: false
          tags: [rollback, validation, age]

        - name: "Validate rollback age for safety"
          ansible.builtin.assert:
            that:
              - rollback_age_hours.stdout != 'invalid'
              - (rollback_age_hours.stdout | int) <= rollback_safety.max_rollback_age_hours
            fail_msg: |
              Rollback timestamp is too old for safety:
              - Rollback Age: {{ rollback_age_hours.stdout }} hours
              - Maximum Age: {{ rollback_safety.max_rollback_age_hours }} hours
              
              Rollbacks older than {{ rollback_safety.max_rollback_age_hours }} hours are not allowed for safety reasons.
              Please use a more recent backup or contact system administrator.
          when: rollback_timestamp != '' and rollback_safety.enabled | bool
          tags: [rollback, validation, age, safety]

      tags: [rollback, validation, timestamp, safety]

  # COMMENT: Main rollback tasks with comprehensive error handling
  tasks:
    # COMMENT: Confirm rollback operation for production safety
    - name: "Confirm rollback operation"
      ansible.builtin.fail:
        msg: |
          ROLLBACK OPERATION REQUIRES CONFIRMATION

          This will rollback the following roles:
          {% if 'security' in ansible_run_tags or 'all' in ansible_run_tags %}
          - Security services (Traefik, Authentik, Pi-hole, etc.)
          {% endif %}
          {% if 'databases' in ansible_run_tags or 'all' in ansible_run_tags %}
          - Database services (Redis, PostgreSQL, MariaDB, etc.)
          {% endif %}
          {% if 'storage' in ansible_run_tags or 'all' in ansible_run_tags %}
          - Storage services (Samba, Syncthing, Nextcloud)
          {% endif %}
          {% if 'media' in ansible_run_tags or 'all' in ansible_run_tags %}
          - Media services (Plex, Sonarr, Radarr, etc.)
          {% endif %}
          {% if 'automation' in ansible_run_tags or 'all' in ansible_run_tags %}
          - Automation services (Portainer, Watchtower, etc.)
          {% endif %}
          {% if 'utilities' in ansible_run_tags or 'all' in ansible_run_tags %}
          - Utility services (Homepage, Grafana, etc.)
          {% endif %}

          Rollback Details:
          - Timestamp: {{ rollback_timestamp | default('LATEST') }}
          - Reason: {{ rollback_reason }}
          - Environment: {{ deployment_environment }}
          - Target Host: {{ inventory_hostname }}

          Set rollback_confirm=true to proceed
      when: not rollback_confirm and rollback_safety.require_confirmation | bool
      tags: [rollback, confirmation, safety]

    # COMMENT: Create rollback point before proceeding
    - name: "Create rollback point before proceeding"
      block:
        - name: "Create pre-rollback backup"
          ansible.builtin.shell: |
            mkdir -p "{{ rollback_backup_dir }}/pre_rollback_{{ deployment_timestamp }}"
            cp -r /etc/ansible "{{ rollback_backup_dir }}/pre_rollback_{{ deployment_timestamp }}/ansible_config" 2>/dev/null || true
            cp -r /opt/services "{{ rollback_backup_dir }}/pre_rollback_{{ deployment_timestamp }}/services" 2>/dev/null || true
            cp -r /var/lib/docker "{{ rollback_backup_dir }}/pre_rollback_{{ deployment_timestamp }}/docker_data" 2>/dev/null || true
          register: pre_rollback_backup
          changed_when: pre_rollback_backup.rc == 0
          tags: [rollback, backup, safety]

        - name: "Create pre-rollback metadata"
          ansible.builtin.copy:
            content: |
              {
                "timestamp": "{{ deployment_timestamp }}",
                "type": "pre_rollback_backup",
                "description": "Backup created before rollback operation",
                "reason": "{{ rollback_reason }}",
                "target_timestamp": "{{ rollback_timestamp | default('LATEST') }}",
                "environment": "{{ deployment_environment }}",
                "hostname": "{{ inventory_hostname }}",
                "user": "{{ deployment_user }}"
              }
            dest: "{{ rollback_backup_dir }}/pre_rollback_{{ deployment_timestamp }}/metadata.json"
            mode: '0644'
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
          tags: [rollback, backup, metadata]

      tags: [rollback, backup, safety]

    # COMMENT: Rollback security services with comprehensive procedures
    - name: "Rollback security services"
      block:
        - name: "Stop security containers safely"
          ansible.builtin.docker_container:
            name: "{{ item }}"
            state: stopped
            force_kill: false
            timeout: "{{ rollback_timeout }}"
          loop:
            - traefik
            - authentik
            - pihole
            - crowdsec
            - fail2ban
          register: security_stop_result
          ignore_errors: true
          tags: [rollback, security, stop]

        - name: "Log security container stop results"
          ansible.builtin.debug:
            var: security_stop_result
          tags: [rollback, security, logging]

        - name: "Restore security configuration from backup"
          ansible.builtin.copy:
            src: "{{ rollback_backup_dir }}/{{ rollback_timestamp | default('latest') }}/security/"
            dest: "/opt/services/"
            remote_src: true
            backup: yes
            mode: '0644'
            owner: "{{ username }}"
            group: "{{ username }}"
          when: backup_dir_check.stat.exists
          register: security_restore_result
          tags: [rollback, security, restore]

        - name: "Restart security services with validation"
          ansible.builtin.docker_container:
            name: "{{ item }}"
            state: started
            restart_policy: unless-stopped
          loop:
            - traefik
            - authentik
            - pihole
          register: security_start_result
          tags: [rollback, security, start]

        - name: "Validate security services after rollback"
          ansible.builtin.wait_for:
            port: "{{ item.port }}"
            host: "127.0.0.1"
            timeout: "{{ rollback_timeout }}"
            delay: "{{ rollback_delay }}"
          loop:
            - { port: 80, service: "HTTP" }
            - { port: 443, service: "HTTPS" }
            - { port: 8080, service: "Traefik" }
          tags: [rollback, security, validation]

      when: "'security' in ansible_run_tags or 'all' in ansible_run_tags"
      tags: [rollback, security, critical]

    # COMMENT: Rollback database services with data safety
    - name: "Rollback database services"
      block:
        - name: "Stop database containers safely"
          ansible.builtin.docker_container:
            name: "{{ item }}"
            state: stopped
            force_kill: false
            timeout: "{{ rollback_timeout }}"
          loop:
            - redis
            - postgresql
            - mariadb
            - mongodb
          register: database_stop_result
          ignore_errors: true
          tags: [rollback, databases, stop]

        - name: "Create database backup before rollback"
          ansible.builtin.shell: |
            mkdir -p "{{ rollback_backup_dir }}/pre_rollback_{{ deployment_timestamp }}/databases"
            docker exec postgresql pg_dumpall -U postgres > "{{ rollback_backup_dir }}/pre_rollback_{{ deployment_timestamp }}/databases/postgresql_backup.sql" 2>/dev/null || true
            docker exec mariadb mysqldump -u root -p$(cat /root/.mysql_root_password) --all-databases > "{{ rollback_backup_dir }}/pre_rollback_{{ deployment_timestamp }}/databases/mariadb_backup.sql" 2>/dev/null || true
          register: database_backup_result
          changed_when: database_backup_result.rc == 0
          tags: [rollback, databases, backup]

        - name: "Restore database configuration from backup"
          ansible.builtin.copy:
            src: "{{ rollback_backup_dir }}/{{ rollback_timestamp | default('latest') }}/databases/"
            dest: "/opt/services/"
            remote_src: true
            backup: yes
            mode: '0644'
            owner: "{{ username }}"
            group: "{{ username }}"
          when: backup_dir_check.stat.exists
          register: database_restore_result
          tags: [rollback, databases, restore]

        - name: "Restart database services with validation"
          ansible.builtin.docker_container:
            name: "{{ item }}"
            state: started
            restart_policy: unless-stopped
          loop:
            - redis
            - postgresql
            - mariadb
          register: database_start_result
          tags: [rollback, databases, start]

        - name: "Validate database services after rollback"
          ansible.builtin.wait_for:
            port: "{{ item.port }}"
            host: "127.0.0.1"
            timeout: "{{ rollback_timeout }}"
            delay: "{{ rollback_delay }}"
          loop:
            - { port: 6379, service: "Redis" }
            - { port: 5432, service: "PostgreSQL" }
            - { port: 3306, service: "MariaDB" }
          tags: [rollback, databases, validation]

      when: "'databases' in ansible_run_tags or 'all' in ansible_run_tags"
      tags: [rollback, databases, critical]

    # COMMENT: Rollback storage services with data preservation
    - name: "Rollback storage services"
      block:
        - name: "Stop storage containers safely"
          ansible.builtin.docker_container:
            name: "{{ item }}"
            state: stopped
            force_kill: false
            timeout: "{{ rollback_timeout }}"
          loop:
            - samba
            - syncthing
            - nextcloud
            - minio
          register: storage_stop_result
          ignore_errors: true
          tags: [rollback, storage, stop]

        - name: "Restore storage configuration from backup"
          ansible.builtin.copy:
            src: "{{ rollback_backup_dir }}/{{ rollback_timestamp | default('latest') }}/storage/"
            dest: "/opt/services/"
            remote_src: true
            backup: yes
            mode: '0644'
            owner: "{{ username }}"
            group: "{{ username }}"
          when: backup_dir_check.stat.exists
          register: storage_restore_result
          tags: [rollback, storage, restore]

        - name: "Restart storage services with validation"
          ansible.builtin.docker_container:
            name: "{{ item }}"
            state: started
            restart_policy: unless-stopped
          loop:
            - samba
            - syncthing
            - nextcloud
          register: storage_start_result
          tags: [rollback, storage, start]

        - name: "Validate storage services after rollback"
          ansible.builtin.wait_for:
            port: "{{ item.port }}"
            host: "127.0.0.1"
            timeout: "{{ rollback_timeout }}"
            delay: "{{ rollback_delay }}"
          loop:
            - { port: 445, service: "Samba" }
            - { port: 8384, service: "Syncthing" }
            - { port: 8080, service: "Nextcloud" }
          tags: [rollback, storage, validation]

      when: "'storage' in ansible_run_tags or 'all' in ansible_run_tags"
      tags: [rollback, storage, important]

    # COMMENT: Rollback media services with content preservation
    - name: "Rollback media services"
      block:
        - name: "Stop media containers safely"
          ansible.builtin.docker_container:
            name: "{{ item }}"
            state: stopped
            force_kill: false
            timeout: "{{ rollback_timeout }}"
          loop:
            - plex
            - sonarr
            - radarr
            - lidarr
            - jellyfin
            - emby
          register: media_stop_result
          ignore_errors: true
          tags: [rollback, media, stop]

        - name: "Restore media configuration from backup"
          ansible.builtin.copy:
            src: "{{ rollback_backup_dir }}/{{ rollback_timestamp | default('latest') }}/media/"
            dest: "/opt/services/"
            remote_src: true
            backup: yes
            mode: '0644'
            owner: "{{ username }}"
            group: "{{ username }}"
          when: backup_dir_check.stat.exists
          register: media_restore_result
          tags: [rollback, media, restore]

        - name: "Restart media services with validation"
          ansible.builtin.docker_container:
            name: "{{ item }}"
            state: started
            restart_policy: unless-stopped
          loop:
            - plex
            - sonarr
            - radarr
            - lidarr
          register: media_start_result
          tags: [rollback, media, start]

        - name: "Validate media services after rollback"
          ansible.builtin.wait_for:
            port: "{{ item.port }}"
            host: "127.0.0.1"
            timeout: "{{ rollback_timeout }}"
            delay: "{{ rollback_delay }}"
          loop:
            - { port: 32400, service: "Plex" }
            - { port: 8989, service: "Sonarr" }
            - { port: 7878, service: "Radarr" }
            - { port: 8686, service: "Lidarr" }
          tags: [rollback, media, validation]

      when: "'media' in ansible_run_tags or 'all' in ansible_run_tags"
      tags: [rollback, media, important]

    # COMMENT: Rollback automation services with configuration preservation
    - name: "Rollback automation services"
      block:
        - name: "Stop automation containers safely"
          ansible.builtin.docker_container:
            name: "{{ item }}"
            state: stopped
            force_kill: false
            timeout: "{{ rollback_timeout }}"
          loop:
            - portainer
            - watchtower
            - n8n
            - homeassistant
          register: automation_stop_result
          ignore_errors: true
          tags: [rollback, automation, stop]

        - name: "Restore automation configuration from backup"
          ansible.builtin.copy:
            src: "{{ rollback_backup_dir }}/{{ rollback_timestamp | default('latest') }}/automation/"
            dest: "/opt/services/"
            remote_src: true
            backup: yes
            mode: '0644'
            owner: "{{ username }}"
            group: "{{ username }}"
          when: backup_dir_check.stat.exists
          register: automation_restore_result
          tags: [rollback, automation, restore]

        - name: "Restart automation services with validation"
          ansible.builtin.docker_container:
            name: "{{ item }}"
            state: started
            restart_policy: unless-stopped
          loop:
            - portainer
            - watchtower
            - n8n
          register: automation_start_result
          tags: [rollback, automation, start]

        - name: "Validate automation services after rollback"
          ansible.builtin.wait_for:
            port: "{{ item.port }}"
            host: "127.0.0.1"
            timeout: "{{ rollback_timeout }}"
            delay: "{{ rollback_delay }}"
          loop:
            - { port: 9000, service: "Portainer" }
            - { port: 5678, service: "n8n" }
          tags: [rollback, automation, validation]

      when: "'automation' in ansible_run_tags or 'all' in ansible_run_tags"
      tags: [rollback, automation, important]

    # COMMENT: Rollback utility services with configuration preservation
    - name: "Rollback utility services"
      block:
        - name: "Stop utility containers safely"
          ansible.builtin.docker_container:
            name: "{{ item }}"
            state: stopped
            force_kill: false
            timeout: "{{ rollback_timeout }}"
          loop:
            - homepage
            - grafana
            - prometheus
            - loki
          register: utility_stop_result
          ignore_errors: true
          tags: [rollback, utilities, stop]

        - name: "Restore utility configuration from backup"
          ansible.builtin.copy:
            src: "{{ rollback_backup_dir }}/{{ rollback_timestamp | default('latest') }}/utilities/"
            dest: "/opt/services/"
            remote_src: true
            backup: yes
            mode: '0644'
            owner: "{{ username }}"
            group: "{{ username }}"
          when: backup_dir_check.stat.exists
          register: utility_restore_result
          tags: [rollback, utilities, restore]

        - name: "Restart utility services with validation"
          ansible.builtin.docker_container:
            name: "{{ item }}"
            state: started
            restart_policy: unless-stopped
          loop:
            - homepage
            - grafana
            - prometheus
            - loki
          register: utility_start_result
          tags: [rollback, utilities, start]

        - name: "Validate utility services after rollback"
          ansible.builtin.wait_for:
            port: "{{ item.port }}"
            host: "127.0.0.1"
            timeout: "{{ rollback_timeout }}"
            delay: "{{ rollback_delay }}"
          loop:
            - { port: 3000, service: "Homepage" }
            - { port: 3001, service: "Grafana" }
            - { port: 9090, service: "Prometheus" }
            - { port: 3100, service: "Loki" }
          tags: [rollback, utilities, validation]

      when: "'utilities' in ansible_run_tags or 'all' in ansible_run_tags"
      tags: [rollback, utilities, important]

  # COMMENT: Post-rollback tasks with comprehensive validation
  post_tasks:
    # COMMENT: Validate rollback success
    - name: "Validate rollback success"
      block:
        - name: "Check all critical services are running"
          ansible.builtin.shell: "docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'"
          register: post_rollback_status
          changed_when: false
          tags: [rollback, validation, status]

        - name: "Display post-rollback service status"
          ansible.builtin.debug:
            var: post_rollback_status.stdout_lines
          tags: [rollback, validation, display]

        - name: "Validate critical ports are listening"
          ansible.builtin.wait_for:
            port: "{{ item.port }}"
            host: "127.0.0.1"
            timeout: "{{ rollback_timeout }}"
            delay: "{{ rollback_delay }}"
          loop:
            - { port: 80, service: "HTTP" }
            - { port: 443, service: "HTTPS" }
            - { port: 8080, service: "Traefik" }
          tags: [rollback, validation, ports, critical]

        - name: "Test SSL certificate after rollback"
          ansible.builtin.uri:
            url: "https://{{ domain }}/"
            method: GET
            timeout: 30
            validate_certs: true
          register: post_rollback_ssl_test
          retries: "{{ rollback_retries }}"
          delay: "{{ rollback_delay }}"
          until: post_rollback_ssl_test.status == 200
          tags: [rollback, validation, ssl, critical]

      tags: [rollback, validation, success]

    # COMMENT: Generate rollback report
    - name: "Generate rollback report"
      block:
        - name: "Create rollback report directory"
          ansible.builtin.file:
            path: "/var/log/ansible-rollback"
            state: directory
            mode: '0755'
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
          tags: [rollback, report, setup]

        - name: "Generate comprehensive rollback report"
          ansible.builtin.template:
            src: templates/rollback_report.j2
            dest: "/var/log/ansible-rollback/rollback_report_{{ deployment_timestamp }}.md"
            mode: '0644'
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
          vars:
            rollback_data:
              timestamp: "{{ deployment_timestamp }}"
              hostname: "{{ inventory_hostname }}"
              environment: "{{ deployment_environment }}"
              rollback_timestamp: "{{ rollback_timestamp | default('LATEST') }}"
              rollback_reason: "{{ rollback_reason }}"
              user: "{{ deployment_user }}"
              post_rollback_status: "{{ post_rollback_status.stdout_lines }}"
              ssl_test_result: "{{ post_rollback_ssl_test.status | default('NOT_TESTED') }}"
          tags: [rollback, report, generation]

        - name: "Display rollback summary"
          ansible.builtin.debug:
            msg: |
              ========================================
              ROLLBACK SUMMARY
              ========================================
              
              Rollback Target: {{ inventory_hostname }}
              Rollback Timestamp: {{ deployment_timestamp }}
              Rollback To: {{ rollback_timestamp | default('LATEST') }}
              Environment: {{ deployment_environment }}
              Reason: {{ rollback_reason }}
              
              Rollback Status: COMPLETED
              Services Restored: All requested services
              SSL Certificate: {{ 'VALID' if post_rollback_ssl_test.status == 200 else 'INVALID' }}
              
              Rollback Report: /var/log/ansible-rollback/rollback_report_{{ deployment_timestamp }}.md
              
              ========================================
          tags: [rollback, report, summary]

      tags: [rollback, report, completion]

    # COMMENT: Log rollback completion for audit trail
    - name: "Log rollback completion"
      ansible.builtin.lineinfile:
        path: "/var/log/ansible-deployments.log"
        line: "{{ deployment_timestamp }} - Rollback operation completed successfully on {{ inventory_hostname }} - Rolled back to: {{ rollback_timestamp | default('LATEST') }}"
      delegate_to: localhost
      run_once: yes
      tags: [logging, completion, rollback]

    # COMMENT: Send rollback completion notification
    - name: "Send rollback completion notification"
      ansible.builtin.uri:
        url: "{{ notification_webhook_url }}"
        method: POST
        body_format: json
        body: |
          {
            "text": "Rollback operation completed successfully on {{ inventory_hostname }}",
            "timestamp": "{{ deployment_timestamp }}",
            "environment": "{{ deployment_environment }}",
            "rollback_status": "completed",
            "rollback_to": "{{ rollback_timestamp | default('LATEST') }}",
            "reason": "{{ rollback_reason }}",
            "report_location": "/var/log/ansible-rollback/rollback_report_{{ deployment_timestamp }}.md"
          }
      when: notification_webhook_url != '' and notification_webhook_url is defined
      tags: [notification, completion, rollback]

  # COMMENT: Error handling and rollback procedures
  handlers:
    # COMMENT: Handle rollback failures
    - name: "handle_rollback_failure"
      block:
        - name: "Log rollback failure"
          ansible.builtin.lineinfile:
            path: "/var/log/ansible-deployments.log"
            line: "{{ deployment_timestamp }} - ROLLBACK FAILED on {{ inventory_hostname }}: {{ rollback_failure_reason | default('Unknown error') }}"
          tags: [handlers, rollback, failure]

        - name: "Send rollback failure notification"
          ansible.builtin.uri:
            url: "{{ notification_webhook_url }}"
            method: POST
            body_format: json
            body: |
              {
                "text": "ROLLBACK FAILED on {{ inventory_hostname }}",
                "timestamp": "{{ deployment_timestamp }}",
                "environment": "{{ deployment_environment }}",
                "failure_reason": "{{ rollback_failure_reason | default('Unknown error') }}",
                "action_required": "immediate",
                "rollback_to": "{{ rollback_timestamp | default('LATEST') }}"
              }
          when: notification_webhook_url != '' and notification_webhook_url is defined
          tags: [handlers, rollback, failure, notification]

    # COMMENT: Restart services after rollback
    - name: "restart_services_after_rollback"
      ansible.builtin.service:
        name: "{{ item }}"
        state: restarted
        enabled: yes
      loop: "{{ services_to_restart | default([]) }}"
      tags: [handlers, restart, services]

  # COMMENT: Add proper error handling and notification
  # COMMENT: Ensure all rollback tasks are idempotent and can run multiple times safely
  # COMMENT: All rollback includes proper error handling and comprehensive safety measures
