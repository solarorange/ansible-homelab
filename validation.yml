---
# COMMENT: Production-ready Comprehensive Validation Playbook
# COMMENT: Validates all roles and services after deployment with comprehensive error handling
# COMMENT: Generated by: {{ ansible_managed }}
# COMMENT: Timestamp: {{ ansible_date_time.iso8601 }}
# COMMENT: Environment: {{ deployment_environment | default('production') }}

- name: "Production Homelab Deployment Validation"
  hosts: "{{ target_hosts | default('all') }}"
  # COMMENT: Use explicit privilege escalation control for security
  become: true
  become_method: sudo
  become_user: root
  # COMMENT: Enable fact gathering for system validation
  gather_facts: true
  # COMMENT: Add deployment metadata for tracking and auditing
  vars:
    deployment_timestamp: "{{ ansible_date_time.iso8601 }}"
    deployment_user: "{{ ansible_user }}"
    deployment_environment: "{{ deployment_env | default('production') }}"

    # COMMENT: Validation configuration with production timeouts
    validation_timeout: "{{ validation_timeout_seconds | default(300) }}"
    health_check_retries: "{{ health_check_retry_count | default(3) }}"
    health_check_delay: "{{ health_check_delay_seconds | default(10) }}"

    # COMMENT: Validation thresholds for production deployment
    validation_thresholds:
      cpu_warning: "{{ cpu_warning_threshold | default(80) | int }}"
      cpu_critical: "{{ cpu_critical_threshold | default(90) | int }}"
      memory_warning: "{{ memory_warning_threshold | default(85) | int }}"
      memory_critical: "{{ memory_critical_threshold | default(95) | int }}"
      disk_warning: "{{ disk_warning_threshold | default(80) | int }}"
      disk_critical: "{{ disk_critical_threshold | default(90) | int }}"

    # COMMENT: Service validation configuration
    service_validation:
      enabled: "{{ service_validation_enabled | default(true) | bool }}"
      timeout: "{{ service_validation_timeout | default(60) | int }}"
      retries: "{{ service_validation_retries | default(3) | int }}"

  # COMMENT: Pre-validation tasks for production readiness
  pre_tasks:
    # COMMENT: Create validation log entry for audit trail
    - name: "Create validation log entry"
      ansible.builtin.lineinfile:
        path: "/var/log/ansible-deployments.log"
        line: "{{ deployment_timestamp }} - Starting deployment validation by {{ deployment_user }} on {{ inventory_hostname }}"
        create: yes
        mode: '0644'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      delegate_to: localhost
      run_once: yes
      tags: [always, logging, validation]

    # COMMENT: Validate system prerequisites for production validation
    - name: "Validate system prerequisites"
      block:
        - name: "Check system resources with comprehensive monitoring"
          ansible.builtin.shell: |
            echo "=== System Resources ==="
            echo "CPU Usage:"
            top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1
            echo "Memory Usage:"
            free -h | grep Mem | awk '{print $3 "/" $2 " (" $3/$2*100.0 "%)"}'
            echo "Disk Usage:"
            df -h | grep -E '^/dev/'
            echo "=== Docker Status ==="
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}\t{{.Image}}"
            echo "=== System Load ==="
            uptime
            echo "=== Network Interfaces ==="
            ip addr show
          register: system_status
          changed_when: false
          tags: [validation, system, resources]

        - name: "Display comprehensive system status"
          ansible.builtin.debug:
            var: system_status.stdout_lines
          tags: [validation, system, display]

        - name: "Validate system resource thresholds"
          block:
            - name: "Check CPU usage against thresholds"
              ansible.builtin.shell: "top -bn1 | grep 'Cpu(s)' | awk '{print $2}' | cut -d'%' -f1"
              register: cpu_usage
              changed_when: false

            - name: "Validate CPU usage"
              ansible.builtin.assert:
                that:
                  - (cpu_usage.stdout | float) < validation_thresholds.cpu_critical
                fail_msg: |
                  CPU usage is critical: {{ cpu_usage.stdout }}%
                  Threshold: {{ validation_thresholds.cpu_critical }}%
                  Please investigate high CPU usage before continuing.
              tags: [validation, system, cpu]

            - name: "Check memory usage against thresholds"
              ansible.builtin.shell: "free | grep Mem | awk '{printf \"%.0f\", $3/$2 * 100.0}'"
              register: memory_usage
              changed_when: false

            - name: "Validate memory usage"
              ansible.builtin.assert:
                that:
                  - (memory_usage.stdout | int) < validation_thresholds.memory_critical
                fail_msg: |
                  Memory usage is critical: {{ memory_usage.stdout }}%
                  Threshold: {{ validation_thresholds.memory_critical }}%
                  Please investigate high memory usage before continuing.
              tags: [validation, system, memory]

            - name: "Check disk usage against thresholds"
              ansible.builtin.shell: "df / | tail -1 | awk '{print $5}' | cut -d'%' -f1"
              register: disk_usage
              changed_when: false

            - name: "Validate disk usage"
              ansible.builtin.assert:
                that:
                  - (disk_usage.stdout | int) < validation_thresholds.disk_critical
                fail_msg: |
                  Disk usage is critical: {{ disk_usage.stdout }}%
                  Threshold: {{ validation_thresholds.disk_critical }}%
                  Please investigate high disk usage before continuing.
              tags: [validation, system, disk]

      tags: [always, validation, prerequisites]

    # COMMENT: Validate Docker environment for production deployment
    - name: "Validate Docker environment"
      block:
        - name: "Check Docker service status"
          ansible.builtin.systemd:
            name: docker
            state: started
          tags: [validation, docker, service]

        - name: "Validate Docker daemon configuration"
          ansible.builtin.file:
            path: /etc/docker/daemon.json
            state: file
          register: docker_config
          tags: [validation, docker, config]

        - name: "Check Docker network configuration"
          ansible.builtin.shell: "docker network ls --format 'table {{.Name}}\t{{.Driver}}\t{{.Scope}}'"
          register: docker_networks
          changed_when: false
          tags: [validation, docker, networks]

        - name: "Display Docker network status"
          ansible.builtin.debug:
            var: docker_networks.stdout_lines
          tags: [validation, docker, display]

      tags: [validation, docker, environment]

  # COMMENT: Main validation tasks with comprehensive error handling
  tasks:
    # COMMENT: Validate infrastructure roles with proper sequencing
    - name: "Validate infrastructure roles"
      block:
        - name: "Validate security services"
          ansible.builtin.include_tasks: tasks/validate/security.yml
          when: security_enabled | default(true) | bool
          tags: [validation, security, infrastructure]

        - name: "Validate database services"
          ansible.builtin.include_tasks: tasks/validate/databases.yml
          when: databases_enabled | default(true) | bool
          tags: [validation, databases, infrastructure]

        - name: "Validate storage services"
          ansible.builtin.include_tasks: tasks/validate/storage.yml
          when: storage_enabled | default(true) | bool
          tags: [validation, storage, infrastructure]

        - name: "Validate network services"
          ansible.builtin.include_tasks: tasks/validate/network.yml
          when: network_enabled | default(true) | bool
          tags: [validation, network, infrastructure]

      tags: [validation, infrastructure, critical]

    # COMMENT: Validate monitoring roles with health checks
    - name: "Validate monitoring roles"
      block:
        - name: "Validate logging services"
          ansible.builtin.include_tasks: tasks/validate/logging.yml
          when: logging_enabled | default(true) | bool
          tags: [validation, logging, monitoring]

        - name: "Validate certificate management"
          ansible.builtin.include_tasks: tasks/validate/certificates.yml
          when: certificate_management_enabled | default(true) | bool
          tags: [validation, certificates, monitoring]

        - name: "Validate monitoring stack"
          ansible.builtin.include_tasks: tasks/validate/monitoring.yml
          when: monitoring_enabled | default(true) | bool
          tags: [validation, monitoring, stack]

      tags: [validation, monitoring, critical]

    # COMMENT: Validate service roles with comprehensive testing
    - name: "Validate service roles"
      block:
        - name: "Validate media services"
          ansible.builtin.include_tasks: tasks/validate/media.yml
          when: media_enabled | default(true) | bool
          tags: [validation, media, services]

        - name: "Validate automation services"
          ansible.builtin.include_tasks: tasks/validate/automation.yml
          when: automation_enabled | default(true) | bool
          tags: [validation, automation, services]

        - name: "Validate utility services"
          ansible.builtin.include_tasks: tasks/validate/utilities.yml
          when: utilities_enabled | default(true) | bool
          tags: [validation, utilities, services]

        - name: "Validate dashboard services"
          ansible.builtin.include_tasks: tasks/validate/dashboard.yml
          when: dashboard_enabled | default(true) | bool
          tags: [validation, dashboard, services]

      tags: [validation, services, critical]

    # COMMENT: Validate specialized roles with specific requirements
    - name: "Validate specialized roles"
      block:
        - name: "Validate paperless-ngx"
          ansible.builtin.include_tasks: tasks/validate/paperless.yml
          when: paperless_ngx_enabled | default(true) | bool
          tags: [validation, paperless, specialized]

        - name: "Validate fing"
          ansible.builtin.include_tasks: tasks/validate/fing.yml
          when: fing_enabled | default(true) | bool
          tags: [validation, fing, specialized]

        - name: "Validate backup services"
          ansible.builtin.include_tasks: tasks/validate/backup.yml
          when: backup_enabled | default(true) | bool
          tags: [validation, backup, specialized]

      tags: [validation, specialized, important]

    # COMMENT: Validate SSL/TLS configuration for production security
    - name: "Validate SSL/TLS configuration"
      block:
        - name: "Validate SSL certificate deployment"
          ansible.builtin.uri:
            url: "https://{{ domain }}/"
            method: GET
            timeout: 30
            validate_certs: true
          register: ssl_validation
          retries: "{{ health_check_retries }}"
          delay: "{{ health_check_delay }}"
          until: ssl_validation.status == 200
          tags: [validation, ssl, critical]

        - name: "Validate SSL certificate expiration"
          ansible.builtin.shell: |
            openssl s_client -connect {{ domain }}:443 -servername {{ domain }} < /dev/null 2>/dev/null | openssl x509 -noout -dates
          register: ssl_expiration
          changed_when: false
          tags: [validation, ssl, expiration]

        - name: "Display SSL certificate information"
          ansible.builtin.debug:
            var: ssl_expiration.stdout_lines
          tags: [validation, ssl, display]

      when: ssl_enabled | default(true) | bool
      tags: [validation, ssl, security, critical]

    # COMMENT: Validate service health and connectivity
    - name: "Validate service health and connectivity"
      block:
        - name: "Check critical service ports"
          ansible.builtin.wait_for:
            port: "{{ item.port }}"
            host: "{{ item.host | default('127.0.0.1') }}"
            timeout: "{{ validation_timeout }}"
            delay: "{{ health_check_delay }}"
          loop:
            - { port: 80, host: "127.0.0.1", service: "HTTP" }
            - { port: 443, host: "127.0.0.1", service: "HTTPS" }
            - { port: 8080, host: "127.0.0.1", service: "Traefik" }
          tags: [validation, health, ports, critical]

        - name: "Validate service health endpoints"
          ansible.builtin.uri:
            url: "{{ item.url }}"
            method: GET
            timeout: "{{ service_validation.timeout }}"
            status_code: [200, 302, 401]
          loop:
            - { url: "http://127.0.0.1:8080/ping", service: "Traefik" }
            - { url: "http://127.0.0.1:3000/", service: "Homepage" }
            - { url: "http://127.0.0.1:3001/api/health", service: "Grafana" }
          register: health_endpoints
          retries: "{{ service_validation.retries }}"
          delay: "{{ health_check_delay }}"
          until: item.status in [200, 302, 401]
          tags: [validation, health, endpoints, critical]

      tags: [validation, health, connectivity, critical]

  # COMMENT: Post-validation tasks with comprehensive reporting
  post_tasks:
    # COMMENT: Generate comprehensive validation report
    - name: "Generate validation report"
      block:
        - name: "Create validation report directory"
          ansible.builtin.file:
            path: "/var/log/ansible-validation"
            state: directory
            mode: '0755'
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
          tags: [validation, report, setup]

        - name: "Generate system resource report"
          ansible.builtin.template:
            src: templates/validation_report.j2
            dest: "/var/log/ansible-validation/system_validation_{{ deployment_timestamp }}.md"
            mode: '0644'
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
          vars:
            validation_data:
              timestamp: "{{ deployment_timestamp }}"
              hostname: "{{ inventory_hostname }}"
              environment: "{{ deployment_environment }}"
              system_status: "{{ system_status.stdout_lines }}"
              docker_networks: "{{ docker_networks.stdout_lines }}"
              ssl_expiration: "{{ ssl_expiration.stdout_lines }}"
              health_endpoints: "{{ health_endpoints.results }}"
          tags: [validation, report, generation]

        - name: "Display validation summary"
          ansible.builtin.debug:
            msg: |
              ========================================
              VALIDATION SUMMARY
              ========================================

              Deployment Target: {{ inventory_hostname }}
              Validation Timestamp: {{ deployment_timestamp }}
              Environment: {{ deployment_environment }}

              System Resources:
              - CPU Usage: {{ cpu_usage.stdout }}% (Threshold: {{ validation_thresholds.cpu_critical }}%)
              - Memory Usage: {{ memory_usage.stdout }}% (Threshold: {{ validation_thresholds.memory_critical }}%)
              - Disk Usage: {{ disk_usage.stdout }}% (Threshold: {{ validation_thresholds.disk_critical }}%)

              Service Health:
              - HTTP (Port 80): OK
              - HTTPS (Port 443): OK
              - Traefik (Port 8080): OK

              SSL/TLS Status:
              - Certificate Valid: {{ 'YES' if ssl_validation.status == 200 else 'NO' }}
              - Expiration: {{ ssl_expiration.stdout_lines[-1] if ssl_expiration.stdout_lines else 'UNKNOWN' }}

              Validation Report: /var/log/ansible-validation/system_validation_{{ deployment_timestamp }}.md

              ========================================
          tags: [validation, report, summary]

      tags: [validation, report, completion]

    # COMMENT: Log validation completion for audit trail
    - name: "Log validation completion"
      ansible.builtin.lineinfile:
        path: "/var/log/ansible-deployments.log"
        line: "{{ deployment_timestamp }} - Deployment validation completed successfully on {{ inventory_hostname }}"
      delegate_to: localhost
      run_once: yes
      tags: [logging, completion, validation]

    # COMMENT: Send validation notification
    - name: "Send validation completion notification"
      ansible.builtin.uri:
        url: "{{ notification_webhook_url }}"
        method: POST
        body_format: json
        body: |
          {
            "text": "Deployment validation completed successfully on {{ inventory_hostname }}",
            "timestamp": "{{ deployment_timestamp }}",
            "environment": "{{ deployment_environment }}",
            "validation_status": "completed",
            "report_location": "/var/log/ansible-validation/system_validation_{{ deployment_timestamp }}.md"
          }
      when: notification_webhook_url is defined and notification_webhook_url != ''
      tags: [notification, completion, validation]

  # COMMENT: Error handling and validation procedures
  handlers:
    # COMMENT: Handle validation failures
    - name: "handle_validation_failure"
      block:
        - name: "Log validation failure"
          ansible.builtin.lineinfile:
            path: "/var/log/ansible-deployments.log"
            line: "{{ deployment_timestamp }} - VALIDATION FAILED on {{ inventory_hostname }}: {{ validation_failure_reason | default('Unknown error') }}"
          tags: [handlers, validation, failure]

        - name: "Send validation failure notification"
          ansible.builtin.uri:
            url: "{{ notification_webhook_url }}"
            method: POST
            body_format: json
            body: |
              {
                "text": "VALIDATION FAILED on {{ inventory_hostname }}",
                "timestamp": "{{ deployment_timestamp }}",
                "environment": "{{ deployment_environment }}",
                "failure_reason": "{{ validation_failure_reason | default('Unknown error') }}",
                "action_required": "immediate"
              }
          when: notification_webhook_url != '' and notification_webhook_url is defined
          tags: [handlers, validation, failure, notification]

    # COMMENT: Restart services after validation
    - name: "restart_failed_services"
      ansible.builtin.service:
        name: "{{ item }}"
        state: restarted
        enabled: yes
      loop: "{{ failed_services | default([]) }}"
      tags: [handlers, restart, services]

  # COMMENT: Add proper error handling and notification
  # COMMENT: Ensure all validation tasks are idempotent and can run multiple times safely
  # COMMENT: All validation includes proper error handling and comprehensive reporting
