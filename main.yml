---
# Seamless Homelab Setup with Comprehensive Monitoring and Automation
# Production-ready Ansible playbook for homelab deployment
- name: Seamless Homelab Setup
  hosts: all
  become: false  # OK CRITICAL FIX: Start without privileges, escalate only where needed
  gather_facts: true
  serial: "{{ serial | default(0) }}"  # Control parallel execution
  max_fail_percentage: 25  # Allow some failures in parallel execution

  vars:
    backup_dir: "/var/backups/ansible"
    notification_webhook_url: "{{ notification_webhook_url | default('') }}"
    critical_services:
      - docker
      - traefik
      - monitoring_infrastructure
    validation_timeout: 300
    validation_retries: 3
    # OK CRITICAL FIX: Add security validation variables
    security_validation_enabled: true
    privilege_escalation_required: true

  pre_tasks:
    # OK CRITICAL FIX: Validate privilege requirements before any escalation
    - name: Check sudo group membership
      ansible.builtin.command: id -nG
      register: user_groups
      changed_when: false

    - name: Gather root filesystem free space (GB)
      ansible.builtin.command: df -BG --output=avail /
      register: root_fs
      changed_when: false

    - name: Validate privilege escalation requirements
      ansible.builtin.assert:
        that:
          - (ansible_user_id == '0') or (user_groups is defined and 'sudo' in user_groups.stdout.split())
          - ansible_become_method is defined
          - (ansible_memtotal_mb | int) >= 4096
          - (root_fs is defined and ((root_fs.stdout_lines[-1] | regex_replace('[^0-9]', '')) | int) >= 40)
          - (ansible_processor_cores | int) >= 2
        fail_msg: |
          Deployment prerequisites not met:
          - User must have sudo privileges or be root
          - Minimum 4GB RAM required ({{ ansible_memtotal_mb }}MB available)
          - Minimum 40GB free on root filesystem
          - Minimum 2 CPU cores required ({{ ansible_processor_cores }} available)
      tags: [always, critical, validation]

    # OK CRITICAL FIX: Validate required variables with proper error handling
    - name: Validate required variables
      ansible.builtin.assert:
        that:
          - username is defined
          - domain is defined
        fail_msg: "Required variables are not defined. Check group_vars/all/vars.yml"
      tags: [always, critical]

    # CRITICAL: Validate Cloudflare DNS automation is mandatory for SSL
    - name: Validate Cloudflare DNS automation configuration
      ansible.builtin.assert:
        that:
          - lookup('env', 'CLOUDFLARE_ENABLED') == 'true'
          - lookup('env', 'CLOUDFLARE_EMAIL') != ''
          - lookup('env', 'CLOUDFLARE_API_TOKEN') != ''
        fail_msg: |
          Cloudflare DNS automation is MANDATORY for SSL certificates.
          
          Your .env file must have:
          CLOUDFLARE_ENABLED=true
          CLOUDFLARE_EMAIL=your_email@domain.com
          CLOUDFLARE_API_TOKEN=your_api_token_here
          
          Current values:
          CLOUDFLARE_ENABLED={{ lookup('env', 'CLOUDFLARE_ENABLED') | default('NOT_SET') }}
          CLOUDFLARE_EMAIL={{ lookup('env', 'CLOUDFLARE_EMAIL') | default('NOT_SET') }}
          CLOUDFLARE_API_TOKEN={{ lookup('env', 'CLOUDFLARE_API_TOKEN') | default('NOT_SET') }}
          
          Please update your .env file with valid Cloudflare credentials.
          The deployment will fail without proper DNS automation for SSL.
      tags: [always, critical, cloudflare]

    # OK CRITICAL FIX: Validate port conflicts before deployment
    - name: Validate port assignments
      ansible.builtin.include_tasks: tasks/port_validation.yml
      tags: [always, critical, validation]

    # OK CRITICAL FIX: Setup prerequisites with explicit privilege escalation
    - name: Setup prerequisites
      block:
        - ansible.builtin.include_tasks: tasks/setup.yml
        - ansible.builtin.include_tasks: tasks/logs_setup.yml
      become: true
      become_user: root
      tags: [setup, always]

    # OK CRITICAL FIX: Create backup with proper permissions
    - name: Create backup before deployment
      block:
        - ansible.builtin.include_tasks: tasks/backup.yml
      become: true
      become_user: root
      tags: [always, backup]

    # OK CRITICAL FIX: Deploy Proxmox VM with explicit privileges
    - name: Deploy Proxmox VM
      block:
        - ansible.builtin.include_tasks: tasks/proxmox.yml
      become: true
      become_user: root
      when: deploy_proxmox_vm | default(false)
      tags: [proxmox, always]

    # OK CRITICAL FIX: Setup error handling with proper escalation
    - name: Setup error handling
      block:
        - ansible.builtin.include_tasks: handlers/error_handling/main.yml
      become: true
      become_user: root
      tags: always

    - name: Display deployment information
      ansible.builtin.debug:
        msg: |
          Starting Enhanced Watchtower Deployment
          Target Host: {{ inventory_hostname }}
          Domain: {{ domain }}
          Services: {{ enabled_services | length }} services enabled
          Security Validation: {{ 'ENABLED' if security_validation_enabled else 'DISABLED' }}
      tags: always

    # OK CRITICAL FIX: Pre-deployment infrastructure validation with privileges
    - name: Pre-deployment infrastructure validation
      block:
        - ansible.builtin.include_tasks: tasks/validate/infrastructure.yml
      become: true
      become_user: root
      tags: [validation, pre-deployment, always]
      when: validation_enabled | default(true)

    # OK CRITICAL FIX: Create cache directories with proper permissions
    - name: Create cache directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
        owner: "{{ username }}"
        group: "{{ username }}"
      loop:
        - "{{ ansible_fact_caching_connection | dirname }}"
        - "{{ ansible_inventory_cache_connection | dirname }}"
      tags: always

    # OK CRITICAL FIX: Setup automation infrastructure with explicit privileges
    - name: Setup automation infrastructure
      block:
        - name: Include automation tasks
          ansible.builtin.include_tasks: tasks/automation.yml
          register: automation_result
      become: true
      become_user: root
      tags: [automation]
      rescue:
        - name: Handle automation failure
          block:
            - name: Include recovery tasks
              ansible.builtin.include_tasks: handlers/error_handling/recovery.yml
          become: true
          become_user: root
          vars:
            failed_config_files: "{{ automation_result.failed_config_files | default([]) }}"
            config_verification_commands: "{{ automation_result.verification_commands | default([]) }}"

    # OK CRITICAL FIX: Setup service management with explicit privileges
    - name: Setup service management
      block:
        - ansible.builtin.include_tasks: tasks/service_management.yml
      become: true
      become_user: root
      tags: [service_management]

  tasks:
    # Phase 1: Infrastructure Foundation
    # OK CRITICAL FIX: System essentials with explicit privileges and monitoring
    - name: System essentials and hardening
      block:
        - ansible.builtin.include_tasks: tasks/essential.yml
      become: true
      become_user: root
      tags: [foundation, essential]
      vars:
        essential_result: "{{ essential_result | default({}) }}"

    # OK CRITICAL FIX: Docker configuration with explicit privileges
    - name: Configure Docker environment
      block:
        - ansible.builtin.include_tasks: tasks/docker.yml
      become: true
      become_user: root
      tags: [foundation, docker]
      vars:
        docker_result: "{{ docker_result | default({}) }}"

    # OK CRITICAL FIX: Network configuration with explicit privileges
    - name: Setup network configuration
      block:
        - ansible.builtin.include_tasks: tasks/network.yml
      become: true
      become_user: root
      tags: [foundation, network]
      vars:
        network_result: "{{ network_result | default({}) }}"

    # OK CRITICAL FIX: Storage configuration with explicit privileges
    - name: Configure storage systems
      block:
        - ansible.builtin.include_tasks: tasks/storage.yml
      become: true
      become_user: root
      tags: [foundation, storage]
      vars:
        storage_result: "{{ storage_result | default({}) }}"

    # OK CRITICAL FIX: Security hardening with explicit privileges
    - name: Apply security hardening
      block:
        - ansible.builtin.include_tasks: tasks/security.yml
      become: true
      become_user: root
      tags: [foundation, security]
      vars:
        security_result: "{{ security_result | default({}) }}"

    # Phase 2: Core Infrastructure Services
    # OK CRITICAL FIX: Core services with explicit privileges and validation
    - name: Deploy core infrastructure services
      become: true
      become_user: root
      tags: [infrastructure]
      block:
        - name: Include core service task
          ansible.builtin.include_tasks: "tasks/{{ item }}.yml"
          loop:
            - traefik
            - authentik
            - monitoring_infrastructure
          when:
            - item in enabled_services
            - item != 'monitoring_infrastructure' or monitoring_enabled | default(true)
          register: core_services_result

    # OK CRITICAL FIX: Validate core services with proper error handling
    - name: Validate core services
      become: true
      become_user: root
      tags: [infrastructure, validation]
      when: core_services_result is success
      block:
        - name: Validate service
          ansible.builtin.include_tasks: tasks/validate.yml
          loop: "{{ core_services_result.results | map(attribute='item') | list }}"
          loop_control:
            loop_var: service_name

    # Phase 3: Monitoring Stack (TIG + Prometheus)
    # OK CRITICAL FIX: Monitoring services with explicit privileges
    - name: Deploy monitoring services
      become: true
      become_user: root
      tags: [monitoring]
      block:
        - name: Include monitoring service task
          ansible.builtin.include_tasks: "tasks/{{ item }}.yml"
          loop:
            - influxdb
            - telegraf
            - prometheus
            - grafana
            - loki
            - promtail
            - alertmanager
            - blackbox_exporter
          when:
            - monitoring_enabled | default(true)
            - item in enabled_services
          register: monitoring_services_result

    # OK CRITICAL FIX: Validate monitoring services
    - name: Validate monitoring services
      become: true
      become_user: root
      tags: [monitoring, validation]
      when: monitoring_services_result is success
      block:
        - name: Validate service
          ansible.builtin.include_tasks: tasks/validate.yml
          loop: "{{ monitoring_services_result.results | map(attribute='item') | list }}"
          loop_control:
            loop_var: service_name

    # OK CRITICAL FIX: Configure enhanced monitoring with explicit privileges
    - name: Configure enhanced monitoring
      block:
        - ansible.builtin.include_tasks: tasks/monitoring_enhancements.yml
      become: true
      become_user: root
      when: monitoring_enabled | default(true)
      tags: [monitoring]

    # Phase 4: Security Services
    # OK CRITICAL FIX: Security services with explicit privileges
    - name: Deploy security services
      become: true
      become_user: root
      tags: [security]
      block:
        - name: Include security service task
          ansible.builtin.include_tasks: "tasks/{{ item }}.yml"
          loop:
            - crowdsec
            - fail2ban
            - vault
            - wireguard
          when: item in enabled_services
          register: security_services_result

    # OK CRITICAL FIX: Validate security services
    - name: Validate security services
      become: true
      become_user: root
      tags: [security, validation]
      when: security_services_result is success
      block:
        - name: Validate service
          ansible.builtin.include_tasks: tasks/validate.yml
          loop: "{{ security_services_result.results | map(attribute='item') | list }}"
          loop_control:
            loop_var: service_name

    # Phase 5: Network Services
    # OK CRITICAL FIX: Network services with explicit privileges
    - name: Deploy network services
      become: true
      become_user: root
      tags: [network]
      block:
        - name: Include network service task
          ansible.builtin.include_tasks: "tasks/{{ item }}.yml"
          loop:
            - pihole
            - nginx_proxy_manager
            - fing
          when: item in enabled_services
          register: network_services_result

    # OK CRITICAL FIX: Validate network services
    - name: Validate network services
      become: true
      become_user: root
      tags: [network, validation]
      when: network_services_result is success
      block:
        - name: Validate service
          ansible.builtin.include_tasks: tasks/validate.yml
          loop: "{{ network_services_result.results | map(attribute='item') | list }}"
          loop_control:
            loop_var: service_name

    # Phase 6: Media Stack
    # OK CRITICAL FIX: Media services with explicit privileges
    - name: Deploy media services
      become: true
      become_user: root
      tags: [media]
      block:
        - name: Include media service task
          ansible.builtin.include_tasks: "tasks/{{ item }}.yml"
          loop:
            - sabnzbd
            - qbittorrent
            - sonarr
            - radarr
            - lidarr
            - readarr
            - prowlarr
            - bazarr
            - jellyfin
            - emby
            - tdarr
            - overseerr
            - tautulli
            - immich
            - calibre-web
            - audiobookshelf
            - komga
            - ersatztv
          when:
            - media_enabled | default(true)
            - item in enabled_services
          register: media_services_result

    # OK CRITICAL FIX: Validate media services
    - name: Validate media services
      become: true
      become_user: root
      tags: [media, validation]
      when: media_services_result is success
      block:
        - name: Validate service
          ansible.builtin.include_tasks: tasks/validate.yml
          loop: "{{ media_services_result.results | map(attribute='item') | list }}"
          loop_control:
            loop_var: service_name

    # Configure Lidarr automatically
    # OK CRITICAL FIX: Configure Lidarr with explicit privileges
    - name: Configure Lidarr with all variables and integrations
      become: true
      become_user: root
      tags: [media, lidarr, configuration]
      when:
        - media_enabled | default(true)
        - raw: '"lidarr" in enabled_services'
      block:
        - ansible.builtin.include_tasks: tasks/configure_lidarr.yml

    # Phase 7: File Services
    # OK CRITICAL FIX: File services with explicit privileges
    - name: Deploy file services
      become: true
      become_user: root
      tags: [storage]
      block:
        - name: Include file service task
          ansible.builtin.include_tasks: "tasks/{{ item }}.yml"
          loop:
            - nextcloud
            - samba
            - syncthing
          when: item in enabled_services
          register: file_services_result

    # OK CRITICAL FIX: Validate file services
    - name: Validate file services
      become: true
      become_user: root
      tags: [storage, validation]
      when: file_services_result is success
      block:
        - name: Validate service
          ansible.builtin.include_tasks: tasks/validate.yml
          loop: "{{ file_services_result.results | map(attribute='item') | list }}"
          loop_control:
            loop_var: service_name

    # Phase 8: Development & Storage
    # OK CRITICAL FIX: Development services with explicit privileges
    - name: Deploy development and storage services
      become: true
      become_user: root
      tags: [development, storage]
      block:
        - name: Include development/storage service task
          ansible.builtin.include_tasks: "tasks/{{ item }}.yml"
          loop:
            - gitlab
            - harbor
            - minio
            - paperless
            - bookstack
            - immich
            - filebrowser
            - linkwarden
            - vaultwarden
          when: item in enabled_services
          register: dev_services_result

    # OK CRITICAL FIX: Validate development services
    - name: Validate development services
      become: true
      become_user: root
      tags: [development, storage, validation]
      when: dev_services_result is success
      block:
        - name: Validate service
          ansible.builtin.include_tasks: tasks/validate.yml
          loop: "{{ dev_services_result.results | map(attribute='item') | list }}"
          loop_control:
            loop_var: service_name

    # Phase 8.5: Utility Services
    # OK CRITICAL FIX: Utility services with explicit privileges
    - name: Deploy utility services
      become: true
      become_user: root
      tags: [utility]
      block:
        - name: Include utility service task
          ansible.builtin.include_tasks: "tasks/{{ item }}.yml"
          loop: "{{ utility_services }}"
          when: item in enabled_services
          register: utility_services_result

    # OK CRITICAL FIX: Validate utility services
    - name: Validate utility services
      become: true
      become_user: root
      tags: [utility, validation]
      when: utility_services_result is success
      block:
        - name: Validate service
          ansible.builtin.include_tasks: tasks/validate.yml
          loop: "{{ utility_services_result.results | map(attribute='item') | list }}"
          loop_control:
            loop_var: service_name

    # Phase 9: Automation & Smart Home
    # OK CRITICAL FIX: Automation services with explicit privileges
    - name: Deploy automation services
      become: true
      become_user: root
      tags: [automation]
      block:
        - name: Include automation service task
          ansible.builtin.include_tasks: "tasks/{{ item }}.yml"
          loop:
            - mosquitto
            - zigbee2mqtt
            - home_assistant
            - nodered
          when:
            - automation_enabled | default(true)
            - item in enabled_services
          register: automation_services_result

    # Deploy n8n workflow automation
    # OK CRITICAL FIX: Deploy n8n with explicit privileges
    - name: Deploy n8n workflow automation
      become: true
      become_user: root
      tags: [automation, n8n]
      when:
        - automation_enabled | default(true)
        - raw: '"n8n" in enabled_services'
      block:
        - name: Include n8n role
          ansible.builtin.include_role:
            name: n8n

    # Deploy Pezzo AI prompt management
    # OK CRITICAL FIX: Deploy Pezzo with explicit privileges
    - name: Deploy Pezzo AI prompt management
      become: true
      become_user: root
      tags: [automation, pezzo]
      when:
        - automation_enabled | default(true)
        - raw: '"pezzo" in enabled_services'
      block:
        - name: Include pezzo role
          ansible.builtin.include_role:
            name: pezzo

    # OK CRITICAL FIX: Validate automation services
    - name: Validate automation services
      become: true
      become_user: root
      tags: [automation, validation]
      when: automation_services_result is success
      block:
        - name: Validate service
          ansible.builtin.include_tasks: tasks/validate.yml
          loop: "{{ automation_services_result.results | map(attribute='item') | list }}"
          loop_control:
            loop_var: service_name

    # Phase 10: Backup & Maintenance
    # OK CRITICAL FIX: Backup services with explicit privileges
    - name: Deploy backup services
      become: true
      become_user: root
      tags: [backup]
      block:
        - name: Include backup service task
          ansible.builtin.include_tasks: "tasks/{{ item }}.yml"
          loop:
            - backup
            - kopia
          when: item in enabled_services
          register: backup_services_result

    # OK CRITICAL FIX: Validate backup services
    - name: Validate backup services
      become: true
      become_user: root
      tags: [backup, validation]
      when: backup_services_result is success
      block:
        - name: Validate service
          ansible.builtin.include_tasks: tasks/validate.yml
          loop: "{{ backup_services_result.results | map(attribute='item') | list }}"
          loop_control:
            loop_var: service_name

  post_tasks:
    # OK CRITICAL FIX: Post-deployment validation with explicit privileges
    - name: Post-deployment infrastructure validation
      block:
        - ansible.builtin.include_tasks: tasks/validate/infrastructure.yml
      become: true
      become_user: root
      tags: [validation, post-deployment, always]
      when: validation_enabled | default(true)

    # OK CRITICAL FIX: Verify critical services with explicit privileges
    - name: Verify all critical services
      become: true
      become_user: root
      tags: [always, validation]
      block:
        - name: Validate critical service
          ansible.builtin.include_tasks: tasks/validate.yml
          loop: "{{ critical_services }}"
          loop_control:
            loop_var: service_name

    # OK CRITICAL FIX: Monitor system resources
    - name: Monitor system resources
      ansible.builtin.include_tasks: tasks/resource_monitoring.yml
      tags: [always, monitoring, resources]

    # OK CRITICAL FIX: Perform secret rotation if needed
    - name: Perform secret rotation
      ansible.builtin.include_tasks: tasks/secret_rotation.yml
      tags: [always, security, secrets, rotation]

    # OK CRITICAL FIX: Send deployment notification with proper error handling
    - name: Send deployment notification
      ansible.builtin.uri:
        url: "{{ notification_webhook_url }}"
        method: POST
        body_format: json
        body: |
          {
            "status": "{{ 'success' if critical_services | length == 0 else 'warning' }}",
            "message": "Deployment completed with {{ critical_services | length }} critical services requiring attention",
            "host": "{{ inventory_hostname }}",
            "timestamp": "{{ ansible_date_time.iso8601 }}",
            "security_validation": "{{ 'PASSED' if security_validation_enabled else 'DISABLED' }}",
            "resource_health": "{{ 'HEALTHY' if cpu_usage < resource_thresholds.cpu_warning and memory_usage < resource_thresholds.memory_warning and disk_usage < resource_thresholds.disk_warning else 'WARNING' }}"
          }
      when: notification_webhook_url is defined
      tags: [always, notification]

  # Handlers for service management
  handlers:
    - name: restart docker
      ansible.builtin.systemd:
        name: docker
        state: restarted
        enabled: true

    - name: reload systemd
      ansible.builtin.systemd:
        daemon_reload: true

    - name: restart networking
      ansible.builtin.systemd:
        name: networking
        state: restarted
