---
# COMMENT: Production-ready Homepage, Grafana, and Authentik Automation Integration Playbook
# COMMENT: Comprehensive deployment and automation workflow for all three services with security validation
# COMMENT: Generated by: {{ ansible_managed }}
# COMMENT: Timestamp: {{ ansible_date_time.iso8601 }}
# COMMENT: Environment: {{ deployment_environment | default('production') }}

- name: "Production Homepage, Grafana, and Authentik Automation Integration"
  hosts: "{{ target_hosts | default('all') }}"
  # COMMENT: Use explicit privilege escalation control for security
  become: true
  become_method: sudo
  become_user: root
  # COMMENT: Enable fact gathering for system validation
  gather_facts: true
  # COMMENT: Add deployment metadata for tracking and auditing
  vars:
    deployment_timestamp: "{{ ansible_date_time.iso8601 }}"
    deployment_user: "{{ ansible_user }}"
    deployment_environment: "{{ deployment_env | default('production') }}"
    
    # COMMENT: Enable automation for all services with validation
    homepage_automation_enabled: "{{ homepage_automation_enabled | default(true) | bool }}"
    grafana_automation_enabled: "{{ grafana_automation_enabled | default(true) | bool }}"
    authentik_automation_enabled: "{{ authentik_automation_enabled | default(true) | bool }}"

    # COMMENT: Deployment phases with proper sequencing
    deployment_phases:
      - "pre_deployment"
      - "authentik_deployment"
      - "homepage_deployment"
      - "grafana_deployment"
      - "integration_configuration"
      - "validation_and_testing"
      - "post_deployment"

    # COMMENT: Service dependencies with validation
    service_dependencies:
      authentik:
        - "postgresql"
        - "redis"
        - "docker"
      homepage:
        - "authentik"
        - "docker"
        - "traefik"
      grafana:
        - "authentik"
        - "postgresql"
        - "prometheus"
        - "docker"

    # COMMENT: Integration configuration with security validation
    integration_config:
      oauth_providers:
        - "homepage"
        - "grafana"
        - "paperless"
        - "media_services"
        - "monitoring"

      monitoring_integration:
        - "prometheus"
        - "grafana"
        - "alertmanager"
        - "loki"

      backup_integration:
        - "database"
        - "configuration"
        - "certificates"
        - "user_data"

      traefik_integration:
        - "reverse_proxy"
        - "ssl_termination"
        - "forward_auth"
        - "security_headers"

    # COMMENT: Security configuration for production deployment
    security_config:
      ssl_enabled: "{{ ssl_enabled | default(true) | bool }}"
      oauth_enabled: "{{ oauth_enabled | default(true) | bool }}"
      security_headers_enabled: "{{ security_headers_enabled | default(true) | bool }}"
      audit_logging_enabled: "{{ audit_logging_enabled | default(true) | bool }}"

    # COMMENT: Validation timeouts and retries for production reliability
    validation_timeout: "{{ validation_timeout_seconds | default(300) }}"
    validation_retries: "{{ validation_retry_count | default(3) }}"

  # COMMENT: Pre-deployment validation tasks for production readiness
  pre_tasks:
    # COMMENT: Display deployment information with comprehensive details
    - name: "Display deployment information"
      ansible.builtin.debug:
        msg: |
          ========================================
          PRODUCTION HOMEPAGE, GRAFANA, AND AUTHENTIK AUTOMATION
          ========================================

          Deployment Target: {{ inventory_hostname }}
          Deployment User: {{ deployment_user }}
          Deployment Environment: {{ deployment_environment }}
          Deployment Timestamp: {{ deployment_timestamp }}
          Automation Enabled: {{ homepage_automation_enabled and grafana_automation_enabled and authentik_automation_enabled }}

          Services to Deploy:
          - Authentik (Identity Provider)
          - Homepage (Dashboard)
          - Grafana (Monitoring)

          Integration Features:
          - OAuth/OpenID Connect Authentication
          - Automated Service Discovery
          - Monitoring Integration
          - Backup Automation
          - Traefik Integration
          - Security Hardening

          Security Configuration:
          - SSL Enabled: {{ security_config.ssl_enabled }}
          - OAuth Enabled: {{ security_config.oauth_enabled }}
          - Security Headers: {{ security_config.security_headers_enabled }}
          - Audit Logging: {{ security_config.audit_logging_enabled }}

          ========================================
      tags: [always, info, deployment]

    # COMMENT: Validate system prerequisites for production deployment
    - name: "Validate system prerequisites"
      block:
        - name: "Check operating system compatibility"
          ansible.builtin.assert:
            that:
              - ansible_os_family == "Debian" or ansible_os_family == "RedHat"
              - ansible_architecture in ["x86_64", "amd64", "aarch64", "arm64"]
            fail_msg: |
              Unsupported operating system or architecture:
              - OS Family: {{ ansible_os_family }}
              - Architecture: {{ ansible_architecture }}
              
              Supported:
              - OS: Debian, RedHat
              - Architecture: x86_64, amd64, aarch64, arm64

        - name: "Check available disk space"
          ansible.builtin.command: df -BG --output=avail /
          register: disk_space_check
          changed_when: false

        - name: "Validate disk space requirements"
          ansible.builtin.assert:
            that:
              - (disk_space_check.stdout_lines[-1] | regex_replace('[^0-9]', '')) | int >= 20
            fail_msg: |
              Insufficient disk space for deployment:
              - Available: {{ disk_space_check.stdout_lines[-1] }}
              - Required: 20GB minimum
              
              Please free up disk space before continuing.

        - name: "Check system resources"
          ansible.builtin.assert:
            that:
              - (ansible_memtotal_mb | int) >= 4096
              - (ansible_processor_cores | int) >= 2
            fail_msg: |
              Insufficient system resources:
              - RAM: {{ ansible_memtotal_mb }}MB (minimum 4GB required)
              - CPU Cores: {{ ansible_processor_cores }} (minimum 2 required)

        - name: "Validate Docker installation"
          ansible.builtin.assert:
            that:
              - ansible_facts.services['docker.service'] is defined
              - ansible_facts.services['docker.service'].state == "running"
            fail_msg: |
              Docker service is not running or not installed.
              Please ensure Docker is properly installed and running.

      tags: [always, validation, prerequisites]

    # COMMENT: Validate required variables for production deployment
    - name: "Validate required variables"
      ansible.builtin.assert:
        that:
          - domain is defined and domain != ''
          - username is defined and username != ''
          - deployment_environment in ['production', 'staging', 'development']
        fail_msg: |
          Required variables are not properly defined:
          - domain: {{ domain | default('NOT_SET') }}
          - username: {{ username | default('NOT_SET') }}
          - deployment_environment: {{ deployment_environment | default('NOT_SET') }}
          
          Please check group_vars/all/vars.yml and ensure all required variables are set.
      tags: [always, validation, variables]

    # COMMENT: Validate Cloudflare configuration for SSL certificates
    - name: "Validate Cloudflare DNS automation configuration"
      ansible.builtin.assert:
        that:
          - cloudflare_enabled | default(false) | bool
          - cloudflare_email is defined and cloudflare_email != ''
          - cloudflare_api_token is defined and cloudflare_api_token != ''
        fail_msg: |
          Cloudflare DNS automation is REQUIRED for SSL certificates.
          
          Your group_vars/all/common.yml must have:
          cloudflare_enabled: true
          cloudflare_email: "your_email@domain.com"
          cloudflare_api_token: "{{ vault_cloudflare_api_token }}"
          
          Current values:
          cloudflare_enabled: {{ cloudflare_enabled | default('NOT_SET') }}
          cloudflare_email: {{ cloudflare_email | default('NOT_SET') }}
          cloudflare_api_token: {{ 'SET' if cloudflare_api_token is defined else 'NOT_SET' }}
          
          Please update your configuration with valid Cloudflare credentials.
          The deployment will fail without proper DNS automation for SSL.
      tags: [always, validation, cloudflare, ssl]

    # COMMENT: Create deployment log entry for audit trail
    - name: "Create deployment log entry"
      ansible.builtin.lineinfile:
        path: "/var/log/ansible-deployments.log"
        line: "{{ deployment_timestamp }} - Starting Homepage/Grafana/Authentik automation by {{ deployment_user }} on {{ inventory_hostname }}"
        create: yes
        mode: '0644'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      delegate_to: localhost
      run_once: yes
      tags: [always, logging]

  # COMMENT: Main deployment tasks with comprehensive error handling
  tasks:
    # COMMENT: Phase 1: Pre-deployment setup
    - name: "Pre-deployment setup and validation"
      block:
        - name: "Create required directories"
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            mode: '0755'
            owner: "{{ username }}"
            group: "{{ username }}"
          loop:
            - "/opt/services/authentik"
            - "/opt/services/homepage"
            - "/opt/services/grafana"
            - "/var/log/authentik"
            - "/var/log/homepage"
            - "/var/log/grafana"
            - "/var/lib/authentik"
            - "/var/lib/homepage"
            - "/var/lib/grafana"
          tags: [setup, directories]

        - name: "Setup Docker networks for service isolation"
          ansible.builtin.command: "docker network create {{ item }} --driver bridge --internal false"
          loop:
            - "authentik_network"
            - "homepage_network"
            - "grafana_network"
          register: network_creation
          failed_when: network_creation.rc != 0 and 'already exists' not in network_creation.stderr
          changed_when: network_creation.rc == 0
          tags: [setup, docker, networks]

      tags: [pre_deployment, setup]

    # COMMENT: Phase 2: Authentik deployment
    - name: "Deploy Authentik identity provider"
      block:
        - name: "Include Authentik deployment tasks"
          ansible.builtin.include_tasks: "{{ playbook_dir }}/../roles/authentik/tasks/main.yml"
          tags: [authentik, deployment]

        - name: "Wait for Authentik to be ready"
          ansible.builtin.wait_for:
            port: "{{ authentik_port | default(9000) }}"
            host: "127.0.0.1"
            timeout: "{{ validation_timeout }}"
            delay: 10
          tags: [authentik, validation, health_check]

        - name: "Validate Authentik health"
          ansible.builtin.uri:
            url: "http://127.0.0.1:{{ authentik_port | default(9000) }}/if/user/"
            method: GET
            timeout: 30
          register: authentik_health_check
          retries: "{{ validation_retries }}"
          delay: 10
          until: authentik_health_check.status == 200
          tags: [authentik, validation, health_check]

      when: authentik_automation_enabled | bool
      tags: [authentik_deployment, authentik]

    # COMMENT: Phase 3: Homepage deployment
    - name: "Deploy Homepage dashboard"
      block:
        - name: "Include Homepage deployment tasks"
          ansible.builtin.include_tasks: "{{ playbook_dir }}/../roles/homepage/tasks/main.yml"
          tags: [homepage, deployment]

        - name: "Wait for Homepage to be ready"
          ansible.builtin.wait_for:
            port: "{{ homepage_port | default(3000) }}"
            host: "127.0.0.1"
            timeout: "{{ validation_timeout }}"
            delay: 10
          tags: [homepage, validation, health_check]

        - name: "Validate Homepage health"
          ansible.builtin.uri:
            url: "http://127.0.0.1:{{ homepage_port | default(3000) }}/"
            method: GET
            timeout: 30
          register: homepage_health_check
          retries: "{{ validation_retries }}"
          delay: 10
          until: homepage_health_check.status == 200
          tags: [homepage, validation, health_check]

      when: homepage_automation_enabled | bool
      tags: [homepage_deployment, homepage]

    # COMMENT: Phase 4: Grafana deployment
    - name: "Deploy Grafana monitoring"
      block:
        - name: "Include Grafana deployment tasks"
          ansible.builtin.include_tasks: "{{ playbook_dir }}/../roles/grafana/tasks/main.yml"
          tags: [grafana, deployment]

        - name: "Wait for Grafana to be ready"
          ansible.builtin.wait_for:
            port: "{{ grafana_port | default(3001) }}"
            host: "127.0.0.1"
            timeout: "{{ validation_timeout }}"
            delay: 10
          tags: [grafana, validation, health_check]

        - name: "Validate Grafana health"
          ansible.builtin.uri:
            url: "http://127.0.0.1:{{ grafana_port | default(3001) }}/api/health"
            method: GET
            timeout: 30
          register: grafana_health_check
          retries: "{{ validation_retries }}"
          delay: 10
          until: grafana_health_check.status == 200
          tags: [grafana, validation, health_check]

      when: grafana_automation_enabled | bool
      tags: [grafana_deployment, grafana]

    # COMMENT: Phase 5: Integration configuration
    - name: "Configure service integration"
      block:
        - name: "Configure OAuth integration between services"
          ansible.builtin.include_tasks: "{{ playbook_dir }}/../roles/authentik/tasks/oauth_integration.yml"
          when: security_config.oauth_enabled | bool
          tags: [integration, oauth]

        - name: "Configure monitoring integration"
          ansible.builtin.include_tasks: "{{ playbook_dir }}/../roles/grafana/tasks/monitoring_integration.yml"
          tags: [integration, monitoring]

        - name: "Configure backup integration"
          ansible.builtin.include_tasks: "{{ playbook_dir }}/../roles/backup/tasks/backup_integration.yml"
          tags: [integration, backup]

        - name: "Configure Traefik integration"
          ansible.builtin.include_tasks: "{{ playbook_dir }}/../roles/traefik/tasks/service_integration.yml"
          tags: [integration, traefik]

      tags: [integration_configuration, integration]

    # COMMENT: Phase 6: Validation and testing
    - name: "Validate and test integration"
      block:
        - name: "Test OAuth flow between services"
          ansible.builtin.include_tasks: "{{ playbook_dir }}/../roles/authentik/tasks/oauth_testing.yml"
          when: security_config.oauth_enabled | bool
          tags: [validation, oauth, testing]

        - name: "Test monitoring data flow"
          ansible.builtin.include_tasks: "{{ playbook_dir }}/../roles/grafana/tasks/monitoring_testing.yml"
          tags: [validation, monitoring, testing]

        - name: "Test backup functionality"
          ansible.builtin.include_tasks: "{{ playbook_dir }}/../roles/backup/tasks/backup_testing.yml"
          tags: [validation, backup, testing]

        - name: "Test Traefik routing"
          ansible.builtin.include_tasks: "{{ playbook_dir }}/../roles/traefik/tasks/routing_testing.yml"
          tags: [validation, traefik, testing]

      tags: [validation_and_testing, validation, testing]

  # COMMENT: Post-deployment tasks with comprehensive validation
  post_tasks:
    # COMMENT: Final validation and health checks
    - name: "Final deployment validation"
      block:
        - name: "Validate all services are accessible"
          ansible.builtin.uri:
            url: "{{ item.url }}"
            method: GET
            timeout: 30
            validate_certs: "{{ security_config.ssl_enabled | bool }}"
          loop:
            - { url: "https://{{ domain }}/", service: "Homepage" }
            - { url: "https://grafana.{{ domain }}/", service: "Grafana" }
            - { url: "https://auth.{{ domain }}/", service: "Authentik" }
          register: final_validation
          retries: "{{ validation_retries }}"
          delay: 10
          until: item.status == 200
          tags: [validation, final, health_check]

        - name: "Validate SSL certificate deployment"
          ansible.builtin.uri:
            url: "https://{{ domain }}/"
            method: GET
            timeout: 30
            validate_certs: true
          register: ssl_validation
          retries: "{{ validation_retries }}"
          delay: 10
          until: ssl_validation.status == 200
          tags: [validation, ssl, critical]

        - name: "Validate security headers"
          ansible.builtin.include_tasks: "{{ playbook_dir }}/../roles/security/tasks/security_headers_validation.yml"
          when: security_config.security_headers_enabled | bool
          tags: [validation, security, headers]

      tags: [post_deployment, validation, final]

    # COMMENT: Log deployment completion for audit trail
    - name: "Log deployment completion"
      ansible.builtin.lineinfile:
        path: "/var/log/ansible-deployments.log"
        line: "{{ deployment_timestamp }} - Homepage/Grafana/Authentik automation completed successfully on {{ inventory_hostname }}"
      delegate_to: localhost
      run_once: yes
      tags: [logging, completion]

    # COMMENT: Send deployment notification
    - name: "Send deployment completion notification"
      ansible.builtin.uri:
        url: "{{ notification_webhook_url }}"
        method: POST
        body_format: json
        body: |
          {
            "text": "Homepage/Grafana/Authentik automation completed successfully on {{ inventory_hostname }}",
            "timestamp": "{{ deployment_timestamp }}",
            "environment": "{{ deployment_environment }}",
            "services_deployed": ["authentik", "homepage", "grafana"],
            "integration_status": "completed"
          }
      when: notification_webhook_url is defined and notification_webhook_url != ''
      tags: [notification, completion]

  # COMMENT: Error handling and rollback procedures
  handlers:
    # COMMENT: Rollback handler for deployment failures
    - name: "rollback_automation_deployment"
      block:
        - name: "Execute automation rollback procedure"
          ansible.builtin.include_tasks: "{{ playbook_dir }}/../tasks/rollback.yml"
          vars:
            rollback_timestamp: "{{ deployment_timestamp }}"
            rollback_reason: "Homepage/Grafana/Authentik automation failure detected"
            rollback_services: ["authentik", "homepage", "grafana"]
          tags: [rollback, emergency, automation]

        - name: "Notify administrators of automation rollback"
          ansible.builtin.uri:
            url: "{{ notification_webhook_url }}"
            method: POST
            body_format: json
            body: |
              {
                "text": "Homepage/Grafana/Authentik automation rollback executed on {{ inventory_hostname }}",
                "timestamp": "{{ deployment_timestamp }}",
                "reason": "{{ rollback_reason }}",
                "services_rolled_back": ["authentik", "homepage", "grafana"]
              }
          when: notification_webhook_url != '' and notification_webhook_url is defined
          tags: [rollback, notification, automation]

    # COMMENT: Restart services after configuration changes
    - name: "restart_authentik"
      ansible.builtin.service:
        name: "authentik"
        state: restarted
        enabled: yes
      tags: [handlers, restart, authentik]

    - name: "restart_homepage"
      ansible.builtin.service:
        name: "homepage"
        state: restarted
        enabled: yes
      tags: [handlers, restart, homepage]

    - name: "restart_grafana"
      ansible.builtin.service:
        name: "grafana"
        state: restarted
        enabled: yes
      tags: [handlers, restart, grafana]

    # COMMENT: Validate configuration after changes
    - name: "validate_automation_configuration"
      ansible.builtin.include_tasks: "{{ playbook_dir }}/../tasks/automation_config_validation.yml"
      tags: [validation, configuration, automation]

  # COMMENT: Add proper error handling and notification
  # COMMENT: Ensure all tasks are idempotent and can run multiple times safely
  # COMMENT: All roles include proper error handling and rollback capabilities
