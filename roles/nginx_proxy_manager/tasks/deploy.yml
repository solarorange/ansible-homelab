---
# Nginx Proxy Manager Deployment Tasks
# Comprehensive deployment with automation and configuration

- name: Create Nginx Proxy Manager directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0755"
  loop:
    - "{{ docker_dir }}/nginx-proxy-manager"
    - "{{ docker_dir }}/nginx-proxy-manager/data"
    - "{{ docker_dir }}/nginx-proxy-manager/data/mysql"
    - "{{ docker_dir }}/nginx-proxy-manager/letsencrypt"
    - "{{ docker_dir }}/nginx-proxy-manager/scripts"
    - "{{ docker_dir }}/nginx-proxy-manager/config"
    - "{{ logs_dir }}/nginx-proxy-manager"
  tags: [nginx_proxy_manager, deploy, setup]

- name: Create Nginx Proxy Manager docker-compose file
  ansible.builtin.template:
    src: docker-compose.yml.j2
    dest: "{{ docker_dir }}/nginx-proxy-manager/docker-compose.yml"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0644"
  notify: Restart nginx proxy manager stack
  tags: [nginx_proxy_manager, deploy, config]

- name: Prepare Nginx Proxy Manager secret files
  ansible.builtin.import_tasks: "../../automation/tasks/secrets.yml"
  vars:
    service_name: "nginx_proxy_manager"
    secret_files: "{{ nginx_proxy_manager_secret_files if nginx_proxy_manager_manage_secret_files else [] }}"
    secret_env_maps:
      - "{{ nginx_proxy_manager_db_env | default({}) }}"
  when: nginx_proxy_manager_manage_secret_files | bool
  tags: [nginx_proxy_manager, deploy, setup]

- name: Validate Nginx Proxy Manager DB env map uses *_FILE for secrets
  ansible.builtin.import_tasks: "../../automation/tasks/validate_secret_env_maps.yml"
  vars:
    env_map_input: "{{ nginx_proxy_manager_db_env | default({}) }}"
  when: nginx_proxy_manager_manage_secret_files | bool
  tags: [nginx_proxy_manager, deploy, validate]

- name: Validate required Nginx Proxy Manager secret files exist
  ansible.builtin.stat:
    path: "{{ docker_dir }}/nginx-proxy-manager/secrets/{{ item }}"
  register: npm_secret_stats
  loop: "{{ nginx_proxy_manager_required_secrets | default([]) }}"
  when: nginx_proxy_manager_manage_secret_files | bool and (nginx_proxy_manager_required_secrets | default([]) | length > 0)

- name: Fail if required Nginx Proxy Manager secret files are missing
  ansible.builtin.assert:
    that: "{{ npm_secret_stats.results | map(attribute='stat.exists') | list | min }}"
    fail_msg: >-
      One or more required secret files are missing under {{ docker_dir }}/nginx-proxy-manager/secrets.
      Missing: {{ (nginx_proxy_manager_required_secrets | default([])) | reject('in', (npm_secret_stats.results | selectattr('stat.exists') | map(attribute='item') | list)) | list }}
  when: nginx_proxy_manager_manage_secret_files | bool and (nginx_proxy_manager_required_secrets | default([]) | length > 0)

- name: Create Nginx Proxy Manager environment file
  ansible.builtin.template:
    src: .env.j2
    dest: "{{ docker_dir }}/nginx-proxy-manager/.env"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0600"
  notify: Restart nginx proxy manager stack
  tags: [nginx_proxy_manager, deploy, config]

- name: Create Nginx Proxy Manager configuration files
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ docker_dir }}/nginx-proxy-manager/{{ item.dest }}"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "{{ item.mode | default('0644') }}"
  loop:
    - src: "nginx.conf.j2"
      dest: "config/nginx.conf"
    - src: "default.conf.j2"
      dest: "config/default.conf"
    - src: "ssl.conf.j2"
      dest: "config/ssl.conf"
    - src: "security.conf.j2"
      dest: "config/security.conf"
    - src: "rate-limiting.conf.j2"
      dest: "config/rate-limiting.conf"
    - src: "waf.conf.j2"
      dest: "config/waf.conf"
    - src: "compression.conf.j2"
      dest: "config/compression.conf"
    - src: "caching.conf.j2"
      dest: "config/caching.conf"
  notify: Restart nginx proxy manager stack
  tags: [nginx_proxy_manager, deploy, config]

- name: Create Nginx Proxy Manager automation scripts
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ docker_dir }}/nginx-proxy-manager/scripts/{{ item.dest }}"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0755"
  loop:
    - src: "npm_automation.py.j2"
      dest: "npm_automation.py"
    - src: "service_discovery.py.j2"
      dest: "service_discovery.py"
    - src: "ssl_manager.py.j2"
      dest: "ssl_manager.py"
    - src: "health_check.py.j2"
      dest: "health_check.py"
    - src: "backup_manager.py.j2"
      dest: "backup_manager.py"
    - src: "monitoring.py.j2"
      dest: "monitoring.py"
  tags: [nginx_proxy_manager, deploy, automation]

- name: Create Nginx Proxy Manager automation configuration
  ansible.builtin.template:
    src: automation_config.yml.j2
    dest: "{{ docker_dir }}/nginx-proxy-manager/scripts/automation_config.yml"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0640"
  tags: [nginx_proxy_manager, deploy, automation]

- name: Install Python dependencies for NPM automation
  ansible.builtin.pip:
    name:
      - requests
      - pyyaml
      - jinja2
      - click
      - rich
      - tabulate
      - cryptography
      - certifi
      - urllib3
    state: present
  become: true
  tags: [nginx_proxy_manager, deploy, dependencies]

- name: Deploy Nginx Proxy Manager stack safely with rollback
  ansible.builtin.include_tasks: "../../automation/tasks/compose_deploy_with_rollback.yml"
  vars:
    service_name: "nginx-proxy-manager"
    project_src: "{{ docker_dir }}/nginx-proxy-manager"
    compose_files:
      - docker-compose.yml
    wait_for_ports:
      - "{{ nginx_proxy_manager_ports.admin }}"
  register: npm_deployment_result
  tags: [nginx_proxy_manager, deploy, containers, rollback]

- name: Wait for Nginx Proxy Manager to be ready
  ansible.builtin.uri:
    url: "{{ nginx_proxy_manager_api_url }}/api/health"
    method: GET
    timeout: 30
  register: npm_health_check
  retries: 10
  delay: 30
  until: npm_health_check.status == 200
  tags: [nginx_proxy_manager, deploy, health]

- name: Get Nginx Proxy Manager API token
  ansible.builtin.uri:
    url: "{{ nginx_proxy_manager_api_url }}/api/tokens"
    method: POST
    headers:
      Content-Type: application/json
    body_format: json
    body:
      identity: "{{ nginx_proxy_manager_api_username }}"
      secret: "{{ nginx_proxy_manager_api_password }}"
    timeout: 30
  register: npm_token_result
  failed_when: npm_token_result.status != 200
  tags: [nginx_proxy_manager, deploy, api]

- name: Store Nginx Proxy Manager API token
  ansible.builtin.set_fact:
    vault_npm_api_token: "{{ npm_token_result.json.token }}"
  when: npm_token_result.status == 200
  tags: [nginx_proxy_manager, deploy, api]

- name: Configure Nginx Proxy Manager initial settings
  ansible.builtin.uri:
    url: "{{ nginx_proxy_manager_api_url }}/api/settings"
    method: PUT
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ vault_npm_api_token }}"
    body_format: json
    body:
      domain_names: "{{ domain }}"
      ssl_force_redirect: true
      ssl_http2: true
      ssl_hsts: true
      ssl_hsts_subdomains: true
      ssl_hsts_preload: true
      ssl_hsts_max_age: 31536000
      ssl_ocsp_stapling: true
      ssl_ocsp_stapling_verify: true
      ssl_session_cache: "shared:SSL:10m"
      ssl_session_timeout: "10m"
      ssl_protocols: "{{ nginx_proxy_manager_ssl_security.ssl_protocols }}"
      ssl_ciphers: "{{ nginx_proxy_manager_ssl_security.ssl_ciphers }}"
      ssl_prefer_server_ciphers: "{{ nginx_proxy_manager_ssl_security.ssl_prefer_server_ciphers }}"
    timeout: 30
  register: npm_settings_result
  when: vault_npm_api_token is defined
  tags: [nginx_proxy_manager, deploy, config]

- name: Configure Nginx Proxy Manager SSL certificates
  ansible.builtin.uri:
    url: "{{ nginx_proxy_manager_api_url }}/api/ssl"
    method: POST
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ vault_npm_api_token }}"
    body_format: json
    body:
      provider: "{{ nginx_proxy_manager_ssl_provider }}"
      email: "{{ nginx_proxy_manager_ssl_email }}"
      staging: "{{ nginx_proxy_manager_ssl_staging }}"
      domains: ["{{ domain }}", "*.{{ domain }}"]
    timeout: 30
  register: npm_ssl_result
  when:
    - vault_npm_api_token is defined
    - nginx_proxy_manager_ssl_enabled | default(true)
  tags: [nginx_proxy_manager, deploy, ssl]

- name: Display Nginx Proxy Manager deployment result
  ansible.builtin.debug:
    msg: |
      Nginx Proxy Manager deployment completed successfully!

      Access Information:
      - Admin URL: http://{{ ansible_default_ipv4.address }}:{{ nginx_proxy_manager_ports.admin }}
      - Username: {{ nginx_proxy_manager_api_username }}
      - Password: {{ vault_npm_admin_password }}

      API Information:
      - API URL: {{ nginx_proxy_manager_api_url }}
      - API Token: {{ vault_npm_api_token | default('Not available') }}

      SSL Configuration:
      - SSL Enabled: {{ nginx_proxy_manager_ssl_enabled }}
      - SSL Provider: {{ nginx_proxy_manager_ssl_provider }}
      - SSL Email: {{ nginx_proxy_manager_ssl_email }}

      Automation Features:
      - Service Discovery: {{ nginx_proxy_manager_service_discovery_enabled }}
      - Auto SSL: {{ nginx_proxy_manager_auto_ssl_enabled }}
      - API Automation: {{ nginx_proxy_manager_api_enabled }}
  when: npm_deployment_result is success
  tags: [nginx_proxy_manager, deploy, info]
