#!/bin/bash
# n8n Restore Script
# Restore n8n from backup files

set -euo pipefail

# Configuration
BACKUP_DIR="{{ n8n_backup_dir }}"
CONFIG_DIR="{{ n8n_config_dir }}"
LOG_FILE="{{ n8n_backup_log_file }}"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Logging function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# Error handling
error_exit() {
    log "${RED}ERROR: $1${NC}"
    exit 1
}

# Check if backup file is provided
if [[ $# -eq 0 ]]; then
    echo "Usage: $0 <backup_timestamp>"
    echo "Available backups:"
    ls -1 "$BACKUP_DIR"/manifest_*.json 2>/dev/null | sed 's/.*manifest_\(.*\)\.json/\1/' || echo "No backups found"
    exit 1
fi

BACKUP_TIMESTAMP="$1"
BACKUP_MANIFEST="$BACKUP_DIR/manifest_${BACKUP_TIMESTAMP}.json"

# Check if backup exists
if [[ ! -f "$BACKUP_MANIFEST" ]]; then
    error_exit "Backup manifest not found: $BACKUP_MANIFEST"
fi

log "${GREEN}Starting n8n restore from backup: $BACKUP_TIMESTAMP${NC}"

# Stop n8n services
log "Stopping n8n services..."
docker-compose -f "$CONFIG_DIR/docker-compose.yml" down

# Restore database
log "Restoring database..."
DB_BACKUP="$BACKUP_DIR/database_${BACKUP_TIMESTAMP}.sql"
if [[ -f "$DB_BACKUP" ]]; then
    docker exec -i n8n-postgres psql -U postgres n8n < "$DB_BACKUP"
    log "Database restored successfully"
elif [[ -f "${DB_BACKUP}.gz" ]]; then
    gunzip -c "${DB_BACKUP}.gz" | docker exec -i n8n-postgres psql -U postgres n8n
    log "Database restored successfully (compressed)"
else
    log "${YELLOW}Warning: Database backup not found${NC}"
fi

# Restore configuration
log "Restoring configuration..."
CONFIG_BACKUP="$BACKUP_DIR/config_${BACKUP_TIMESTAMP}.tar.gz"
if [[ -f "$CONFIG_BACKUP" ]]; then
    tar -xzf "$CONFIG_BACKUP" -C "$CONFIG_DIR"
    log "Configuration restored successfully"
else
    log "${YELLOW}Warning: Configuration backup not found${NC}"
fi

# Restore workflows
log "Restoring workflows..."
WORKFLOW_BACKUP="$BACKUP_DIR/workflows_${BACKUP_TIMESTAMP}.json"
if [[ -f "$WORKFLOW_BACKUP" ]]; then
    docker cp "$WORKFLOW_BACKUP" n8n-app:/tmp/workflows.json
    docker exec n8n-app n8n import:workflow --input=/tmp/workflows.json
    log "Workflows restored successfully"
else
    log "${YELLOW}Warning: Workflow backup not found${NC}"
fi

# Start n8n services
log "Starting n8n services..."
docker-compose -f "$CONFIG_DIR/docker-compose.yml" up -d

# Wait for services to be ready
log "Waiting for services to be ready..."
sleep 30

# Verify restore
log "Verifying restore..."
if curl -f "http://localhost:{{ n8n_port }}/healthz" >/dev/null 2>&1; then
    log "${GREEN}n8n restore completed successfully${NC}"
else
    log "${RED}ERROR: n8n health check failed after restore${NC}"
    exit 1
fi

log "${GREEN}n8n restore completed successfully${NC}"
exit 0 