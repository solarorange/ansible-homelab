#!/bin/bash
# n8n Backup Script
# Automated backup for n8n workflows and database

set -euo pipefail

# Configuration
BACKUP_DIR="{{ n8n_backup_dir }}"
CONFIG_DIR="{{ n8n_config_dir }}"
LOG_FILE="{{ n8n_backup_log_file }}"
RETENTION_DAYS="{{ n8n_backup_retention_days | default(7) }}"
COMPRESSION="{{ 'true' if n8n_backup_compression | default(true) else 'false' }}"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
BACKUP_NAME="n8n_backup_${TIMESTAMP}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Logging function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# Error handling
error_exit() {
    log "${RED}ERROR: $1${NC}"
    exit 1
}

# Check if this is a test run
if [[ "${1:-}" == "test" ]]; then
    log "${YELLOW}Running backup test...${NC}"
    TEST_MODE=true
else
    TEST_MODE=false
fi

# Create backup directory if it doesn't exist
mkdir -p "$BACKUP_DIR"

log "${GREEN}Starting n8n backup...${NC}"

# Backup n8n workflows and configuration
if [[ "$TEST_MODE" == "false" ]]; then
    log "Backing up n8n workflows..."
    
    # Export all workflows
    if docker exec n8n-app n8n export:workflow --all --output=/tmp/workflows.json 2>/dev/null; then
        docker cp n8n-app:/tmp/workflows.json "$BACKUP_DIR/workflows_${TIMESTAMP}.json"
        log "Workflows backed up successfully"
    else
        log "${YELLOW}Warning: Could not export workflows${NC}"
    fi
    
    # Backup n8n configuration
    if [[ -d "$CONFIG_DIR/app" ]]; then
        tar -czf "$BACKUP_DIR/config_${TIMESTAMP}.tar.gz" -C "$CONFIG_DIR" app/
        log "Configuration backed up successfully"
    fi
fi

# Backup PostgreSQL database
if [[ "$TEST_MODE" == "false" ]]; then
    log "Backing up PostgreSQL database..."
    
    if docker exec n8n-postgres pg_dump -U postgres n8n > "$BACKUP_DIR/database_${TIMESTAMP}.sql"; then
        log "Database backed up successfully"
        
        # Compress database backup if enabled
        if [[ "$COMPRESSION" == "true" ]]; then
            gzip "$BACKUP_DIR/database_${TIMESTAMP}.sql"
            log "Database backup compressed"
        fi
    else
        error_exit "Database backup failed"
    fi
fi

# Create backup manifest
cat > "$BACKUP_DIR/manifest_${TIMESTAMP}.json" << EOF
{
  "backup_name": "$BACKUP_NAME",
  "timestamp": "$TIMESTAMP",
  "date": "$(date -Iseconds)",
  "version": "1.0",
  "components": {
    "workflows": "$(ls -1 "$BACKUP_DIR"/workflows_${TIMESTAMP}.json 2>/dev/null | wc -l)",
    "config": "$(ls -1 "$BACKUP_DIR"/config_${TIMESTAMP}.tar.gz 2>/dev/null | wc -l)",
    "database": "$(ls -1 "$BACKUP_DIR"/database_${TIMESTAMP}.sql* 2>/dev/null | wc -l)"
  },
  "compression": $COMPRESSION,
  "retention_days": $RETENTION_DAYS
}
EOF

log "Backup manifest created"

# Calculate backup size
BACKUP_SIZE=$(du -sh "$BACKUP_DIR" | cut -f1)
log "Backup size: $BACKUP_SIZE"

# Clean up old backups
log "Cleaning up old backups..."
find "$BACKUP_DIR" -name "*.json" -mtime +$RETENTION_DAYS -delete
find "$BACKUP_DIR" -name "*.tar.gz" -mtime +$RETENTION_DAYS -delete
find "$BACKUP_DIR" -name "*.sql*" -mtime +$RETENTION_DAYS -delete
find "$BACKUP_DIR" -name "manifest_*.json" -mtime +$RETENTION_DAYS -delete

log "${GREEN}n8n backup completed successfully${NC}"

# Send notification if enabled
if [[ "${n8n_backup_notifications_enabled:-false}" == "true" ]]; then
    log "Sending backup notification..."
    # Add notification logic here (email, webhook, etc.)
fi

exit 0 