#!/bin/bash
# DumbAssets Health Check Script
# Generated by Ansible - Do not edit manually

set -euo pipefail

# Configuration
SERVICE_NAME="dumbassets"
CONTAINER_NAME="{{ dumbassets_container_name }}"
HEALTH_URL="http://localhost:{{ dumbassets_port }}/health"
API_URL="http://localhost:{{ dumbassets_port }}/api/health"
TIMEOUT=30

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Logging
LOG_FILE="{{ dumbassets_logs_dir }}/healthcheck.log"
exec 1> >(tee -a "$LOG_FILE")
exec 2> >(tee -a "$LOG_FILE" >&2)

echo "$(date): Starting ${SERVICE_NAME} health check..."

# Check if container is running
if ! docker ps | grep -q "${CONTAINER_NAME}"; then
    echo -e "${RED}ERROR: ${SERVICE_NAME} container is not running!${NC}"
    exit 1
fi

# Check container health status
CONTAINER_HEALTH=$(docker inspect --format='{{.State.Health.Status}}' "${CONTAINER_NAME}" 2>/dev/null || echo "unknown")
if [ "$CONTAINER_HEALTH" != "healthy" ] && [ "$CONTAINER_HEALTH" != "unknown" ]; then
    echo -e "${RED}ERROR: ${SERVICE_NAME} container health status is ${CONTAINER_HEALTH}${NC}"
    exit 1
fi

# Check web interface
echo "Checking web interface..."
if curl -f -s --max-time $TIMEOUT "$HEALTH_URL" > /dev/null; then
    echo -e "${GREEN}✓ Web interface is accessible${NC}"
else
    echo -e "${YELLOW}⚠ Web interface health check failed, trying API endpoint...${NC}"
    
    # Try API endpoint as fallback
    if curl -f -s --max-time $TIMEOUT "$API_URL" > /dev/null; then
        echo -e "${GREEN}✓ API endpoint is accessible${NC}"
    else
        echo -e "${RED}✗ Both web interface and API endpoint are not accessible${NC}"
        exit 1
    fi
fi

# Check disk space
DISK_USAGE=$(df "${DATA_DIR}" | tail -1 | awk '{print $5}' | sed 's/%//')
if [ "$DISK_USAGE" -gt 90 ]; then
    echo -e "${RED}WARNING: Disk usage is ${DISK_USAGE}%${NC}"
    exit 1
elif [ "$DISK_USAGE" -gt 80 ]; then
    echo -e "${YELLOW}WARNING: Disk usage is ${DISK_USAGE}%${NC}"
fi

# Check memory usage
MEMORY_USAGE=$(docker stats --no-stream --format "table {{.MemPerc}}" "${CONTAINER_NAME}" | tail -1 | sed 's/%//')
if [ "$MEMORY_USAGE" -gt 90 ]; then
    echo -e "${RED}WARNING: Memory usage is ${MEMORY_USAGE}%${NC}"
    exit 1
elif [ "$MEMORY_USAGE" -gt 80 ]; then
    echo -e "${YELLOW}WARNING: Memory usage is ${MEMORY_USAGE}%${NC}"
fi

# Check for recent errors in logs
RECENT_ERRORS=$(docker logs --since 1h "${CONTAINER_NAME}" 2>&1 | grep -i error | wc -l)
if [ "$RECENT_ERRORS" -gt 10 ]; then
    echo -e "${YELLOW}WARNING: ${RECENT_ERRORS} errors found in recent logs${NC}"
fi

echo -e "${GREEN}✓ ${SERVICE_NAME} health check passed at $(date)${NC}"
exit 0 