#!/bin/bash
# DumbAssets Management Script
# Generated by Ansible - Do not edit manually

set -euo pipefail

# Configuration
SERVICE_NAME="dumbassets"
CONTAINER_NAME="{{ dumbassets_container_name }}"
DOCKER_DIR="{{ dumbassets_docker_dir }}"
DATA_DIR="{{ dumbassets_data_dir }}"
BACKUP_DIR="{{ dumbassets_backup_dir }}"
LOGS_DIR="{{ dumbassets_logs_dir }}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to display usage
usage() {
    echo "Usage: $0 {start|stop|restart|status|logs|backup|restore|update|health|cleanup}"
    echo ""
    echo "Commands:"
    echo "  start     - Start the ${SERVICE_NAME} service"
    echo "  stop      - Stop the ${SERVICE_NAME} service"
    echo "  restart   - Restart the ${SERVICE_NAME} service"
    echo "  status    - Show service status"
    echo "  logs      - Show service logs"
    echo "  backup    - Create a backup"
    echo "  restore   - Restore from backup"
    echo "  update    - Update the service"
    echo "  health    - Run health check"
    echo "  cleanup   - Clean up old backups and logs"
    exit 1
}

# Function to check if service is running
is_running() {
    docker ps | grep -q "${CONTAINER_NAME}"
}

# Function to start service
start_service() {
    echo -e "${BLUE}Starting ${SERVICE_NAME}...${NC}"
    cd "${DOCKER_DIR}"
    docker-compose up -d
    echo -e "${GREEN}${SERVICE_NAME} started successfully${NC}"
}

# Function to stop service
stop_service() {
    echo -e "${BLUE}Stopping ${SERVICE_NAME}...${NC}"
    cd "${DOCKER_DIR}"
    docker-compose down
    echo -e "${GREEN}${SERVICE_NAME} stopped successfully${NC}"
}

# Function to restart service
restart_service() {
    echo -e "${BLUE}Restarting ${SERVICE_NAME}...${NC}"
    stop_service
    sleep 5
    start_service
    echo -e "${GREEN}${SERVICE_NAME} restarted successfully${NC}"
}

# Function to show status
show_status() {
    echo -e "${BLUE}${SERVICE_NAME} Status:${NC}"
    if is_running; then
        echo -e "${GREEN}✓ Service is running${NC}"
        docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep "${CONTAINER_NAME}"
    else
        echo -e "${RED}✗ Service is not running${NC}"
    fi
}

# Function to show logs
show_logs() {
    echo -e "${BLUE}Showing ${SERVICE_NAME} logs:${NC}"
    if is_running; then
        docker logs -f "${CONTAINER_NAME}"
    else
        echo -e "${RED}Service is not running${NC}"
    fi
}

# Function to create backup
create_backup() {
    echo -e "${BLUE}Creating backup of ${SERVICE_NAME}...${NC}"
    "${DOCKER_DIR}/scripts/backup.sh"
    echo -e "${GREEN}Backup completed successfully${NC}"
}

# Function to restore from backup
restore_backup() {
    if [ -z "$1" ]; then
        echo -e "${RED}Please specify a backup file${NC}"
        echo "Usage: $0 restore <backup_file>"
        exit 1
    fi
    
    echo -e "${BLUE}Restoring ${SERVICE_NAME} from backup: $1${NC}"
    "${DOCKER_DIR}/scripts/restore.sh" "$1"
    echo -e "${GREEN}Restore completed successfully${NC}"
}

# Function to update service
update_service() {
    echo -e "${BLUE}Updating ${SERVICE_NAME}...${NC}"
    cd "${DOCKER_DIR}"
    docker-compose pull
    docker-compose up -d
    echo -e "${GREEN}${SERVICE_NAME} updated successfully${NC}"
}

# Function to run health check
run_health_check() {
    echo -e "${BLUE}Running health check for ${SERVICE_NAME}...${NC}"
    "${DOCKER_DIR}/scripts/healthcheck.sh"
}

# Function to cleanup
cleanup() {
    echo -e "${BLUE}Cleaning up ${SERVICE_NAME}...${NC}"
    
    # Clean up old backups
    find "${BACKUP_DIR}/daily" -name "*.tar.gz" -mtime +30 -delete 2>/dev/null || true
    
    # Clean up old logs
    find "${LOGS_DIR}" -name "*.log" -mtime +7 -delete 2>/dev/null || true
    
    # Clean up Docker system
    docker system prune -f
    
    echo -e "${GREEN}Cleanup completed successfully${NC}"
}

# Main script logic
case "${1:-}" in
    start)
        start_service
        ;;
    stop)
        stop_service
        ;;
    restart)
        restart_service
        ;;
    status)
        show_status
        ;;
    logs)
        show_logs
        ;;
    backup)
        create_backup
        ;;
    restore)
        restore_backup "$2"
        ;;
    update)
        update_service
        ;;
    health)
        run_health_check
        ;;
    cleanup)
        cleanup
        ;;
    *)
        usage
        ;;
esac 