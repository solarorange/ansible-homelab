#!/bin/bash

# Homepage Backup Script
# Creates automated backups of Homepage configuration and data

set -e

# Configuration
BACKUP_DIR="{{ homepage_backup_dir }}"
CONFIG_DIR="{{ homepage_config_dir }}"
DATA_DIR="{{ homepage_data_dir }}"
RETENTION_DAYS={{ homepage_backup_retention_days | default(30) }}
LOG_FILE="{{ homepage_logs_dir }}/backup.log"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
    log "$1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
    log "WARNING: $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
    log "ERROR: $1"
}

print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}================================${NC}"
    log "$1"
}

# Create backup directory if it doesn't exist
mkdir -p "$BACKUP_DIR"

# Create timestamp for backup
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
BACKUP_FILE="$BACKUP_DIR/homepage_backup_$TIMESTAMP.tar.gz"

print_header "Starting Homepage Backup"

# Check if Homepage is running
if ! docker ps --format "table {{.Names}}" | grep -q "{{ homepage_container_name }}"; then
    print_warning "Homepage container is not running, proceeding with config backup only"
fi

# Create backup
print_status "Creating backup archive..."
tar -czf "$BACKUP_FILE" \
    -C "$CONFIG_DIR" . \
    -C "$DATA_DIR" . \
    2>/dev/null || {
    print_error "Failed to create backup archive"
    exit 1
}

# Verify backup
if [ -f "$BACKUP_FILE" ]; then
    BACKUP_SIZE=$(du -h "$BACKUP_FILE" | cut -f1)
    print_status "Backup created successfully: $BACKUP_FILE ($BACKUP_SIZE)"
else
    print_error "Backup file was not created"
    exit 1
fi

# Remove old backups
print_status "Cleaning up old backups (older than $RETENTION_DAYS days)..."
find "$BACKUP_DIR" -name "homepage_backup_*.tar.gz" -mtime +$RETENTION_DAYS -delete 2>/dev/null || {
    print_warning "Failed to clean up old backups"
}

# Count remaining backups
BACKUP_COUNT=$(find "$BACKUP_DIR" -name "homepage_backup_*.tar.gz" | wc -l)
print_status "Total backups retained: $BACKUP_COUNT"

# Create backup manifest
MANIFEST_FILE="$BACKUP_DIR/homepage_backup_$TIMESTAMP.manifest"
cat > "$MANIFEST_FILE" << EOF
Homepage Backup Manifest
=======================

Backup Date: $(date)
Backup File: $(basename "$BACKUP_FILE")
Backup Size: $BACKUP_SIZE
Retention Days: $RETENTION_DAYS

Configuration Files:
$(find "$CONFIG_DIR" -type f -name "*.yml" -o -name "*.yaml" -o -name "*.json" | sort)

Data Files:
$(find "$DATA_DIR" -type f 2>/dev/null | head -20 | sort)

Backup Contents:
$(tar -tzf "$BACKUP_FILE" | head -20)

Total Files in Backup: $(tar -tzf "$BACKUP_FILE" | wc -l)
EOF

print_status "Backup manifest created: $(basename "$MANIFEST_FILE")"

print_header "Homepage Backup Completed Successfully"

# Optional: Send notification
if command -v curl >/dev/null 2>&1; then
    if [ -n "$DISCORD_WEBHOOK_URL" ]; then
        curl -H "Content-Type: application/json" \
             -d "{\"content\":\"âœ… Homepage backup completed: $(basename "$BACKUP_FILE") ($BACKUP_SIZE)\"}" \
             "$DISCORD_WEBHOOK_URL" >/dev/null 2>&1 || true
    fi
fi

exit 0 