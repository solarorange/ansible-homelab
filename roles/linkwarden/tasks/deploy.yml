---
# Linkwarden Deployment Tasks
# Handles Docker deployment, directory creation, and basic configuration

- name: Create Linkwarden directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0755"
  loop:
    - "{{ linkwarden_config_dir }}"
    - "{{ linkwarden_app_config_dir }}"
    - "{{ linkwarden_postgres_config_dir }}"
    - "{{ linkwarden_backup_dir }}"
    - "{{ logs_dir }}/linkwarden"
    - "{{ logs_dir }}/linkwarden/app"
    - "{{ logs_dir }}/linkwarden/postgres"
    - "{{ logs_dir }}/linkwarden/backup"
    - "{{ logs_dir }}/linkwarden/health"
    - "{{ linkwarden_config_dir }}/scripts"
  register: linkwarden_dir_creation
  tags: [linkwarden, linkwarden-deploy, directories]

- name: Backup existing Linkwarden configuration
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ ansible_backup_dir }}/linkwarden/{{ ansible_date_time.date }}/{{ item | basename }}"
    remote_src: true
  loop:
    - "{{ linkwarden_app_config_dir }}/config.json"
    - "{{ linkwarden_config_dir }}/docker-compose.yml"
  when: item is file
  register: linkwarden_config_backup
  tags: [linkwarden, linkwarden-deploy, backup]

- name: Create Linkwarden Docker Compose configuration
  ansible.builtin.template:
    src: docker-compose.yml.j2
    dest: "{{ linkwarden_config_dir }}/docker-compose.yml"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0644"
  register: linkwarden_docker_compose_creation
  tags: [linkwarden, linkwarden-deploy, config]

- name: Create Linkwarden backup script
  ansible.builtin.template:
    src: backup.sh.j2
    dest: "{{ linkwarden_config_dir }}/scripts/backup.sh"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0750"
  register: linkwarden_backup_script_creation
  tags: [linkwarden, linkwarden-deploy, scripts]

- name: Create Linkwarden management script
  ansible.builtin.template:
    src: manage.sh.j2
    dest: "{{ linkwarden_config_dir }}/scripts/manage.sh"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0750"
  register: linkwarden_management_script_creation
  tags: [linkwarden, linkwarden-deploy, scripts]

- name: Create Linkwarden health check script
  ansible.builtin.template:
    src: healthcheck.sh.j2
    dest: "{{ linkwarden_config_dir }}/scripts/healthcheck.sh"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0750"
  register: linkwarden_healthcheck_script_creation
  tags: [linkwarden, linkwarden-deploy, scripts]

- name: Start Linkwarden services
  community.docker.docker_compose:
    project_src: "{{ linkwarden_config_dir }}"
    state: present
    build: false
  register: linkwarden_deployment_result
  retries: 3
  delay: 30
  until: linkwarden_deployment_result is success
  tags: [linkwarden, linkwarden-deploy, docker]

- name: Wait for Linkwarden to be ready
  ansible.builtin.uri:
    url: "http://localhost:{{ linkwarden_port }}/api/health"
    method: GET
    status_code: [200, 302, 401]
    timeout: 30
  register: linkwarden_health_check
  retries: 30
  delay: 10
  until: linkwarden_health_check.status in [200, 302, 401]
  tags: [linkwarden, linkwarden-deploy, wait]

- name: Verify Linkwarden deployment
  ansible.builtin.uri:
    url: "https://{{ linkwarden_subdomain }}.{{ domain }}"
    method: GET
    status_code: [200, 302]
    timeout: 30
  register: linkwarden_verification
  tags: [linkwarden, linkwarden-deploy, verify]

- name: Display Linkwarden deployment status
  ansible.builtin.debug:
    msg: |
      ========================================
      LINKWARDEN DEPLOYMENT STATUS
      ========================================
      
      Status: {{ 'SUCCESS' if linkwarden_verification.status == 200 or linkwarden_verification.status == 302 else 'FAILED' }}
      URL: https://{{ linkwarden_subdomain }}.{{ domain }}
      Local URL: http://localhost:{{ linkwarden_port }}
      
      Configuration:
      - Database: {{ linkwarden_database_type }}
      - Auth Method: {{ linkwarden_auth_method }}
      - Monitoring: {{ linkwarden_monitoring_enabled }}
      - Backup: {{ linkwarden_backup_enabled }}
      
      Directories:
      - Docker: {{ linkwarden_config_dir }}
      - App Config: {{ linkwarden_app_config_dir }}
      - Postgres: {{ linkwarden_postgres_config_dir }}
      - Backup: {{ linkwarden_backup_dir }}
      - Logs: {{ logs_dir }}/linkwarden
      
      ========================================
  tags: [linkwarden, linkwarden-deploy, summary]

rescue:
  - name: Log Linkwarden deployment failure (standardized)
    include_tasks: ../../logging/tasks/log_error.yml
    vars:
      log_service: "linkwarden"
      log_action: "deploy"
      log_message: |
        Linkwarden deployment failed:
        - Directory creation: {{ linkwarden_dir_creation | default('N/A') }}
        - Config backup: {{ linkwarden_config_backup | default('N/A') }}
        - Docker compose: {{ linkwarden_docker_compose_creation | default('N/A') }}
        - Script creation: {{ linkwarden_backup_script_creation | default('N/A') }}
        - Deployment result: {{ linkwarden_deployment_result | default('N/A') }}
        - Health check: {{ linkwarden_health_check | default('N/A') }}
        - Verification: {{ linkwarden_verification | default('N/A') }}

  - name: Attempt Linkwarden recovery
    ansible.builtin.include_tasks: handlers/error_handling/recovery.yml
    vars:
      failed_config_files:
        - "{{ linkwarden_app_config_dir }}/config.json"
        - "{{ linkwarden_config_dir }}/docker-compose.yml"
      config_verification_commands:
        - "{{ linkwarden_config_dir }}/scripts/healthcheck.sh"
      critical_services:
        - linkwarden

  - name: Rollback if recovery failed
    ansible.builtin.include_tasks: handlers/error_handling/rollback.yml
    when: recovery_complete | default(false) | bool == false
    vars:
      affected_services:
        - linkwarden
      config_files:
        - "{{ linkwarden_app_config_dir }}/config.json"
        - "{{ linkwarden_config_dir }}/docker-compose.yml"

  - name: Fail playbook if recovery and rollback failed
    ansible.builtin.fail:
      msg: "Linkwarden deployment failed and rollback was unsuccessful. Manual intervention required."
    when: recovery_complete | default(false) | bool == false

always:
  - name: Cleanup temporary files
    ansible.builtin.file:
      path: "{{ item }}"
      state: absent
    loop: "{{ temp_dirs | default([]) }}"
    when: temp_dirs is defined
  tags: [linkwarden, linkwarden-deploy, cleanup] 