# Grafana Dashboard Documentation

## Overview

This document provides comprehensive information about the Grafana dashboards deployed in the homelab monitoring system. Each dashboard is designed to provide specific insights into different aspects of the homelab infrastructure.

## Dashboard List

### 1. Homelab Overview Dashboard

**Purpose**: High-level system overview and quick status monitoring

**Key Features**:
- System resource utilization (CPU, RAM, Disk, Network)
- Service health status grid
- Recent alerts and notifications
- Quick system metrics
- Weather widget integration
- Uptime and availability metrics

**Panels**:
- **System CPU Usage**: Real-time CPU utilization with color-coded thresholds
- **System Memory Usage**: Memory consumption with warning/critical levels
- **Disk Usage**: Storage utilization across all mounted filesystems
- **Network Traffic**: Inbound/outbound network traffic monitoring
- **Service Health Status**: Table showing all service statuses
- **Recent Alerts**: Currently firing alerts
- **System Load**: 1m, 5m, and 15m load averages
- **Container Resource Usage**: CPU and memory usage for containers
- **Uptime**: System boot time and uptime
- **Temperature**: Hardware temperature monitoring
- **Weather Widget**: Local weather information
- **System Information**: Host details and specifications

**Usage**:
- Use as the main landing page for monitoring
- Quick health check of all systems
- Identify immediate issues requiring attention

### 2. Docker Services Dashboard

**Purpose**: Comprehensive container monitoring and management

**Key Features**:
- Container resource usage
- Service health checks
- Container restart counts
- Network connectivity
- Volume usage and I/O
- Service dependencies

**Panels**:
- **Container CPU Usage**: Per-container CPU utilization
- **Container Memory Usage**: Memory usage relative to limits
- **Container Restart Count**: Number of container restarts
- **Container Status**: Current state of all containers
- **Container Network I/O**: Network traffic per container
- **Container Disk I/O**: Disk read/write operations
- **Container Volume Usage**: Storage usage by container
- **Container Health Checks**: Health check status
- **Container Resource Limits**: CPU and memory limits
- **Container Dependencies**: Service dependency mapping
- **Container Logs**: Recent error logs

**Usage**:
- Monitor container performance
- Identify resource bottlenecks
- Track container stability
- Debug container issues

### 3. Media Stack Dashboard

**Purpose**: Media service monitoring and analytics

**Key Features**:
- Sonarr/Radarr download activity
- Jellyfin streaming statistics
- Media library growth
- Download queue status
- Indexer health and performance
- Subtitle processing metrics

**Panels**:
- **Sonarr Download Activity**: Queue size and download statistics
- **Radarr Download Activity**: Movie download metrics
- **Jellyfin Streaming Statistics**: Active streams and play counts
- **Media Library Growth**: Content counts and storage usage
- **Download Queue Status**: SABnzbd and qBittorrent queues
- **Indexer Health**: Success rates for media indexers
- **Download Speed Trends**: Bandwidth utilization
- **Subtitle Processing**: Bazarr metrics and success rates
- **Media Quality Distribution**: Content quality breakdown
- **Jellyfin User Activity**: User engagement metrics
- **Media Service Health**: Service status table
- **Recent Media Activity**: Log entries for media operations

**Usage**:
- Monitor media download performance
- Track library growth and quality
- Identify indexer issues
- Analyze user viewing patterns

### 4. Security Monitoring Dashboard

**Purpose**: Security event monitoring and threat detection

**Key Features**:
- Failed authentication attempts
- CrowdSec threat detection
- Firewall rule hits
- SSL certificate status
- Network traffic analysis
- Security event timeline

**Panels**:
- **Failed Authentication Attempts**: Login failure monitoring
- **CrowdSec Threat Detection**: Threat detection metrics
- **Firewall Rule Hits**: Firewall activity monitoring
- **SSL Certificate Status**: Certificate expiry tracking
- **Security Events Timeline**: Security event history
- **Network Traffic Analysis**: Suspicious connection detection
- **Blocked IP Addresses**: IP blocking statistics
- **SSL Certificate Details**: Detailed certificate information
- **Threat Level Distribution**: Threat severity breakdown
- **Security Service Health**: Security service status
- **Security Logs**: Recent security events
- **Security Metrics Summary**: Overall security overview

**Usage**:
- Monitor security threats
- Track authentication failures
- Monitor SSL certificate health
- Analyze network security events

### 5. Network & Infrastructure Dashboard

**Purpose**: Network performance and infrastructure monitoring

**Key Features**:
- Traefik routing statistics
- SSL certificate monitoring
- DNS resolution health
- Network bandwidth usage
- Service response times
- Load balancer metrics

**Panels**:
- **Traefik Request Rate**: HTTP request monitoring
- **Traefik Response Time**: Service response times
- **SSL Certificate Status**: Certificate expiry tracking
- **DNS Resolution Health**: DNS performance metrics
- **Network Bandwidth Usage**: Interface traffic monitoring
- **Service Response Times**: 95th percentile response times
- **HTTP Status Codes**: Response code distribution
- **Load Balancer Metrics**: Server health and connections
- **Service Health Status**: Infrastructure service status
- **SSL Certificate Details**: Certificate information
- **Network Interface Statistics**: Interface status and speed
- **Traefik Configuration Status**: Configuration health
- **Network Infrastructure Logs**: Infrastructure logs

**Usage**:
- Monitor network performance
- Track service response times
- Monitor SSL certificate health
- Analyze traffic patterns

### 6. Backup & Storage Dashboard

**Purpose**: Backup job monitoring and storage management

**Key Features**:
- Backup job status and history
- Storage usage trends
- Backup success/failure rates
- Data retention metrics
- Storage performance
- Recovery time objectives

**Panels**:
- **Backup Job Status**: Current backup job states
- **Storage Usage**: Storage utilization monitoring
- **Backup Success Rate**: Backup reliability metrics
- **Last Backup Age**: Backup freshness tracking
- **Backup Job History**: Historical backup performance
- **Storage Performance**: Read/write performance
- **Data Retention Metrics**: Retention policy compliance
- **Recovery Time Objectives**: RTO/RPO monitoring
- **Storage Usage Trends**: Long-term storage growth
- **Backup Compression Ratio**: Compression efficiency
- **Backup Job Details**: Detailed job information
- **Backup & Storage Logs**: Backup operation logs
- **Backup & Storage Summary**: Overall backup overview

**Usage**:
- Monitor backup job success
- Track storage utilization
- Ensure backup compliance
- Monitor storage performance

## Dashboard Features

### Responsive Design
All dashboards are designed to work on both desktop and mobile devices with responsive layouts.

### Dark/Light Theme Support
Dashboards automatically adapt to Grafana's theme settings.

### Interactive Panels
- Click on panels to drill down into detailed views
- Use time range selectors to adjust time periods
- Hover over data points for detailed information

### Variable Support
- Instance selection for multi-server environments
- Service filtering for focused monitoring
- Container selection for Docker monitoring

### Time Range Selectors
- Quick time range buttons (1h, 6h, 24h, 7d, 30d)
- Custom time range selection
- Relative time options

### Annotations
- Event markers on time series graphs
- Service deployment annotations
- Maintenance window indicators

### Export Capabilities
- PDF export of dashboard views
- PNG image export
- JSON dashboard export for sharing

## Troubleshooting

### Dashboard Not Loading
1. Check Grafana service status
2. Verify data source connectivity
3. Check Prometheus metrics availability
4. Review Grafana logs for errors

### Missing Data
1. Verify Prometheus targets are up
2. Check metric collection intervals
3. Validate PromQL queries
4. Review data retention settings

### Performance Issues
1. Reduce dashboard refresh intervals
2. Optimize PromQL queries
3. Increase Prometheus resources
4. Review metric cardinality

### Alert Integration
1. Verify Alertmanager connectivity
2. Check notification channel configuration
3. Review alert rule syntax
4. Test notification delivery

## Best Practices

### Dashboard Usage
- Start with the Homelab Overview dashboard
- Use specific dashboards for detailed troubleshooting
- Set appropriate refresh intervals
- Use variables to filter data

### Alert Management
- Review alert thresholds regularly
- Use appropriate severity levels
- Configure notification routing
- Test alert delivery

### Performance Optimization
- Limit dashboard panel count
- Use efficient PromQL queries
- Monitor Grafana resource usage
- Regular metric cleanup

### Maintenance
- Regular dashboard updates
- Metric query optimization
- Alert rule refinement
- Documentation updates

## Support

For issues with dashboards or monitoring:
1. Check the troubleshooting section
2. Review Grafana and Prometheus logs
3. Verify data source connectivity
4. Contact the homelab administrator

## Version Information

- Dashboard Version: 1.0.0
- Last Updated: {{ ansible_date_time.iso8601 }}
- Compatible Grafana Version: 8.0+
- Compatible Prometheus Version: 2.30+ 