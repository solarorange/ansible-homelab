#!/bin/bash
# Immich metrics collection script
# Generated by Ansible - DO NOT EDIT MANUALLY

set -euo pipefail

# Configuration
IMMICH_DIR="{{ docker_dir }}/immich"
LOG_FILE="{{ logs_dir }}/immich/metrics.log"
METRICS_FILE="{{ config_dir }}/immich/metrics.json"

# Create log directory if it doesn't exist
mkdir -p "$(dirname "$LOG_FILE")"

# Log function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# Initialize metrics JSON
init_metrics() {
    cat > "$METRICS_FILE" << EOF
{
    "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
    "service": "immich",
    "metrics": {}
}
EOF
}

# Check if Docker containers are running
check_containers() {
    local containers=("immich-server" "immich-web" "immich-postgres" "immich-redis" "immich-ml")
    local running_count=0
    
    for container in "${containers[@]}"; do
        if docker ps --format "table {{.Names}}" | grep -q "^$container$"; then
            running_count=$((running_count + 1))
        fi
    done
    
    echo "$running_count"
}

# Get container resource usage
get_container_metrics() {
    local container="$1"
    local metrics="{}"
    
    if docker ps --format "table {{.Names}}" | grep -q "^$container$"; then
        local stats=$(docker stats --no-stream --format "table {{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}" "$container" 2>/dev/null | tail -n 1)
        if [ -n "$stats" ]; then
            local cpu=$(echo "$stats" | awk '{print $1}' | sed 's/%//')
            local mem=$(echo "$stats" | awk '{print $2}' | sed 's/MiB//')
            local net_io=$(echo "$stats" | awk '{print $3}')
            local block_io=$(echo "$stats" | awk '{print $4}')
            
            metrics=$(cat << EOF
{
    "cpu_percent": $cpu,
    "memory_mb": $mem,
    "network_io": "$net_io",
    "block_io": "$block_io",
    "status": "running"
}
EOF
)
        fi
    else
        metrics='{"status": "stopped"}'
    fi
    
    echo "$metrics"
}

# Check Immich API health
check_api_health() {
    local health_url="http://immich-server:3001/api/health"
    local response=""
    
    if command -v curl >/dev/null 2>&1; then
        response=$(curl -s -w "%{http_code}" -o /tmp/health_response "$health_url" 2>/dev/null || echo "000")
        local http_code="${response: -3}"
        local response_body=""
        
        if [ "$http_code" = "200" ]; then
            response_body=$(cat /tmp/health_response 2>/dev/null || echo "{}")
            echo "$response_body"
        else
            echo '{"status": "unhealthy", "error": "HTTP '$http_code'"}'
        fi
    else
        echo '{"status": "unknown", "error": "curl not available"}'
    fi
}

# Check database connectivity
check_database() {
    local db_url="postgresql://{{ immich_postgres_user }}:{{ immich_postgres_password }}@immich-postgres:5432/{{ immich_postgres_db }}"
    local result="{}"
    
    if command -v psql >/dev/null 2>&1; then
        if PGpassword: "{{ vault_immich_admin_password | password_hash("bcrypt") }}"{"status": "connected", "connections": 0}'
            
            # Get connection count
            local connections=$(PGpassword: "{{ vault_immich_admin_password | password_hash("bcrypt") }}"$connections" ] && [ "$connections" -ge 0 ]; then
                result=$(echo "$result" | jq --arg conn "$connections" '.connections = ($conn | tonumber)')
            fi
        else
            result='{"status": "disconnected", "error": "Database connection failed"}'
        fi
    else
        result='{"status": "unknown", "error": "psql not available"}'
    fi
    
    echo "$result"
}

# Check Redis connectivity
check_redis() {
    local result="{}"
    
    if command -v redis-cli >/dev/null 2>&1; then
        if redis-cli -h immich-redis -p 6379 -a "{{ immich_redis_password }}" ping >/dev/null 2>&1; then
            local info=$(redis-cli -h immich-redis -p 6379 -a "{{ immich_redis_password }}" info memory 2>/dev/null | grep "used_memory:" | cut -d: -f2)
            result=$(cat << EOF
{
    "status": "connected",
    "used_memory": $info
}
EOF
)
        else
            result='{"status": "disconnected", "error": "Redis connection failed"}'
        fi
    else
        result='{"status": "unknown", "error": "redis-cli not available"}'
    fi
    
    echo "$result"
}

# Get disk usage for Immich data
get_disk_usage() {
    local data_dir="{{ data_dir }}/media/photos"
    local usage="{}"
    
    if [ -d "$data_dir" ]; then
        local size=$(du -sb "$data_dir" 2>/dev/null | cut -f1 || echo "0")
        local available=$(df -B1 "$data_dir" 2>/dev/null | tail -n 1 | awk '{print $4}' || echo "0")
        
        usage=$(cat << EOF
{
    "data_size_bytes": $size,
    "available_bytes": $available
}
EOF
)
    else
        usage='{"data_size_bytes": 0, "available_bytes": 0, "error": "Data directory not found"}'
    fi
    
    echo "$usage"
}

# Main execution
main() {
    log "Starting Immich metrics collection"
    
    # Initialize metrics file
    init_metrics
    
    # Collect metrics
    local containers_running=$(check_containers)
    local api_health=$(check_api_health)
    local database_status=$(check_database)
    local redis_status=$(check_redis)
    local disk_usage=$(get_disk_usage)
    
    # Get individual container metrics
    local server_metrics=$(get_container_metrics "immich-server")
    local web_metrics=$(get_container_metrics "immich-web")
    local postgres_metrics=$(get_container_metrics "immich-postgres")
    local redis_metrics=$(get_container_metrics "immich-redis")
    local ml_metrics=$(get_container_metrics "immich-ml")
    
    # Update metrics file with collected data
    jq --arg running "$containers_running" \
       --argjson api "$api_health" \
       --argjson db "$database_status" \
       --argjson redis "$redis_status" \
       --argjson disk "$disk_usage" \
       --argjson server "$server_metrics" \
       --argjson web "$web_metrics" \
       --argjson postgres "$postgres_metrics" \
       --argjson redis_container "$redis_metrics" \
       --argjson ml "$ml_metrics" \
       '.metrics = {
           "containers_running": ($running | tonumber),
           "api_health": $api,
           "database": $db,
           "redis": $redis,
           "disk_usage": $disk,
           "containers": {
               "server": $server,
               "web": $web,
               "postgres": $postgres,
               "redis": $redis_container,
               "ml": $ml
           }
       }' "$METRICS_FILE" > "${METRICS_FILE}.tmp" && mv "${METRICS_FILE}.tmp" "$METRICS_FILE"
    
    log "Metrics collection completed"
}

# Run main function
main "$@" 