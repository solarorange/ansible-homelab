---
# Traefik Deployment and Management

# All logic from tasks/traefik.yml is migrated here.
# Includes: directory creation, config, dynamic config, management, healthcheck, logrotate, cron, validation, rescue/rollback.

# ... (full migrated content from tasks/traefik.yml) ... 

- name: Create Traefik directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0755"
  loop:
    - "{{ docker_dir }}/traefik/config"
    - "{{ docker_dir }}/traefik/dynamic"
    - "{{ docker_dir }}/traefik/scripts"
    - "{{ logs_dir }}/traefik"
  register: dir_creation

- name: Backup existing Traefik configuration
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ ansible_backup_dir }}/traefik/{{ ansible_date_time.date }}/{{ item | basename }}"
    remote_src: true
  loop:
    - "{{ docker_dir }}/traefik/config/traefik.yml"
    - "{{ docker_dir }}/traefik/dynamic/middlewares.yml"
  when: item is file
  register: config_backup

- name: Create Traefik configuration
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/traefik/config/traefik.yml"
    content: |
      global:
        checkNewVersion: true
        sendAnonymousUsage: false

      api:
        dashboard: true
        insecure: false

      entryPoints:
        web:
          address: ":80"
          http:
            redirections:
              entryPoint:
                to: websecure
                scheme: https
                permanent: true

        websecure:
          address: ":443"
          http:
            tls:
              certResolver: cloudflare
              domains:
                - main: "{{ domain }}"
                  sans:
                    - "*.{{ domain }}"
              options:
                default:
                  minVersion: "VersionTLS12"
                  cipherSuites:
                    - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
                    - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
                    - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
                    - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
                    - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
                    - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305
                  curvePreferences:
                    - CurveP521
                    - CurveP384
                    - CurveP256
                  sniStrict: true

        metrics:
          address: ":8080"

      providers:
        docker:
          endpoint: "unix:///var/run/docker.sock"
          watch: true
          exposedByDefault: false
          network: traefik
          defaultRule: "Host(`{{ '{{' }} normalize .Name {{ '}}' }}.{{ domain }}`)"

        file:
          directory: "/etc/traefik/dynamic"
          watch: true

      certificatesResolvers:
        cloudflare:
          acme:
            email: "{{ cloudflare_email }}"
            storage: "/etc/traefik/acme.json"
            dnsChallenge:
              provider: cloudflare
              resolvers:
                - "1.1.1.1:53"
                - "8.8.8.8:53"
            keyType: "EC384"
            tlsChallenge: false
            httpChallenge: false
            storage: "/etc/traefik/acme.json"
            caServer: "https://acme-v02.api.letsencrypt.org/directory"

      log:
        level: INFO
        filePath: "/var/log/traefik/traefik.log"

      accessLog:
        filePath: "/var/log/traefik/access.log"
        bufferingSize: 100
        fields:
          defaultMode: keep
          names:
            ClientUsername: drop
          headers:
            defaultMode: drop
            names:
              User-Agent: keep
              Authorization: drop
              Content-Type: keep

      metrics:
        prometheus:
          entryPoint: metrics
          addEntryPointsLabels: true
          addServicesLabels: true
          addRoutersLabels: true
          addMiddlewaresLabels: true

      experimental:
        http3: true
        plugins:
          ocsp:
            moduleName: github.com/traefik/plugin-ocsp
            version: v0.1.0

      pilot:
        token: "{{ traefik_pilot_token }}"
        dashboard: true
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0640"
  register: config_creation

- name: Create Traefik dynamic configuration
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/traefik/dynamic/middlewares.yml"
    content: |
      http:
        middlewares:
          secure-headers:
            headers:
              sslRedirect: true
              forceSTSHeader: true
              stsIncludeSubdomains: true
              stsPreload: true
              stsSeconds: 31536000
              customFrameOptionsValue: "SAMEORIGIN"
              contentTypeNosniff: true
              browserXssFilter: true
              referrerPolicy: "strict-origin-when-cross-origin"
              permissionsPolicy: "camera=(), microphone=(), geolocation=(), payment=()"
              customResponseHeaders:
                X-Robots-Tag: "none,noarchive,nosnippet,notranslate,noimageindex"
                X-Permitted-Cross-Domain-Policies: "none"
                X-Content-Type-Options: "nosniff"
                X-Frame-Options: "SAMEORIGIN"
                X-XSS-Protection: "1; mode=block"
                Referrer-Policy: "strict-origin-when-cross-origin"
                Permissions-Policy: "camera=(), microphone=(), geolocation=(), payment=()"
                Public-Key-Pins: "pin-sha256=\"{{ cert_pinning_hash }}\"; pin-sha256=\"{{ cert_pinning_backup_hash }}\"; max-age=31536000; includeSubDomains"
                Public-Key-Pins-Report-Only: "pin-sha256=\"{{ cert_pinning_hash }}\"; pin-sha256=\"{{ cert_pinning_backup_hash }}\"; max-age=31536000; includeSubDomains; report-uri=\"https://{{ domain }}/report-pinning\""

          rate-limit:
            rateLimit:
              average: 100
              burst: 50

          compress:
            compress: {}

          auth:
            basicAuth:
              users:
                - "{{ traefik_admin_user }}:{{ traefik_admin_password_hash }}"

          ocsp-stapling:
            headers:
              customResponseHeaders:
                Strict-Transport-Security: "max-age=31536000; includeSubDomains; preload"
                X-Content-Type-Options: "nosniff"
                X-Frame-Options: "SAMEORIGIN"
                X-XSS-Protection: "1; mode=block"

      tls:
        options:
          mtls:
            minVersion: "VersionTLS12"
            cipherSuites:
              - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
              - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
              - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
              - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
              - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
              - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305
            curvePreferences:
              - CurveP521
              - CurveP384
              - CurveP256
            sniStrict: true
            clientAuth:
              caFiles:
                - /etc/traefik/certs/ca.crt
              clientAuthType: RequireAndVerifyClientCert
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0640"
  register: dynamic_config_creation

- name: Create Traefik management script
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/traefik/scripts/manage.sh"
    content: |
      #!/bin/bash
      
      # Traefik Management Script
      
      function show_help {
        echo "Traefik Management Script"
        echo "Usage: $0 [command]"
        echo ""
        echo "Commands:"
        echo "  status    - Show Traefik status"
        echo "  logs      - Show Traefik logs"
        echo "  restart   - Restart Traefik"
        echo "  reload    - Reload configuration"
        echo "  certs     - Show certificate information"
        echo "  help      - Show this help"
      }
      
      case "$1" in
        status)
          curl -s http://{{ ansible_default_ipv4.address }}:8080/api/rawdata
          ;;
        logs)
          docker logs traefik --tail 100 -f
          ;;
        restart)
          docker restart traefik
          ;;
        reload)
          docker exec traefik traefik check /etc/traefik/traefik.yml
          docker exec traefik traefik check /etc/traefik/dynamic/middlewares.yml
          ;;
        certs)
          echo "Certificate Information:"
          echo "----------------------"
          docker exec traefik traefik cert info
          echo ""
          echo "Certificate Status:"
          echo "------------------"
          docker exec traefik traefik cert status
          ;;
        help|*)
          show_help
          ;;
      esac
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0750"
  register: script_creation

- name: Create Traefik health check script
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/traefik/scripts/healthcheck.sh"
    content: |
      #!/bin/bash
      
      # Check if Traefik is responding
      if ! curl -s http://{{ ansible_default_ipv4.address }}:8080/api/rawdata > /dev/null; then
        echo "Traefik is not responding"
        exit 1
      fi
      
      # Check if we can access the dashboard
      if ! curl -s -I https://traefik.{{ domain }} > /dev/null; then
        echo "Traefik dashboard is not accessible"
        exit 1
      fi
      
      # Check certificate status
      if ! docker exec traefik traefik cert status > /dev/null; then
        echo "Certificate status check failed"
        exit 1
      fi
      
      # Check OCSP stapling
      if ! openssl s_client -connect traefik.{{ domain }}:443 -status > /dev/null 2>&1; then
        echo "OCSP stapling check failed"
        exit 1
      fi
      
      exit 0
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0750"
  register: healthcheck_creation

- name: Create Traefik log rotation configuration
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/traefik/config/logrotate.conf"
    content: |
      {{ logs_dir }}/traefik/*.log {
        daily
        rotate 7
        compress
        delaycompress
        missingok
        notifempty
        create 0640 {{ username }} {{ username }}
      }
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0640"
  register: logrotate_creation

- name: Add Traefik log rotation to crontab
  ansible.builtin.cron:
    name: "Rotate Traefik logs"
    job: "logrotate {{ docker_dir }}/traefik/config/logrotate.conf"
    hour: "0"
    minute: "0"
    user: "{{ vault_security_user }}"
  register: cron_creation

- name: Verify Traefik configuration
  ansible.builtin.command: "{{ docker_dir }}/traefik/scripts/healthcheck.sh"
  register: health_check
  changed_when: false
  retries: 3
  delay: 10
  until: health_check.rc == 0

rescue:
  - name: Log Traefik deployment failure
    ansible.builtin.debug:
      msg: |
        Traefik deployment failed:
        - Directory creation: {{ dir_creation | default('N/A') }}
        - Config backup: {{ config_backup | default('N/A') }}
        - Config creation: {{ config_creation | default('N/A') }}
        - Dynamic config: {{ dynamic_config_creation | default('N/A') }}
        - Script creation: {{ script_creation | default('N/A') }}
        - Healthcheck: {{ healthcheck_creation | default('N/A') }}
        - Logrotate: {{ logrotate_creation | default('N/A') }}
        - Cron job: {{ cron_creation | default('N/A') }}
        - Health check: {{ health_check | default('N/A') }}

  - name: Attempt Traefik recovery
    ansible.builtin.include_tasks: handlers/error_handling/recovery.yml
    vars:
      failed_config_files:
        - "{{ docker_dir }}/traefik/config/traefik.yml"
        - "{{ docker_dir }}/traefik/dynamic/middlewares.yml"
      config_verification_commands:
        - "{{ docker_dir }}/traefik/scripts/healthcheck.sh"
      critical_services:
        - traefik

  - name: Rollback if recovery failed
    ansible.builtin.include_tasks: handlers/error_handling/rollback.yml
    when: recovery_complete | default(false) | bool == false
    vars:
      affected_services:
        - traefik
      config_files:
        - "{{ docker_dir }}/traefik/config/traefik.yml"
        - "{{ docker_dir }}/traefik/dynamic/middlewares.yml"

  - name: Fail playbook if recovery and rollback failed
    ansible.builtin.fail:
      msg: "Traefik deployment failed and rollback was unsuccessful. Manual intervention required."
    when: recovery_complete | default(false) | bool == false

always:
  - name: Cleanup temporary files
    ansible.builtin.file:
      path: "{{ item }}"
      state: absent
    loop: "{{ temp_dirs | default([]) }}"
    when: temp_dirs is defined 