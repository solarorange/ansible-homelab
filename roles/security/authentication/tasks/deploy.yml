---
# Authentik Deployment and Management

# All logic from tasks/authentik.yml is migrated here.
# Includes: directory creation, config, backup/restore, management, healthcheck, logrotate, cron, validation, rescue/rollback.

# ... (full migrated content from tasks/authentik.yml) ...

- name: Create Authentik directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0755"
  loop:
    - "{{ docker_dir }}/authentik/config"
    - "{{ docker_dir }}/authentik/data"
    - "{{ docker_dir }}/authentik/scripts"
    - "{{ docker_dir }}/authentik/backup"
    - "{{ logs_dir }}/authentik"
  register: dir_creation

- name: Backup existing Authentik configuration
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ ansible_backup_dir }}/authentik/{{ ansible_date_time.date }}/{{ item | basename }}"
    remote_src: true
  loop:
    - "{{ docker_dir }}/authentik/config/authentik.yml"
    - "{{ docker_dir }}/authentik/docker-compose.yml"
  when: item is file
  register: config_backup

- name: Create Authentik configuration (optional, disabled by default)
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/authentik/config/authentik.yml"
    content: |
      # Optional advanced configuration for Authentik. Secrets should be provided
      # via environment variables and /run/secrets (compose) rather than inline.
      log_level: info

      postgresql:
        host: postgresql
        port: 5432
        user: {{ authentic_postgres_user | default('authentik') }}
        database: authentic

      redis:
        host: redis
        port: 6379

      error_reporting:
        enabled: false

      disable_startup_checks: false
      disable_exceptions: false
      disable_footer_links: false
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0640"
  register: config_creation
  when: security_authentik_custom_config_enabled | default(false) | bool

- name: Create Authentik backup script
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/authentik/scripts/backup.sh"
    content: |
      #!/bin/bash

      # Authentik Backup Script

      BACKUP_DIR="{{ docker_dir }}/authentik/backup"
      DATA_DIR="{{ docker_dir }}/authentik/data"
      RETENTION_DAYS=30

      # Create backup directory if it doesn't exist
      mkdir -p "$BACKUP_DIR"

      # Create timestamp for backup
      TIMESTAMP=$(date +%Y%m%d_%H%M%S)
      BACKUP_FILE="$BACKUP_DIR/authentik_backup_$TIMESTAMP.tar.gz"

      # Stop Authentik services gracefully
      echo "Stopping Authentik services..."
      docker-compose -f {{ docker_dir }}/authentik/docker-compose.yml down

      # Create backup
      echo "Creating backup..."
      tar -czf "$BACKUP_FILE" -C "$DATA_DIR" .

      # Start Authentik services
      echo "Starting Authentik services..."
      docker-compose -f {{ docker_dir }}/authentik/docker-compose.yml up -d

      # Remove old backups
      echo "Cleaning up old backups..."
      find "$BACKUP_DIR" -name "authentik_backup_*.tar.gz" -mtime +$RETENTION_DAYS -delete

      echo "Backup completed: $BACKUP_FILE"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0750"
  register: backup_script_creation

- name: Create Authentik restore script
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/authentik/scripts/restore.sh"
    content: |
      #!/bin/bash

      # Authentik Restore Script

      BACKUP_DIR="{{ docker_dir }}/authentik/backup"
      DATA_DIR="{{ docker_dir }}/authentik/data"

      if [ -z "$1" ]; then
        echo "Usage: $0 <backup_file>"
        echo "Available backups:"
        ls -1 "$BACKUP_DIR"/authentik_backup_*.tar.gz 2>/dev/null
        exit 1
      fi

      BACKUP_FILE="$1"

      if [ ! -f "$BACKUP_FILE" ]; then
        echo "Backup file not found: $BACKUP_FILE"
        exit 1
      fi

      # Stop Authentik services
      echo "Stopping Authentik services..."
      docker-compose -f {{ docker_dir }}/authentik/docker-compose.yml down

      # Clear existing data
      echo "Clearing existing data..."
      rm -rf "$DATA_DIR"/*

      # Restore backup
      echo "Restoring backup..."
      tar -xzf "$BACKUP_FILE" -C "$DATA_DIR"

      # Fix permissions
      echo "Fixing permissions..."
      chown -R {{ username }}:{{ username }} "$DATA_DIR"

      # Start Authentik services
      echo "Starting Authentik services..."
      docker-compose -f {{ docker_dir }}/authentik/docker-compose.yml up -d

      echo "Restore completed successfully"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0750"
  register: restore_script_creation

- name: Create Authentik management script
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/authentik/scripts/manage.sh"
    content: |
      #!/bin/bash

      # Authentik Management Script

      function show_help {
        echo "Authentik Management Script"
        echo "Usage: $0 [command]"
        echo ""
        echo "Commands:"
        echo "  status    - Show Authentik status"
        echo "  logs      - Show Authentik logs"
        echo "  restart   - Restart Authentik services"
        echo "  backup    - Create backup"
        echo "  restore   - Restore from backup"
        echo "  help      - Show this help"
      }

      case "$1" in
        status)
          docker-compose -f {{ docker_dir }}/authentik/docker-compose.yml ps
          ;;
        logs)
          docker-compose -f {{ docker_dir }}/authentik/docker-compose.yml logs -f
          ;;
        restart)
          docker-compose -f {{ docker_dir }}/authentik/docker-compose.yml restart
          ;;
        backup)
          {{ docker_dir }}/authentik/scripts/backup.sh
          ;;
        restore)
          if [ -z "$2" ]; then
            echo "Please specify backup file"
            exit 1
          fi
          {{ docker_dir }}/authentik/scripts/restore.sh "$2"
          ;;
        help|*)
          show_help
          ;;
      esac
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0750"
  register: management_script_creation

- name: Create Authentik health check script
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/authentik/scripts/healthcheck.sh"
    content: |
      #!/bin/bash

      # Check if Authentik is responding
      if ! curl -s https://authentik.{{ domain }}/api/v3/core/health/ > /dev/null; then
        echo "Authentik is not responding"
        exit 1
      fi

      # Check if we can access the admin interface
      if ! curl -s -I https://authentik.{{ domain }}/if/admin/ > /dev/null; then
        echo "Authentik admin interface is not accessible"
        exit 1
      fi

      exit 0
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0750"
  register: healthcheck_script_creation

- name: Create Authentik log rotation configuration
  ansible.builtin.copy:
    dest: "{{ docker_dir }}/authentik/config/logrotate.conf"
    content: |
      {{ logs_dir }}/authentik/*.log {
        daily
        rotate 7
        compress
        delaycompress
        missingok
        notifempty
        create 0640 {{ username }} {{ username }}
      }
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0640"
  register: logrotate_creation

- name: Add Authentik log rotation to crontab
  ansible.builtin.cron:
    name: "Rotate Authentik logs"
    job: "logrotate {{ docker_dir }}/authentik/config/logrotate.conf"
    hour: "0"
    minute: "0"
    user: "{{ vault_security_user }}"
  register: cron_creation

- name: Verify Authentik configuration
  ansible.builtin.command: "{{ docker_dir }}/authentik/scripts/healthcheck.sh"
  register: health_check
  changed_when: false
  retries: 3
  delay: 10
  until: health_check.rc == 0
# Deploy Authentik Identity Provider
- name: Create Authentik directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ homelab_user }}"
    group: "{{ homelab_user }}"
    mode: '0755'
  loop:
    - "{{ docker_dir }}/authentik"
    - "{{ data_dir }}/authentik"
    - "{{ config_dir }}/authentik"
    - "{{ backup_dir }}/authentik"

- name: Create Authentik environment file
  template:
    src: authentik.env.j2
    dest: "{{ docker_dir }}/authentik/.env"
    owner: "{{ homelab_user }}"
    group: "{{ homelab_user }}"
    mode: '0644'
  notify: restart authentik

- name: Create Authentik docker-compose file
  template:
    src: authentik-docker-compose.yml.j2
    dest: "{{ docker_dir }}/authentik/docker-compose.yml"
    owner: "{{ homelab_user }}"
    group: "{{ homelab_user }}"
    mode: '0644'
  notify: restart authentik

- name: Start Authentik
  community.docker.docker_compose_v2:
    project_src: "{{ docker_dir }}/authentik"
    state: present
  register: authentik_result
  retries: 3
  delay: 30
  until: authentik_result is success

- name: Wait for Authentik to be ready
  uri:
    url: "http://{{ ansible_default_ipv4.address }}:9000/if/user/"
    method: GET
    status_code: [200, 302, 401]
  register: authentik_health
  retries: 30
  delay: 10
  until: authentik_health.status in [200, 302, 401]

- name: Wait for Authentik via Traefik route to be ready
  ansible.builtin.uri:
    url: "https://authentik.{{ domain }}/api/v3/core/health/"
    method: GET
    status_code: 200
    timeout: 30
    validate_certs: true
  register: authentik_route_health
  retries: 30
  delay: 10
  until: authentik_route_health.status == 200

- name: Create Authentik configuration script
  template:
    src: setup_authentik.py.j2
    dest: "{{ config_dir }}/authentik/setup_authentik.py"
    owner: "{{ homelab_user }}"
    group: "{{ homelab_user }}"
    mode: '0755'
  when: authentik_health.status in [200, 302, 401]

- name: Run Authentik configuration script
  command: "{{ config_dir }}/authentik/setup_authentik.py"
  environment:
    AUTHENTIK_URL: "http://{{ ansible_default_ipv4.address }}:9000"
    AUTHENTIK_ADMIN_password: "{{ vault_security_password }}"
    DOMAIN: "{{ domain }}"
  register: authentik_setup_result
  retries: 3
  delay: 30
  until: authentik_setup_result.rc == 0
  when: authentik_health.status in [200, 302, 401]

- name: Create Authentik application summary
  debug:
    msg: |
      Authentik has been configured successfully!

      Access your services through Authentik:
      - Authentik Dashboard: https://auth.{{ domain }}
      - Grafana: https://grafana.{{ domain }}
      - Sonarr: https://sonarr.{{ domain }}
      - Radarr: https://radarr.{{ domain }}
      - Jellyfin: https://jellyfin.{{ domain }}
      - Overseerr: https://overseerr.{{ domain }}
      - Portainer: https://portainer.{{ domain }}
      - Homepage: https://homepage.{{ domain }}
      - Prowlarr: https://prowlarr.{{ domain }}
      - Bazarr: https://bazarr.{{ domain }}
      - Tautulli: https://tautulli.{{ domain }}

      Default admin user: {{ homelab_user }}
      Admin password: (from vault)

      Next steps:
      1. Access Authentik at https://auth.{{ domain }}
      2. Login with admin credentials
      3. Applications are pre-configured and ready to use
      4. Add additional users and groups as needed
