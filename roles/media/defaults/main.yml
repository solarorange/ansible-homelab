---
# Media Stack Configuration
# Production-ready defaults for homelab media stack deployment

# Service Configuration
media_enabled: true
media_version: "latest"
media_network_name: "media"
media_network_external: true

# Component Enablement
media_downloaders_enabled: true
media_arr_services_enabled: true
media_players_enabled: true

# Container Configuration
media_container_restart_policy: "unless-stopped"
media_container_network_mode: "bridge"

# Port Configuration
media_ports:
  sabnzbd: 8080
  qbittorrent: 8081
  prowlarr: 9696
  sonarr: 8989
  radarr: 7878
  lidarr: 8686
  readarr: 8787
  bazarr: 6767
  pulsarr: 8088
  jellyfin: 8096
  immich_server: 3001
  immich_web: 3000
  immich_ml: 3003

# Domain Configuration
media_subdomains:
  sabnzbd: "sabnzbd"
  qbittorrent: "qbittorrent"
  prowlarr: "prowlarr"
  sonarr: "sonarr"
  radarr: "radarr"
  lidarr: "lidarr"
  readarr: "readarr"
  bazarr: "bazarr"
  pulsarr: "pulsarr"
  jellyfin: "jellyfin"
  immich: "immich"

# Authentication Configuration
media_auth_enabled: true
media_auth_method: "authentik"  # Options: authentik, basic, none
media_admin_email: "{{ admin_email | default('admin@' + domain) }}"

# Database Configuration
media_database_type: "sqlite"  # Options: sqlite, postgresql, mysql
media_database_host: "{{ postgresql_host | default('postgresql') }}"
media_database_port: "{{ postgresql_port | default(5432) }}"
media_database_name: "media"
media_database_user: "media"
media_database_password: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits') }}"

# Redis Configuration
media_redis_host: "{{ redis_host | default('redis') }}"
media_redis_port: "{{ redis_port | default(6379) }}"
media_redis_password: "{{ redis_password | default('') }}"
media_redis_db: 0

# Downloader Configuration
media_downloaders:
  sabnzbd:
    enabled: true
    image: "linuxserver/sabnzbd:latest"
    container_name: "sabnzbd"
    port: 8080
    subdomain: "sabnzbd"
    volumes:
      - "{{ docker_dir }}/sabnzbd/config:/config"
      - "{{ data_dir }}/downloads/usenet:/downloads"
      - "{{ data_dir }}/downloads/usenet/incomplete:/incomplete-downloads"
      - "{{ data_dir }}/downloads/usenet/complete:/complete-downloads"
      - "{{ logs_dir }}/sabnzbd:/logs"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api?mode=version"]
      interval: "30s"
      timeout: "10s"
      retries: 3
    resources:
      limits:
        cpus: '1'
        memory: 1G
      reservations:
        cpus: '0.25'
        memory: 512M

  qbittorrent:
    enabled: true
    image: "linuxserver/qbittorrent:latest"
    container_name: "qbittorrent"
    port: 8081
    subdomain: "qbittorrent"
    volumes:
      - "{{ docker_dir }}/qbittorrent/config:/config"
      - "{{ data_dir }}/downloads/torrents:/downloads"
      - "{{ data_dir }}/downloads/torrents/incomplete:/incomplete-downloads"
      - "{{ data_dir }}/downloads/torrents/complete:/complete-downloads"
      - "{{ logs_dir }}/qbittorrent:/logs"
    ports:
      - "6881:6881"
      - "6881:6881/udp"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/v2/app/version"]
      interval: "30s"
      timeout: "10s"
      retries: 3
    resources:
      limits:
        cpus: '1'
        memory: 1G
      reservations:
        cpus: '0.25'
        memory: 512M

# ARR Services Configuration
media_arr_services:
  prowlarr:
    enabled: true
    image: "linuxserver/prowlarr:latest"
    container_name: "prowlarr"
    port: 9696
    subdomain: "prowlarr"
    volumes:
      - "{{ docker_dir }}/prowlarr/config:/config"
      - "{{ logs_dir }}/prowlarr:/logs"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9696/health"]
      interval: "30s"
      timeout: "10s"
      retries: 3
    resources:
      limits:
        cpus: '0.5'
        memory: 512M
      reservations:
        cpus: '0.1'
        memory: 256M

  sonarr:
    enabled: true
    image: "linuxserver/sonarr:latest"
    container_name: "sonarr"
    port: 8989
    subdomain: "sonarr"
    volumes:
      - "{{ docker_dir }}/sonarr/config:/config"
      - "{{ data_dir }}/media/tv:/tv"
      - "{{ data_dir }}/downloads:/downloads"
      - "{{ logs_dir }}/sonarr:/logs"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8989/health"]
      interval: "30s"
      timeout: "10s"
      retries: 3
    resources:
      limits:
        cpus: '1'
        memory: 1G
      reservations:
        cpus: '0.25'
        memory: 512M

  radarr:
    enabled: true
    image: "linuxserver/radarr:latest"
    container_name: "radarr"
    port: 7878
    subdomain: "radarr"
    volumes:
      - "{{ docker_dir }}/radarr/config:/config"
      - "{{ data_dir }}/media/movies:/movies"
      - "{{ data_dir }}/downloads:/downloads"
      - "{{ logs_dir }}/radarr:/logs"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7878/health"]
      interval: "30s"
      timeout: "10s"
      retries: 3
    resources:
      limits:
        cpus: '1'
        memory: 1G
      reservations:
        cpus: '0.25'
        memory: 512M

  lidarr:
    enabled: true
    image: "linuxserver/lidarr:latest"
    container_name: "lidarr"
    port: 8686
    subdomain: "lidarr"
    volumes:
      - "{{ docker_dir }}/lidarr/config:/config"
      - "{{ data_dir }}/media/music:/music"
      - "{{ data_dir }}/downloads:/downloads"
      - "{{ logs_dir }}/lidarr:/logs"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8686/health"]
      interval: "30s"
      timeout: "10s"
      retries: 3
    resources:
      limits:
        cpus: '0.5'
        memory: 512M
      reservations:
        cpus: '0.1'
        memory: 256M

  readarr:
    enabled: true
    image: "linuxserver/readarr:latest"
    container_name: "readarr"
    port: 8787
    subdomain: "readarr"
    volumes:
      - "{{ docker_dir }}/readarr/config:/config"
      - "{{ data_dir }}/media/books:/books"
      - "{{ data_dir }}/downloads:/downloads"
      - "{{ logs_dir }}/readarr:/logs"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8787/health"]
      interval: "30s"
      timeout: "10s"
      retries: 3
    resources:
      limits:
        cpus: '0.5'
        memory: 512M
      reservations:
        cpus: '0.1'
        memory: 256M

  bazarr:
    enabled: true
    image: "linuxserver/bazarr:latest"
    container_name: "bazarr"
    port: 6767
    subdomain: "bazarr"
    volumes:
      - "{{ docker_dir }}/bazarr/config:/config"
      - "{{ data_dir }}/media:/media"
      - "{{ logs_dir }}/bazarr:/logs"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6767/health"]
      interval: "30s"
      timeout: "10s"
      retries: 3
    resources:
      limits:
        cpus: '1'
        memory: 1G
      reservations:
        cpus: '0.25'
        memory: 512M

  pulsarr:
    enabled: true
    image: "jamcalli/pulsarr:latest"
    container_name: "pulsarr"
    port: 8088
    subdomain: "pulsarr"
    volumes:
      - "{{ docker_dir }}/pulsarr/config:/config"
      - "{{ docker_dir }}/pulsarr/data:/data"
      - "{{ logs_dir }}/pulsarr:/logs"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: "30s"
      timeout: "10s"
      retries: 3
    depends_on:
      - sonarr
      - radarr
      - lidarr
      - readarr
      - prowlarr
      - bazarr
    resources:
      limits:
        cpus: '0.5'
        memory: 512M
      reservations:
        cpus: '0.1'
        memory: 256M

# Media Players Configuration
media_players:
  jellyfin:
    enabled: true
    image: "jellyfin/jellyfin:latest"
    container_name: "jellyfin"
    port: 8096
    subdomain: "jellyfin"
    volumes:
      - "{{ docker_dir }}/jellyfin/config:/config"
      - "{{ docker_dir }}/jellyfin/cache:/cache"
      - "{{ docker_dir }}/jellyfin/metadata:/metadata"
      - "{{ data_dir }}/media:/media"
      - "{{ logs_dir }}/jellyfin:/logs"
    ports:
      - "8920:8920"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8096/health"]
      interval: "30s"
      timeout: "10s"
      retries: 3
    resources:
      limits:
        cpus: '2'
        memory: 4G
      reservations:
        cpus: '0.5'
        memory: 1G

  immich:
    enabled: true
    image: "ghcr.io/immich-app/immich-server:latest"
    container_name: "immich-server"
    port: 3001
    subdomain: "immich"
    volumes:
      - "{{ docker_dir }}/immich/server:/config"
      - "{{ data_dir }}/media/photos:/photos"
      - "{{ logs_dir }}/immich/server:/logs"
    environment:
      - DB_HOSTNAME=immich-postgres
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_DATABASE_NAME=immich
      - REDIS_HOSTNAME=immich-redis
      - REDIS_PORT=6379
      - REDIS_DBINDEX=0
      - REDIS_PASSWORD=redis
      - JWT_SECRET={{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits') }}
      - NODE_ENV=production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: "30s"
      timeout: "10s"
      retries: 3
    depends_on:
      - immich-postgres
      - immich-redis
    resources:
      limits:
        cpus: '1'
        memory: 2G
      reservations:
        cpus: '0.25'
        memory: 512M

# Immich Components
media_immich_components:
  immich_web:
    enabled: true
    image: "ghcr.io/immich-app/immich-web:latest"
    container_name: "immich-web"
    port: 3000
    volumes:
      - "{{ docker_dir }}/immich/web:/config"
      - "{{ logs_dir }}/immich/web:/logs"
    environment:
      - NODE_ENV=production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: "30s"
      timeout: "10s"
      retries: 3
    depends_on:
      - immich-server

  immich_postgres:
    enabled: true
    image: "postgres:14-alpine"
    container_name: "immich-postgres"
    volumes:
      - "{{ docker_dir }}/immich/postgres:/var/lib/postgresql/data"
      - "{{ logs_dir }}/immich/immich-postgres:/logs"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=immich
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: "30s"
      timeout: "10s"
      retries: 3

  immich_redis:
    enabled: true
    image: "redis:alpine"
    container_name: "immich-redis"
    command: "redis-server --requirepass redis"
    volumes:
      - "{{ docker_dir }}/immich/redis:/data"
      - "{{ logs_dir }}/immich/redis:/logs"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: "30s"
      timeout: "10s"
      retries: 3

  immich_ml:
    enabled: true
    image: "ghcr.io/immich-app/immich-machine-learning:latest"
    container_name: "immich-machine-learning"
    port: 3003
    volumes:
      - "{{ docker_dir }}/immich/ml:/config"
      - "{{ logs_dir }}/immich/ml:/logs"
    environment:
      - NODE_ENV=production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: "30s"
      timeout: "10s"
      retries: 3
    depends_on:
      - immich-server

# Monitoring Integration
media_monitoring_enabled: true
media_metrics_enabled: true
media_health_check_enabled: true
media_health_check_interval: 30

# Security Configuration
media_security_headers: true
media_rate_limiting: true
media_rate_limit_requests: 100
media_rate_limit_window: 60
media_cors_enabled: false
media_cors_origins: []
media_allow_anonymous_access: false

# Backup Configuration
media_backup_enabled: true
media_backup_schedule: "0 2 * * *"  # Daily at 2 AM
media_backup_retention: 7  # Keep backups for 7 days
media_backup_compression: true
media_backup_include_media: true
media_backup_include_database: true
media_backup_include_config: true

# Logging Configuration
media_log_level: "info"  # Options: debug, info, warn, error
media_log_format: "json"
media_log_retention: 30  # Days
media_log_rotation: true

# Resource Limits
media_memory_limit: "8g"
media_cpu_limit: "4.0"
media_storage_limit: "500g"

# Traefik Configuration
media_traefik_enabled: true
media_traefik_network: "homelab"
media_traefik_middleware: "secure-headers,compress"
media_traefik_auth_middleware: "authentik@docker"
media_traefik_ssl_enabled: true
media_traefik_ssl_resolver: "cloudflare"

# Homepage Integration
media_homepage_enabled: true
media_homepage_category: "Media"
media_homepage_description: "Media Management & Streaming"
media_homepage_icon: "media.png"
media_homepage_widget_enabled: true

# Telegraf Integration
media_telegraf_enabled: true
media_telegraf_metrics: true
media_telegraf_logs: true

# Prometheus Integration
media_prometheus_enabled: true
media_prometheus_metrics: true
media_prometheus_scrape_interval: 30

# Grafana Integration
media_grafana_enabled: true
media_grafana_dashboard: true
media_grafana_datasource: "prometheus"

# Loki Integration
media_loki_enabled: true
media_loki_logs: true

# Alerting Configuration
media_alerting_enabled: true
media_alerting_provider: "alertmanager"
media_alerting_webhook: "http://alertmanager:9093/api/v1/alerts"

# CrowdSec Integration
media_crowdsec_enabled: true
media_crowdsec_collections:
  - "crowdsecurity/nginx"
  - "crowdsecurity/http-cve"

# Fail2ban Integration
media_fail2ban_enabled: true
media_fail2ban_jail: "media-stack"
media_fail2ban_max_retry: 5
media_fail2ban_bantime: 3600

# Service Dependencies
media_dependencies:
  - "docker"
  - "traefik"
  - "monitoring_infrastructure"

# Health Check Configuration
media_health_check_url: "/health"
media_health_check_timeout: 10
media_health_check_retries: 3

# API Configuration
media_api_enabled: true
media_api_version: "v1"
media_api_rate_limit: 1000
media_api_rate_limit_window: 3600

# Webhook Configuration
media_webhooks_enabled: true
media_webhook_events:
  - "download_completed"
  - "media_imported"
  - "service_status_changed"

# Notification Configuration
media_notifications_enabled: true
media_notification_channels:
  - "email"
  - "webhook"
  - "slack"
  - "discord"

# Email Configuration
media_email_enabled: false
media_smtp_host: "{{ smtp_host | default('localhost') }}"
media_smtp_port: "{{ smtp_port | default(587) }}"
media_smtp_username: "{{ smtp_username | default('') }}"
media_smtp_password: "{{ smtp_password | default('') }}"
media_smtp_encryption: "{{ smtp_encryption | default('tls') }}"

# Slack Configuration
media_slack_enabled: false
media_slack_webhook: "{{ slack_webhook | default('') }}"
media_slack_channel: "{{ slack_channel | default('#alerts') }}"

# Discord Configuration
media_discord_enabled: false
media_discord_webhook: "{{ discord_webhook | default('') }}"
media_discord_channel: "{{ discord_channel | default('alerts') }}"

# Custom Configuration
media_custom_config: {}
media_environment_variables: {}
media_volume_mounts: []
media_extra_labels: {}

# Maintenance Configuration
media_maintenance_enabled: true
media_maintenance_schedule: "0 3 * * 0"  # Weekly at 3 AM on Sunday
media_maintenance_window: 3600  # 1 hour
media_maintenance_tasks:
  - "cleanup_old_downloads"
  - "optimize_database"
  - "cleanup_temp_files"
  - "update_search_index"

# Performance Configuration
media_performance_mode: "production"
media_cache_enabled: true
media_cache_size: "1g"
media_cache_ttl: 3600

# Development Configuration
media_debug_enabled: false
media_debug_port: 5678
media_debug_host: "0.0.0.0"

# Update Configuration
media_update_enabled: true
media_update_schedule: "0 4 * * 0"  # Weekly at 4 AM on Sunday
media_update_backup_before: true
media_update_rollback_on_failure: true

# Watchtower Configuration
media_watchtower_enabled: "{{ media_update_enabled }}"
media_watchtower_image: "containrrr/watchtower"
media_watchtower_container_name: "watchtower-media"
media_watchtower_schedule: "{{ media_update_schedule }}"
media_watchtower_cleanup: true
media_watchtower_include_restarting: true
media_watchtower_include_stopped: false
media_watchtower_revive_stopped: false
media_watchtower_remove_volumes: false
media_watchtower_no_pull: false
media_watchtower_no_startup_message: false
media_watchtower_http_api_token: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits') }}"
