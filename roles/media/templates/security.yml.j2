# Media Stack Security Configuration
# Generated by Ansible - Do not edit manually

# Fail2ban configuration for media services
{% if media_enable_security %}
{% if media_enable_fail2ban %}
# Fail2ban jail configuration
[DEFAULT]
bantime = {{ media_fail2ban_bantime | default(3600) }}
findtime = {{ media_fail2ban_findtime | default(600) }}
maxretry = {{ media_fail2ban_maxretry | default(3) }}
backend = auto
usedns = warn

{% if media_enable_players %}
{% if media_enable_plex %}
[plex]
enabled = true
port = {{ media_plex_port }}
filter = plex
logpath = {{ media_plex_logs_dir }}/Plex\ Media\ Server.log
maxretry = {{ media_plex_fail2ban_maxretry | default(5) }}
bantime = {{ media_plex_fail2ban_bantime | default(3600) }}
{% endif %}
{% if media_enable_jellyfin %}
[jellyfin]
enabled = true
port = {{ media_jellyfin_port }}
filter = jellyfin
logpath = {{ media_jellyfin_logs_dir }}/jellyfin.log
maxretry = {{ media_jellyfin_fail2ban_maxretry | default(5) }}
bantime = {{ media_jellyfin_fail2ban_bantime | default(3600) }}
{% endif %}
{% if media_enable_emby %}
[emby]
enabled = true
port = {{ media_emby_port }}
filter = emby
logpath = {{ media_emby_logs_dir }}/embyserver.txt
maxretry = {{ media_emby_fail2ban_maxretry | default(5) }}
bantime = {{ media_emby_fail2ban_bantime | default(3600) }}
{% endif %}
{% endif %}
{% if media_enable_arr_services %}
{% if media_enable_sonarr %}
[sonarr]
enabled = true
port = {{ media_sonarr_port }}
filter = sonarr
logpath = {{ media_sonarr_logs_dir }}/sonarr.txt
maxretry = {{ media_sonarr_fail2ban_maxretry | default(5) }}
bantime = {{ media_sonarr_fail2ban_bantime | default(3600) }}
{% endif %}
{% if media_enable_radarr %}
[radarr]
enabled = true
port = {{ media_radarr_port }}
filter = radarr
logpath = {{ media_radarr_logs_dir }}/radarr.txt
maxretry = {{ media_radarr_fail2ban_maxretry | default(5) }}
bantime = {{ media_radarr_fail2ban_bantime | default(3600) }}
{% endif %}
{% if media_enable_lidarr %}
[lidarr]
enabled = true
port = {{ media_lidarr_port }}
filter = lidarr
logpath = {{ media_lidarr_logs_dir }}/lidarr.txt
maxretry = {{ media_lidarr_fail2ban_maxretry | default(5) }}
bantime = {{ media_lidarr_fail2ban_bantime | default(3600) }}
{% endif %}
{% if media_enable_readarr %}
[readarr]
enabled = true
port = {{ media_readarr_port }}
filter = readarr
logpath = {{ media_readarr_logs_dir }}/readarr.txt
maxretry = {{ media_readarr_fail2ban_maxretry | default(5) }}
bantime = {{ media_readarr_fail2ban_bantime | default(3600) }}
{% endif %}
{% if media_enable_prowlarr %}
[prowlarr]
enabled = true
port = {{ media_prowlarr_port }}
filter = prowlarr
logpath = {{ media_prowlarr_logs_dir }}/prowlarr.txt
maxretry = {{ media_prowlarr_fail2ban_maxretry | default(5) }}
bantime = {{ media_prowlarr_fail2ban_bantime | default(3600) }}
{% endif %}
{% if media_enable_bazarr %}
[bazarr]
enabled = true
port = {{ media_bazarr_port }}
filter = bazarr
logpath = {{ media_bazarr_logs_dir }}/bazarr.log
maxretry = {{ media_bazarr_fail2ban_maxretry | default(5) }}
bantime = {{ media_bazarr_fail2ban_bantime | default(3600) }}
{% endif %}
{% if media_enable_overseerr %}
[overseerr]
enabled = true
port = {{ media_overseerr_port }}
filter = overseerr
logpath = {{ media_overseerr_logs_dir }}/overseerr.log
maxretry = {{ media_overseerr_fail2ban_maxretry | default(5) }}
bantime = {{ media_overseerr_fail2ban_bantime | default(3600) }}
{% endif %}
{% endif %}
{% if media_enable_downloaders %}
{% if media_enable_sabnzbd %}
[sabnzbd]
enabled = true
port = {{ media_sabnzbd_port }}
filter = sabnzbd
logpath = {{ media_sabnzbd_logs_dir }}/sabnzbd.log
maxretry = {{ media_sabnzbd_fail2ban_maxretry | default(5) }}
bantime = {{ media_sabnzbd_fail2ban_bantime | default(3600) }}
{% endif %}
{% if media_enable_qbittorrent %}
[qbittorrent]
enabled = true
port = {{ media_qbittorrent_port }}
filter = qbittorrent
logpath = {{ media_qbittorrent_logs_dir }}/qbittorrent.log
maxretry = {{ media_qbittorrent_fail2ban_maxretry | default(5) }}
bantime = {{ media_qbittorrent_fail2ban_bantime | default(3600) }}
{% endif %}
{% endif %}
{% endif %}
{% endif %}

# CrowdSec configuration for media services
{% if media_enable_crowdsec %}
crowdsec_config:
  api:
    server:
      listen_uri: {{ media_crowdsec_listen_uri | default('{{ ansible_default_ipv4.address }}:8080') }}
      profiles_path: {{ media_crowdsec_profiles_path | default('/etc/crowdsec/profiles.yaml') }}
  
  acquisition:
    files:
{% if media_enable_players %}
{% if media_enable_plex %}
      - filename: {{ media_plex_logs_dir }}/Plex\ Media\ Server.log
        labels:
          type: plex
          service: media_stack
{% endif %}
{% if media_enable_jellyfin %}
      - filename: {{ media_jellyfin_logs_dir }}/jellyfin.log
        labels:
          type: jellyfin
          service: media_stack
{% endif %}
{% if media_enable_emby %}
      - filename: {{ media_emby_logs_dir }}/embyserver.txt
        labels:
          type: emby
          service: media_stack
{% endif %}
{% endif %}
{% if media_enable_arr_services %}
{% if media_enable_sonarr %}
      - filename: {{ media_sonarr_logs_dir }}/sonarr.txt
        labels:
          type: sonarr
          service: media_stack
{% endif %}
{% if media_enable_radarr %}
      - filename: {{ media_radarr_logs_dir }}/radarr.txt
        labels:
          type: radarr
          service: media_stack
{% endif %}
{% if media_enable_lidarr %}
      - filename: {{ media_lidarr_logs_dir }}/lidarr.txt
        labels:
          type: lidarr
          service: media_stack
{% endif %}
{% if media_enable_readarr %}
      - filename: {{ media_readarr_logs_dir }}/readarr.txt
        labels:
          type: readarr
          service: media_stack
{% endif %}
{% if media_enable_prowlarr %}
      - filename: {{ media_prowlarr_logs_dir }}/prowlarr.txt
        labels:
          type: prowlarr
          service: media_stack
{% endif %}
{% if media_enable_bazarr %}
      - filename: {{ media_bazarr_logs_dir }}/bazarr.log
        labels:
          type: bazarr
          service: media_stack
{% endif %}
{% if media_enable_overseerr %}
      - filename: {{ media_overseerr_logs_dir }}/overseerr.log
        labels:
          type: overseerr
          service: media_stack
{% endif %}
{% endif %}
{% if media_enable_downloaders %}
{% if media_enable_sabnzbd %}
      - filename: {{ media_sabnzbd_logs_dir }}/sabnzbd.log
        labels:
          type: sabnzbd
          service: media_stack
{% endif %}
{% if media_enable_qbittorrent %}
      - filename: {{ media_qbittorrent_logs_dir }}/qbittorrent.log
        labels:
          type: qbittorrent
          service: media_stack
{% endif %}
{% endif %}

  parsers:
    - name: media_stack_parser
      description: "Parser for media stack services"
      format: regex
      pattern: '^(?P<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}) (?P<level>\w+) (?P<service>\w+) (?P<message>.*)$'
      labels:
        type: media_stack

  scenarios:
    - name: media_stack_bruteforce
      description: "Detect brute force attacks on media services"
      filter: "evt.Meta.service == 'media_stack' && evt.Meta.type in ['plex', 'jellyfin', 'emby', 'sonarr', 'radarr', 'lidarr', 'readarr', 'prowlarr', 'bazarr', 'overseerr', 'sabnzbd', 'qbittorrent']"
      groupby: "evt.Meta.source_ip"
      capacity: 10
      leaky: true
      blackhole: 300s
      labels:
        type: media_stack_attack
        service: media_stack

    - name: media_stack_unauthorized_access
      description: "Detect unauthorized access attempts"
      filter: "evt.Meta.service == 'media_stack' && evt.Parsed.message contains 'unauthorized' || evt.Parsed.message contains 'authentication failed'"
      groupby: "evt.Meta.source_ip"
      capacity: 5
      leaky: true
      blackhole: 600s
      labels:
        type: media_stack_unauthorized
        service: media_stack

  profiles:
    - name: media_stack_profile
      description: "Profile for media stack services"
      debug: false
      filters:
        - "evt.Meta.service == 'media_stack'"
      decisions:
        - type: ban
          scope: ip
          duration: 1h
      on_success: break
{% endif %}

# Rate limiting configuration
{% if media_enable_rate_limiting %}
rate_limiting:
  enabled: true
  requests_per_minute: {{ media_rate_limit_requests | default(100) }}
  burst_size: {{ media_rate_limit_burst | default(20) }}
  window_size: {{ media_rate_limit_window | default(60) }}
  
  # Service-specific rate limits
  services:
{% if media_enable_players %}
{% if media_enable_plex %}
    plex:
      requests_per_minute: {{ media_plex_rate_limit | default(200) }}
      burst_size: {{ media_plex_burst_limit | default(50) }}
{% endif %}
{% if media_enable_jellyfin %}
    jellyfin:
      requests_per_minute: {{ media_jellyfin_rate_limit | default(200) }}
      burst_size: {{ media_jellyfin_burst_limit | default(50) }}
{% endif %}
{% if media_enable_emby %}
    emby:
      requests_per_minute: {{ media_emby_rate_limit | default(200) }}
      burst_size: {{ media_emby_burst_limit | default(50) }}
{% endif %}
{% endif %}
{% if media_enable_arr_services %}
{% if media_enable_sonarr %}
    sonarr:
      requests_per_minute: {{ media_sonarr_rate_limit | default(100) }}
      burst_size: {{ media_sonarr_burst_limit | default(20) }}
{% endif %}
{% if media_enable_radarr %}
    radarr:
      requests_per_minute: {{ media_radarr_rate_limit | default(100) }}
      burst_size: {{ media_radarr_burst_limit | default(20) }}
{% endif %}
{% if media_enable_lidarr %}
    lidarr:
      requests_per_minute: {{ media_lidarr_rate_limit | default(100) }}
      burst_size: {{ media_lidarr_burst_limit | default(20) }}
{% endif %}
{% if media_enable_readarr %}
    readarr:
      requests_per_minute: {{ media_readarr_rate_limit | default(100) }}
      burst_size: {{ media_readarr_burst_limit | default(20) }}
{% endif %}
{% if media_enable_prowlarr %}
    prowlarr:
      requests_per_minute: {{ media_prowlarr_rate_limit | default(100) }}
      burst_size: {{ media_prowlarr_burst_limit | default(20) }}
{% endif %}
{% if media_enable_bazarr %}
    bazarr:
      requests_per_minute: {{ media_bazarr_rate_limit | default(100) }}
      burst_size: {{ media_bazarr_burst_limit | default(20) }}
{% endif %}
{% if media_enable_overseerr %}
    overseerr:
      requests_per_minute: {{ media_overseerr_rate_limit | default(100) }}
      burst_size: {{ media_overseerr_burst_limit | default(20) }}
{% endif %}
{% endif %}
{% if media_enable_downloaders %}
{% if media_enable_sabnzbd %}
    sabnzbd:
      requests_per_minute: {{ media_sabnzbd_rate_limit | default(150) }}
      burst_size: {{ media_sabnzbd_burst_limit | default(30) }}
{% endif %}
{% if media_enable_qbittorrent %}
    qbittorrent:
      requests_per_minute: {{ media_qbittorrent_rate_limit | default(150) }}
      burst_size: {{ media_qbittorrent_burst_limit | default(30) }}
{% endif %}
{% endif %}
{% endif %}

# Security headers configuration
{% if media_enable_security_headers %}
security_headers:
  enabled: true
  headers:
    X-Frame-Options: DENY
    X-Content-Type-Options: nosniff
    X-XSS-Protection: "1; mode=block"
    Referrer-Policy: strict-origin-when-cross-origin
    Content-Security-Policy: "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https:; frame-ancestors 'none';"
    Strict-Transport-Security: "max-age=31536000; includeSubDomains"
    Permissions-Policy: "geolocation=(), microphone=(), camera=()"
{% endif %}

# CORS configuration
{% if media_enable_cors %}
cors:
  enabled: true
  allowed_origins:
    - "https://{{ domain }}"
    - "https://*.{{ domain }}"
  allowed_methods:
    - GET
    - POST
    - PUT
    - DELETE
    - OPTIONS
  allowed_headers:
    - Content-Type
    - Authorization
    - X-Requested-With
  allow_credentials: true
  max_age: 86400
{% endif %} 