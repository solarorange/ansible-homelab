#!/bin/bash
# Media Stack Health Check Script
# Generated by Ansible - Do not edit manually

set -euo pipefail

# Configuration
LOG_FILE="{{ media_health_check_log_file }}"
MAX_LOG_SIZE="{{ media_health_check_max_log_size | default('10M') }}"
RETENTION_DAYS="{{ media_health_check_retention_days | default(7) }}"
TIMEOUT="{{ media_health_check_timeout | default(30) }}"

# Service ports
SABNZBD_PORT="{{ media_sabnzbd_port }}"
QBITTORRENT_PORT="{{ media_qbittorrent_port }}"
SONARR_PORT="{{ media_sonarr_port }}"
RADARR_PORT="{{ media_radarr_port }}"
LIDARR_PORT="{{ media_lidarr_port }}"
READARR_PORT="{{ media_readarr_port }}"
PROWLARR_PORT="{{ media_prowlarr_port }}"
BAZARR_PORT="{{ media_bazarr_port }}"
PULSARR_PORT="{{ media_pulsarr_port }}"
OVERSEERR_PORT="{{ media_overseerr_port }}"
PLEX_PORT="{{ media_plex_port }}"
JELLYFIN_PORT="{{ media_jellyfin_port }}"
IMMICH_PORT="{{ media_immich_port }}"

# Service container names
SABNZBD_CONTAINER="{{ media_sabnzbd_container_name }}"
QBITTORRENT_CONTAINER="{{ media_qbittorrent_container_name }}"
SONARR_CONTAINER="{{ media_sonarr_container_name }}"
RADARR_CONTAINER="{{ media_radarr_container_name }}"
LIDARR_CONTAINER="{{ media_lidarr_container_name }}"
READARR_CONTAINER="{{ media_readarr_container_name }}"
PROWLARR_CONTAINER="{{ media_prowlarr_container_name }}"
BAZARR_CONTAINER="{{ media_bazarr_container_name }}"
PULSARR_CONTAINER="{{ media_pulsarr_container_name }}"
OVERSEERR_CONTAINER="{{ media_overseerr_container_name }}"
PLEX_CONTAINER="{{ media_plex_container_name }}"
JELLYFIN_CONTAINER="{{ media_jellyfin_container_name }}"
IMMICH_CONTAINER="{{ media_immich_container_name }}"

# Service API keys
SABNZBD_API_KEY="{{ vault_sabnzbd_api_key | default('') }}"
SONARR_API_KEY="{{ vault_sonarr_api_key | default('') }}"
RADARR_API_KEY="{{ vault_radarr_api_key | default('') }}"
LIDARR_API_KEY="{{ vault_lidarr_api_key | default('') }}"
READARR_API_KEY="{{ vault_readarr_api_key | default('') }}"
PROWLARR_API_KEY="{{ vault_prowlarr_api_key | default('') }}"
BAZARR_API_KEY="{{ vault_bazarr_api_key | default('') }}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# Health check function
check_service() {
    local service_name="$1"
    local url="$2"
    local expected_status="${3:-200}"
    local timeout="${4:-$TIMEOUT}"
    
    log "Checking $service_name..."
    
    if curl -f -s --max-time "$timeout" "$url" > /dev/null 2>&1; then
        log "${GREEN}✓ $service_name is healthy${NC}"
        return 0
    else
        log "${RED}✗ $service_name is unhealthy${NC}"
        return 1
    fi
}

# Check Docker containers
check_container() {
    local container_name="$1"
    local service_name="$2"
    
    log "Checking container $container_name..."
    
    if docker ps --format "table {{.Names}}" | grep -q "^$container_name$"; then
        if docker inspect "$container_name" --format='{{.State.Health.Status}}' 2>/dev/null | grep -q "healthy"; then
            log "${GREEN}✓ $service_name container is healthy${NC}"
            return 0
        else
            log "${YELLOW}⚠ $service_name container is running but health check failed${NC}"
            return 1
        fi
    else
        log "${RED}✗ $service_name container is not running${NC}"
        return 1
    fi
}

# Main health check function
main() {
    local failed_checks=0
    local total_checks=0
    
    log "Starting media stack health check..."
    
    # Create log directory if it doesn't exist
    mkdir -p "$(dirname "$LOG_FILE")"
    
    # Rotate log if it's too large
    if [ -f "$LOG_FILE" ] && [ "$(stat -c%s "$LOG_FILE" 2>/dev/null || echo 0)" -gt "$(numfmt --from=iec "$MAX_LOG_SIZE")" ]; then
        mv "$LOG_FILE" "${LOG_FILE}.old"
        log "Rotated log file"
    fi
    
    # Clean up old logs
    find "$(dirname "$LOG_FILE")" -name "*.old" -mtime +$RETENTION_DAYS -delete 2>/dev/null || true
    
{% if media_enable_downloaders %}
    # Check downloaders
{% if media_enable_sabnzbd %}
    ((total_checks++))
    if check_service "SABnzbd" "http://localhost:$SABNZBD_PORT/api?mode=version&apikey=$SABNZBD_API_KEY"; then
        ((failed_checks++))
    fi
    
    ((total_checks++))
    if ! check_container "$SABNZBD_CONTAINER" "SABnzbd"; then
        ((failed_checks++))
    fi
{% endif %}
{% if media_enable_qbittorrent %}
    ((total_checks++))
    if check_service "qBittorrent" "http://localhost:$QBITTORRENT_PORT"; then
        ((failed_checks++))
    fi
    
    ((total_checks++))
    if ! check_container "$QBITTORRENT_CONTAINER" "qBittorrent"; then
        ((failed_checks++))
    fi
{% endif %}
{% endif %}
{% if media_enable_arr_services %}
    # Check ARR services
{% if media_enable_sonarr %}
    ((total_checks++))
    if check_service "Sonarr" "http://localhost:$SONARR_PORT/api/v3/system/status?apikey=$SONARR_API_KEY"; then
        ((failed_checks++))
    fi
    
    ((total_checks++))
    if ! check_container "$SONARR_CONTAINER" "Sonarr"; then
        ((failed_checks++))
    fi
{% endif %}
{% if media_enable_radarr %}
    ((total_checks++))
    if check_service "Radarr" "http://localhost:$RADARR_PORT/api/v3/system/status?apikey=$RADARR_API_KEY"; then
        ((failed_checks++))
    fi
    
    ((total_checks++))
    if ! check_container "$RADARR_CONTAINER" "Radarr"; then
        ((failed_checks++))
    fi
{% endif %}
{% if media_enable_lidarr %}
    ((total_checks++))
    if check_service "Lidarr" "http://localhost:$LIDARR_PORT/api/v1/system/status?apikey=$LIDARR_API_KEY"; then
        ((failed_checks++))
    fi
    
    ((total_checks++))
    if ! check_container "$LIDARR_CONTAINER" "Lidarr"; then
        ((failed_checks++))
    fi
{% endif %}
{% if media_enable_readarr %}
    ((total_checks++))
    if check_service "Readarr" "http://localhost:$READARR_PORT/api/v1/system/status?apikey=$READARR_API_KEY"; then
        ((failed_checks++))
    fi
    
    ((total_checks++))
    if ! check_container "$READARR_CONTAINER" "Readarr"; then
        ((failed_checks++))
    fi
{% endif %}
{% if media_enable_prowlarr %}
    ((total_checks++))
    if check_service "Prowlarr" "http://localhost:$PROWLARR_PORT/api/v1/system/status?apikey=$PROWLARR_API_KEY"; then
        ((failed_checks++))
    fi
    
    ((total_checks++))
    if ! check_container "$PROWLARR_CONTAINER" "Prowlarr"; then
        ((failed_checks++))
    fi
{% endif %}
{% if media_enable_bazarr %}
    ((total_checks++))
    if check_service "Bazarr" "http://localhost:$BAZARR_PORT/api/system/status?apikey=$BAZARR_API_KEY"; then
        ((failed_checks++))
    fi
    
    ((total_checks++))
    if ! check_container "$BAZARR_CONTAINER" "Bazarr"; then
        ((failed_checks++))
    fi
{% endif %}
{% if media_enable_pulsarr %}
    ((total_checks++))
    if check_service "Pulsarr" "http://localhost:$PULSARR_PORT/health"; then
        ((failed_checks++))
    fi
    
    ((total_checks++))
    if ! check_container "$PULSARR_CONTAINER" "Pulsarr"; then
        ((failed_checks++))
    fi
{% endif %}
{% if media_enable_overseerr %}
    ((total_checks++))
    if check_service "Overseerr" "http://localhost:$OVERSEERR_PORT/api/v1/status"; then
        ((failed_checks++))
    fi
    
    ((total_checks++))
    if ! check_container "$OVERSEERR_CONTAINER" "Overseerr"; then
        ((failed_checks++))
    fi
{% endif %}
{% endif %}
{% if media_enable_players %}
    # Check media players
{% if media_enable_plex %}
    ((total_checks++))
    if check_service "Plex" "http://localhost:$PLEX_PORT/web/index.html"; then
        ((failed_checks++))
    fi
    
    ((total_checks++))
    if ! check_container "$PLEX_CONTAINER" "Plex"; then
        ((failed_checks++))
    fi
{% endif %}
{% if media_enable_jellyfin %}
    ((total_checks++))
    if check_service "Jellyfin" "http://localhost:$JELLYFIN_PORT/health"; then
        ((failed_checks++))
    fi
    
    ((total_checks++))
    if ! check_container "$JELLYFIN_CONTAINER" "Jellyfin"; then
        ((failed_checks++))
    fi
{% endif %}
{% if media_enable_immich %}
    ((total_checks++))
    if check_service "Immich" "http://localhost:$IMMICH_PORT/api/server-info/version"; then
        ((failed_checks++))
    fi
    
    ((total_checks++))
    if ! check_container "$IMMICH_CONTAINER" "Immich"; then
        ((failed_checks++))
    fi
{% endif %}
{% endif %}
{% if media_enable_monitoring %}
    # Check monitoring services
{% if media_enable_tautulli %}
    ((total_checks++))
    if check_service "Tautulli" "http://localhost:{{ media_tautulli_port }}/api/v2?apikey={{ media_tautulli_api_key | default('') }}&cmd=status"; then
        ((failed_checks++))
    fi
    
    ((total_checks++))
    if ! check_container "{{ media_tautulli_container_name }}" "Tautulli"; then
        ((failed_checks++))
    fi
{% endif %}
{% endif %}
    
    # Check storage space
    ((total_checks++))
    local storage_usage=$(df "{{ media_base_dir }}" | tail -1 | awk '{print $5}' | sed 's/%//')
    if [ "$storage_usage" -gt 90 ]; then
        log "${RED}✗ Storage usage is high: ${storage_usage}%${NC}"
        ((failed_checks++))
    else
        log "${GREEN}✓ Storage usage is acceptable: ${storage_usage}%${NC}"
    fi
    
    # Check memory usage
    ((total_checks++))
    local memory_usage=$(free | grep Mem | awk '{printf "%.0f", $3/$2 * 100.0}')
    if [ "$memory_usage" -gt 90 ]; then
        log "${RED}✗ Memory usage is high: ${memory_usage}%${NC}"
        ((failed_checks++))
    else
        log "${GREEN}✓ Memory usage is acceptable: ${memory_usage}%${NC}"
    fi
    
    # Summary
    local passed_checks=$((total_checks - failed_checks))
    log "Health check completed: $passed_checks/$total_checks checks passed"
    
    if [ $failed_checks -eq 0 ]; then
        log "${GREEN}All media stack services are healthy!${NC}"
        exit 0
    else
        log "${RED}$failed_checks service(s) are unhealthy${NC}"
        exit 1
    fi
}

# Run main function
main "$@" 