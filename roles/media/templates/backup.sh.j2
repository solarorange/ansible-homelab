#!/bin/bash
# Media Stack Backup Script
# Generated by Ansible - Do not edit manually

set -euo pipefail

# Configuration
BACKUP_DIR="{{ media_backup_dir }}"
RETENTION_DAYS="{{ media_backup_retention_days | default(7) }}"
COMPRESSION="{{ media_backup_compression | default(true) | lower }}"
LOG_FILE="{{ media_backup_log_file }}"
MAX_LOG_SIZE="{{ media_backup_max_log_size | default('10M') }}"
NOTIFICATION_ENABLED="{{ media_backup_notifications_enabled | default(true) | lower }}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# Notification function
send_notification() {
    local message="$1"
    local level="${2:-info}"
    
    if [ "$NOTIFICATION_ENABLED" = "true" ]; then
        # Send to notification system (implement based on your setup)
        log "Notification [$level]: $message"
    fi
}

# Create backup directory
create_backup_dir() {
    local timestamp=$(date +%Y%m%d_%H%M%S)
    local backup_path="$BACKUP_DIR/media_stack_$timestamp"
    
    mkdir -p "$backup_path"
    echo "$backup_path"
}

# Backup service configuration
backup_service_config() {
    local service_name="$1"
    local config_dir="$2"
    local backup_path="$3"
    
    log "Backing up $service_name configuration..."
    
    if [ -d "$config_dir" ]; then
        local service_backup_dir="$backup_path/$service_name"
        mkdir -p "$service_backup_dir"
        
        # Exclude temporary files and logs
        rsync -av --exclude='*.tmp' --exclude='*.log' --exclude='logs/' --exclude='cache/' \
              "$config_dir/" "$service_backup_dir/" || {
            log "${RED}Failed to backup $service_name configuration${NC}"
            return 1
        }
        
        log "${GREEN}✓ $service_name configuration backed up${NC}"
    else
        log "${YELLOW}⚠ $service_name configuration directory not found${NC}"
    fi
}

# Backup database
backup_database() {
    local service_name="$1"
    local db_file="$2"
    local backup_path="$3"
    
    log "Backing up $service_name database..."
    
    if [ -f "$db_file" ]; then
        local db_backup_file="$backup_path/${service_name}_db.sqlite"
        cp "$db_file" "$db_backup_file" || {
            log "${RED}Failed to backup $service_name database${NC}"
            return 1
        }
        
        log "${GREEN}✓ $service_name database backed up${NC}"
    else
        log "${YELLOW}⚠ $service_name database file not found${NC}"
    fi
}

# Compress backup
compress_backup() {
    local backup_path="$1"
    
    if [ "$COMPRESSION" = "true" ]; then
        log "Compressing backup..."
        cd "$(dirname "$backup_path")"
        tar -czf "${backup_path}.tar.gz" "$(basename "$backup_path")" || {
            log "${RED}Failed to compress backup${NC}"
            return 1
        }
        
        # Remove uncompressed directory
        rm -rf "$backup_path"
        log "${GREEN}✓ Backup compressed${NC}"
    fi
}

# Clean up old backups
cleanup_old_backups() {
    log "Cleaning up backups older than $RETENTION_DAYS days..."
    
    find "$BACKUP_DIR" -name "media_stack_*" -type d -mtime +$RETENTION_DAYS -exec rm -rf {} \; 2>/dev/null || true
    find "$BACKUP_DIR" -name "media_stack_*.tar.gz" -type f -mtime +$RETENTION_DAYS -delete 2>/dev/null || true
    
    log "${GREEN}✓ Old backups cleaned up${NC}"
}

# Main backup function
main() {
    local start_time=$(date +%s)
    local failed_backups=0
    
    log "Starting media stack backup..."
    
    # Create log directory if it doesn't exist
    mkdir -p "$(dirname "$LOG_FILE")"
    
    # Rotate log if it's too large
    if [ -f "$LOG_FILE" ] && [ "$(stat -c%s "$LOG_FILE" 2>/dev/null || echo 0)" -gt "$(numfmt --from=iec "$MAX_LOG_SIZE")" ]; then
        mv "$LOG_FILE" "${LOG_FILE}.old"
        log "Rotated log file"
    fi
    
    # Create backup directory
    local backup_path=$(create_backup_dir)
    
    # Create backup manifest
    local manifest_file="$backup_path/backup_manifest.txt"
    echo "Media Stack Backup - $(date)" > "$manifest_file"
    echo "Backup started: $(date)" >> "$manifest_file"
    echo "" >> "$manifest_file"
    
{% if media_enable_downloaders %}
    # Backup downloaders
{% if media_enable_sabnzbd %}
    if ! backup_service_config "SABnzbd" "{{ media_sabnzbd_config_dir }}" "$backup_path"; then
        ((failed_backups++))
    fi
    echo "SABnzbd: {{ media_sabnzbd_config_dir }}" >> "$manifest_file"
{% endif %}
{% if media_enable_qbittorrent %}
    if ! backup_service_config "qBittorrent" "{{ media_qbittorrent_config_dir }}" "$backup_path"; then
        ((failed_backups++))
    fi
    echo "qBittorrent: {{ media_qbittorrent_config_dir }}" >> "$manifest_file"
{% endif %}
{% endif %}
{% if media_enable_arr_services %}
    # Backup ARR services
{% if media_enable_sonarr %}
    if ! backup_service_config "Sonarr" "{{ media_sonarr_config_dir }}" "$backup_path"; then
        ((failed_backups++))
    fi
    if ! backup_database "Sonarr" "{{ media_sonarr_config_dir }}/nzbdrone.db" "$backup_path"; then
        ((failed_backups++))
    fi
    echo "Sonarr: {{ media_sonarr_config_dir }}" >> "$manifest_file"
{% endif %}
{% if media_enable_radarr %}
    if ! backup_service_config "Radarr" "{{ media_radarr_config_dir }}" "$backup_path"; then
        ((failed_backups++))
    fi
    if ! backup_database "Radarr" "{{ media_radarr_config_dir }}/radarr.db" "$backup_path"; then
        ((failed_backups++))
    fi
    echo "Radarr: {{ media_radarr_config_dir }}" >> "$manifest_file"
{% endif %}
{% if media_enable_lidarr %}
    if ! backup_service_config "Lidarr" "{{ media_lidarr_config_dir }}" "$backup_path"; then
        ((failed_backups++))
    fi
    if ! backup_database "Lidarr" "{{ media_lidarr_config_dir }}/lidarr.db" "$backup_path"; then
        ((failed_backups++))
    fi
    echo "Lidarr: {{ media_lidarr_config_dir }}" >> "$manifest_file"
{% endif %}
{% if media_enable_readarr %}
    if ! backup_service_config "Readarr" "{{ media_readarr_config_dir }}" "$backup_path"; then
        ((failed_backups++))
    fi
    if ! backup_database "Readarr" "{{ media_readarr_config_dir }}/readarr.db" "$backup_path"; then
        ((failed_backups++))
    fi
    echo "Readarr: {{ media_readarr_config_dir }}" >> "$manifest_file"
{% endif %}
{% if media_enable_prowlarr %}
    if ! backup_service_config "Prowlarr" "{{ media_prowlarr_config_dir }}" "$backup_path"; then
        ((failed_backups++))
    fi
    if ! backup_database "Prowlarr" "{{ media_prowlarr_config_dir }}/prowlarr.db" "$backup_path"; then
        ((failed_backups++))
    fi
    echo "Prowlarr: {{ media_prowlarr_config_dir }}" >> "$manifest_file"
{% endif %}
{% if media_enable_bazarr %}
    if ! backup_service_config "Bazarr" "{{ media_bazarr_config_dir }}" "$backup_path"; then
        ((failed_backups++))
    fi
    if ! backup_database "Bazarr" "{{ media_bazarr_config_dir }}/bazarr.db" "$backup_path"; then
        ((failed_backups++))
    fi
    echo "Bazarr: {{ media_bazarr_config_dir }}" >> "$manifest_file"
{% endif %}
{% if media_enable_pulsarr %}
    if ! backup_service_config "Pulsarr" "{{ media_pulsarr_config_dir }}" "$backup_path"; then
        ((failed_backups++))
    fi
    echo "Pulsarr: {{ media_pulsarr_config_dir }}" >> "$manifest_file"
{% endif %}
{% if media_enable_overseerr %}
    if ! backup_service_config "Overseerr" "{{ media_overseerr_config_dir }}" "$backup_path"; then
        ((failed_backups++))
    fi
    echo "Overseerr: {{ media_overseerr_config_dir }}" >> "$manifest_file"
{% endif %}
{% endif %}
{% if media_enable_players %}
    # Backup media players
{% if media_enable_plex %}
    if ! backup_service_config "Plex" "{{ media_plex_config_dir }}" "$backup_path"; then
        ((failed_backups++))
    fi
    echo "Plex: {{ media_plex_config_dir }}" >> "$manifest_file"
{% endif %}
{% if media_enable_jellyfin %}
    if ! backup_service_config "Jellyfin" "{{ media_jellyfin_config_dir }}" "$backup_path"; then
        ((failed_backups++))
    fi
    echo "Jellyfin: {{ media_jellyfin_config_dir }}" >> "$manifest_file"
{% endif %}
{% if media_enable_emby %}
    if ! backup_service_config "Emby" "{{ media_emby_config_dir }}" "$backup_path"; then
        ((failed_backups++))
    fi
    echo "Emby: {{ media_emby_config_dir }}" >> "$manifest_file"
{% endif %}
{% endif %}
{% if media_enable_monitoring %}
    # Backup monitoring services
{% if media_enable_tautulli %}
    if ! backup_service_config "Tautulli" "{{ media_tautulli_config_dir }}" "$backup_path"; then
        ((failed_backups++))
    fi
    if ! backup_database "Tautulli" "{{ media_tautulli_config_dir }}/tautulli.db" "$backup_path"; then
        ((failed_backups++))
    fi
    echo "Tautulli: {{ media_tautulli_config_dir }}" >> "$manifest_file"
{% endif %}
{% endif %}
    
    # Backup environment configuration
    if [ -f "{{ media_base_dir }}/.env" ]; then
        cp "{{ media_base_dir }}/.env" "$backup_path/"
        echo "Environment: {{ media_base_dir }}/.env" >> "$manifest_file"
        log "${GREEN}✓ Environment configuration backed up${NC}"
    fi
    
    # Backup Docker Compose file
    if [ -f "{{ media_base_dir }}/docker-compose.yml" ]; then
        cp "{{ media_base_dir }}/docker-compose.yml" "$backup_path/"
        echo "Docker Compose: {{ media_base_dir }}/docker-compose.yml" >> "$manifest_file"
        log "${GREEN}✓ Docker Compose file backed up${NC}"
    fi
    
    # Complete manifest
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    echo "" >> "$manifest_file"
    echo "Backup completed: $(date)" >> "$manifest_file"
    echo "Duration: ${duration} seconds" >> "$manifest_file"
    echo "Failed backups: $failed_backups" >> "$manifest_file"
    
    # Compress backup
    if ! compress_backup "$backup_path"; then
        ((failed_backups++))
    fi
    
    # Clean up old backups
    cleanup_old_backups
    
    # Summary
    local backup_size=$(du -sh "$backup_path"* 2>/dev/null | tail -1 | cut -f1)
    log "Backup completed in ${duration} seconds"
    log "Backup size: $backup_size"
    
    if [ $failed_backups -eq 0 ]; then
        log "${GREEN}All backups completed successfully!${NC}"
        send_notification "Media stack backup completed successfully" "success"
        exit 0
    else
        log "${RED}$failed_backups backup(s) failed${NC}"
        send_notification "Media stack backup completed with $failed_backups failures" "warning"
        exit 1
    fi
}

# Run main function
main "$@" 