#!/bin/bash
# Utilities Stack Health Check Script

set -e

# Configuration
LOG_FILE="/var/log/utilities-health.log"
TIMEOUT=30
RETRY_COUNT=3

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# Health check function
check_service() {
    local service_name=$1
    local container_name=$2
    local health_url=$3
    
    log "Checking $service_name..."
    
    # Check if container is running
    if ! docker ps -f name="$container_name" | grep -q "$container_name"; then
        log "${RED}ERROR: $service_name container is not running${NC}"
        return 1
    fi
    
    # Check container health status
    local health_status=$(docker inspect --format='{{.State.Health.Status}}' "$container_name" 2>/dev/null || echo "none")
    if [ "$health_status" = "unhealthy" ]; then
        log "${RED}ERROR: $service_name container is unhealthy${NC}"
        return 1
    fi
    
    # Check health endpoint if provided
    if [ -n "$health_url" ]; then
        for i in $(seq 1 $RETRY_COUNT); do
            if curl -f -s --max-time $TIMEOUT "$health_url" >/dev/null 2>&1; then
                log "${GREEN}SUCCESS: $service_name health check passed${NC}"
                return 0
            else
                log "${YELLOW}WARNING: $service_name health check attempt $i failed${NC}"
                [ $i -lt $RETRY_COUNT ] && sleep 2
            fi
        done
        log "${RED}ERROR: $service_name health check failed after $RETRY_COUNT attempts${NC}"
        return 1
    else
        log "${GREEN}SUCCESS: $service_name container is running${NC}"
        return 0
    fi
}

# Main health checks
main() {
    log "Starting utilities stack health check..."
    
    local exit_code=0
    
    # Check Portainer
    check_service "Portainer" "portainer" "http://localhost:9000/api/status" || exit_code=1
    
    # Check Tdarr
    check_service "Tdarr" "tdarr" "http://localhost:8265/api/v2/status" || exit_code=1
    
    # Check Tautulli
    check_service "Tautulli" "tautulli" "http://localhost:8181/api/v2?apikey=test&cmd=status" || exit_code=1
    
    # Check system resources
    log "Checking system resources..."
    
    # Check disk usage
    local disk_usage=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
    if [ "$disk_usage" -gt 85 ]; then
        log "${RED}WARNING: Disk usage is ${disk_usage}%${NC}"
        exit_code=1
    else
        log "${GREEN}Disk usage: ${disk_usage}%${NC}"
    fi
    
    # Check memory usage
    local mem_usage=$(free | grep Mem | awk '{printf("%.0f", $3/$2 * 100.0)}')
    if [ "$mem_usage" -gt 85 ]; then
        log "${RED}WARNING: Memory usage is ${mem_usage}%${NC}"
        exit_code=1
    else
        log "${GREEN}Memory usage: ${mem_usage}%${NC}"
    fi
    
    # Check Docker daemon
    if ! docker info >/dev/null 2>&1; then
        log "${RED}ERROR: Docker daemon is not accessible${NC}"
        exit_code=1
    else
        log "${GREEN}Docker daemon is healthy${NC}"
    fi
    
    if [ $exit_code -eq 0 ]; then
        log "${GREEN}All utilities services are healthy${NC}"
    else
        log "${RED}Some utilities services have issues${NC}"
    fi
    
    exit $exit_code
}

# Run main function
main "$@" 