---
# Vaultwarden Deployment Tasks
# Handles Docker deployment, directory creation, and basic configuration

- name: Create Vaultwarden directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0755"
  loop:
    - "{{ vaultwarden_config_dir }}"
    - "{{ vaultwarden_data_dir }}"
    - "{{ vaultwarden_backup_dir }}"
    - "{{ logs_dir }}/vaultwarden"
    - "{{ logs_dir }}/vaultwarden/backup"
    - "{{ logs_dir }}/vaultwarden/health"
    - "{{ vaultwarden_config_dir }}/scripts"
  register: vaultwarden_dir_creation
  tags: [vaultwarden, vaultwarden-deploy, directories]

- name: Backup existing Vaultwarden configuration
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ ansible_backup_dir }}/vaultwarden/{{ ansible_date_time.date }}/{{ item | basename }}"
    remote_src: true
  loop:
    - "{{ vaultwarden_data_dir }}/config.json"
    - "{{ vaultwarden_config_dir }}/docker-compose.yml"
  when: item is file
  register: vaultwarden_config_backup
  tags: [vaultwarden, vaultwarden-deploy, backup]

- name: Create Vaultwarden Docker Compose configuration
  ansible.builtin.template:
    src: docker-compose.yml.j2
    dest: "{{ vaultwarden_config_dir }}/docker-compose.yml"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0644"
  register: vaultwarden_docker_compose_creation
  tags: [vaultwarden, vaultwarden-deploy, config]

- name: Create Vaultwarden configuration script
  ansible.builtin.template:
    src: setup_vaultwarden.py.j2
    dest: "{{ vaultwarden_config_dir }}/scripts/setup_vaultwarden.py"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0755"
  register: vaultwarden_script_creation
  tags: [vaultwarden, vaultwarden-deploy, scripts]

- name: Create Vaultwarden backup script
  ansible.builtin.template:
    src: backup.sh.j2
    dest: "{{ vaultwarden_config_dir }}/scripts/backup.sh"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0750"
  register: vaultwarden_backup_script_creation
  tags: [vaultwarden, vaultwarden-deploy, scripts]

- name: Create Vaultwarden management script
  ansible.builtin.template:
    src: manage.sh.j2
    dest: "{{ vaultwarden_config_dir }}/scripts/manage.sh"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0750"
  register: vaultwarden_management_script_creation
  tags: [vaultwarden, vaultwarden-deploy, scripts]

- name: Create Vaultwarden health check script
  ansible.builtin.template:
    src: healthcheck.sh.j2
    dest: "{{ vaultwarden_config_dir }}/scripts/healthcheck.sh"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0750"
  register: vaultwarden_healthcheck_script_creation
  tags: [vaultwarden, vaultwarden-deploy, scripts]

- name: Start Vaultwarden services
  community.docker.docker_compose:
    project_src: "{{ vaultwarden_config_dir }}"
    state: present
    build: false
  register: vaultwarden_deployment_result
  retries: 3
  delay: 30
  until: vaultwarden_deployment_result is success
  tags: [vaultwarden, vaultwarden-deploy, docker]

- name: Wait for Vaultwarden to be ready
  ansible.builtin.uri:
    url: "http://localhost:{{ vaultwarden_port }}/alive"
    method: GET
    status_code: [200, 302, 401]
    timeout: 30
  register: vaultwarden_health_check
  retries: 30
  delay: 10
  until: vaultwarden_health_check.status in [200, 302, 401]
  tags: [vaultwarden, vaultwarden-deploy, wait]

- name: Verify Vaultwarden deployment
  ansible.builtin.uri:
    url: "https://{{ vaultwarden_subdomain }}.{{ domain }}"
    method: GET
    status_code: [200, 302]
    timeout: 30
  register: vaultwarden_verification
  tags: [vaultwarden, vaultwarden-deploy, verify]

- name: Display Vaultwarden deployment status
  ansible.builtin.debug:
    msg: |
      ========================================
      VAULTWARDEN DEPLOYMENT STATUS
      ========================================
      
      Status: {{ 'SUCCESS' if vaultwarden_verification.status == 200 or vaultwarden_verification.status == 302 else 'FAILED' }}
      URL: https://{{ vaultwarden_subdomain }}.{{ domain }}
      Local URL: http://localhost:{{ vaultwarden_port }}
      
      Configuration:
      - Database Type: {{ vaultwarden_database_type }}
      - Signups Allowed: false
      - WebSocket Enabled: true
      - Admin Token: {{ 'SET' if vault_vaultwarden_admin_token else 'NOT SET' }}
      
      Directories:
      - Config: {{ vaultwarden_config_dir }}
      - Data: {{ vaultwarden_data_dir }}
      - Backup: {{ vaultwarden_backup_dir }}
      - Logs: {{ logs_dir }}/vaultwarden
      
      ========================================
  tags: [vaultwarden, vaultwarden-deploy, summary]

rescue:
  - name: Log Vaultwarden deployment failure (standardized)
    include_tasks: ../../logging/tasks/log_error.yml
    vars:
      log_service: "vaultwarden"
      log_action: "deploy"
      log_message: |
        Vaultwarden deployment failed:
        - Directory creation: {{ vaultwarden_dir_creation | default('N/A') }}
        - Config backup: {{ vaultwarden_config_backup | default('N/A') }}
        - Docker compose: {{ vaultwarden_docker_compose_creation | default('N/A') }}
        - Script creation: {{ vaultwarden_script_creation | default('N/A') }}
        - Deployment result: {{ vaultwarden_deployment_result | default('N/A') }}
        - Health check: {{ vaultwarden_health_check | default('N/A') }}
        - Verification: {{ vaultwarden_verification | default('N/A') }}

  - name: Attempt Vaultwarden recovery
    ansible.builtin.include_tasks: handlers/error_handling/recovery.yml
    vars:
      failed_config_files:
        - "{{ vaultwarden_data_dir }}/config.json"
        - "{{ vaultwarden_config_dir }}/docker-compose.yml"
      config_verification_commands:
        - "{{ vaultwarden_config_dir }}/scripts/healthcheck.sh"
      critical_services:
        - vaultwarden

  - name: Rollback if recovery failed
    ansible.builtin.include_tasks: handlers/error_handling/rollback.yml
    when: recovery_complete | default(false) | bool == false
    vars:
      affected_services:
        - vaultwarden
      config_files:
        - "{{ vaultwarden_data_dir }}/config.json"
        - "{{ vaultwarden_config_dir }}/docker-compose.yml"

  - name: Fail playbook if recovery and rollback failed
    ansible.builtin.fail:
      msg: "Vaultwarden deployment failed and rollback was unsuccessful. Manual intervention required."
    when: recovery_complete | default(false) | bool == false

always:
  - name: Cleanup temporary files
    ansible.builtin.file:
      path: "{{ item }}"
      state: absent
    loop: "{{ temp_dirs | default([]) }}"
    when: temp_dirs is defined
  tags: [vaultwarden, vaultwarden-deploy, cleanup] 