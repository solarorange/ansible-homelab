#!/bin/bash

# Vaultwarden Health Check Script
# Comprehensive health check for Vaultwarden service

set -euo pipefail

# Configuration
CONTAINER_NAME="{{ vaultwarden_app_container_name }}"
HEALTH_URL="http://localhost:{{ vaultwarden_port }}/alive"
WEB_URL="https://{{ vaultwarden_subdomain }}.{{ domain }}"
TIMEOUT="{{ vaultwarden_health_check_timeout }}"
RETRIES="{{ vaultwarden_health_check_retries }}"
LOG_FILE="{{ vaultwarden_health_check_log_file }}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Check if container is running
check_container() {
    if docker ps --format "table {{.Names}}" | grep -q "^${CONTAINER_NAME}$"; then
        return 0
    else
        return 1
    fi
}

# Check container health status
check_container_health() {
    local health_status
    health_status=$(docker inspect "$CONTAINER_NAME" --format='{{.State.Health.Status}}' 2>/dev/null || echo "none")
    
    case "$health_status" in
        "healthy")
            return 0
            ;;
        "unhealthy")
            return 1
            ;;
        "starting")
            return 2
            ;;
        *)
            return 3
            ;;
    esac
}

# Check health endpoint
check_health_endpoint() {
    local response
    response=$(curl -s -o /dev/null -w "%{http_code}" --max-time "$TIMEOUT" "$HEALTH_URL" 2>/dev/null || echo "000")
    
    case "$response" in
        200|302|401)
            return 0
            ;;
        *)
            return 1
            ;;
    esac
}

# Check web interface
check_web_interface() {
    local response
    response=$(curl -s -o /dev/null -w "%{http_code}" --max-time "$TIMEOUT" "$WEB_URL" 2>/dev/null || echo "000")
    
    case "$response" in
        200|302|401)
            return 0
            ;;
        *)
            return 1
            ;;
    esac
}

# Check database connectivity (if PostgreSQL)
check_database() {
    {% if vaultwarden_database_type == 'postgresql' %}
    if docker exec "{{ vaultwarden_postgres_container_name }}" pg_isready -U "{{ vaultwarden_database_user }}" >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
    {% else %}
    # SQLite database check
    if [[ -f "{{ vaultwarden_data_dir }}/db.sqlite3" ]]; then
        return 0
    else
        return 1
    fi
    {% endif %}
}

# Check disk space
check_disk_space() {
    local data_dir_space
    data_dir_space=$(df "{{ vaultwarden_data_dir }}" | awk 'NR==2 {print $5}' | sed 's/%//')
    
    if [[ "$data_dir_space" -lt 90 ]]; then
        return 0
    else
        return 1
    fi
}

# Check memory usage
check_memory_usage() {
    local memory_usage
    memory_usage=$(docker stats "$CONTAINER_NAME" --no-stream --format "table {{.MemPerc}}" | tail -n 1 | sed 's/%//')
    
    if [[ "$memory_usage" -lt 80 ]]; then
        return 0
    else
        return 1
    fi
}

# Check logs for errors
check_logs() {
    local error_count
    error_count=$(docker logs "$CONTAINER_NAME" --tail 100 2>&1 | grep -c "ERROR\|FATAL\|CRITICAL" || echo "0")
    
    if [[ "$error_count" -eq 0 ]]; then
        return 0
    else
        return 1
    fi
}

# Main health check function
main_health_check() {
    local overall_status=0
    local checks_passed=0
    local total_checks=0
    
    log "Starting Vaultwarden health check..."
    
    # Check 1: Container running
    total_checks=$((total_checks + 1))
    if check_container; then
        log "✓ Container is running"
        checks_passed=$((checks_passed + 1))
    else
        log "✗ Container is not running"
        overall_status=1
    fi
    
    # Check 2: Container health
    if check_container; then
        total_checks=$((total_checks + 1))
        case $(check_container_health) in
            0)
                log "✓ Container health is good"
                checks_passed=$((checks_passed + 1))
                ;;
            1)
                log "✗ Container is unhealthy"
                overall_status=1
                ;;
            2)
                log "⚠ Container is starting"
                ;;
            3)
                log "⚠ Container health status unknown"
                ;;
        esac
    fi
    
    # Check 3: Health endpoint
    total_checks=$((total_checks + 1))
    if check_health_endpoint; then
        log "✓ Health endpoint is responding"
        checks_passed=$((checks_passed + 1))
    else
        log "✗ Health endpoint is not responding"
        overall_status=1
    fi
    
    # Check 4: Web interface
    total_checks=$((total_checks + 1))
    if check_web_interface; then
        log "✓ Web interface is accessible"
        checks_passed=$((checks_passed + 1))
    else
        log "✗ Web interface is not accessible"
        overall_status=1
    fi
    
    # Check 5: Database
    total_checks=$((total_checks + 1))
    if check_database; then
        log "✓ Database is accessible"
        checks_passed=$((checks_passed + 1))
    else
        log "✗ Database is not accessible"
        overall_status=1
    fi
    
    # Check 6: Disk space
    total_checks=$((total_checks + 1))
    if check_disk_space; then
        log "✓ Sufficient disk space available"
        checks_passed=$((checks_passed + 1))
    else
        log "✗ Low disk space"
        overall_status=1
    fi
    
    # Check 7: Memory usage
    if check_container; then
        total_checks=$((total_checks + 1))
        if check_memory_usage; then
            log "✓ Memory usage is normal"
            checks_passed=$((checks_passed + 1))
        else
            log "✗ High memory usage"
            overall_status=1
        fi
    fi
    
    # Check 8: Logs
    if check_container; then
        total_checks=$((total_checks + 1))
        if check_logs; then
            log "✓ No critical errors in logs"
            checks_passed=$((checks_passed + 1))
        else
            log "✗ Critical errors found in logs"
            overall_status=1
        fi
    fi
    
    # Summary
    log "Health check completed: $checks_passed/$total_checks checks passed"
    
    if [[ $overall_status -eq 0 ]]; then
        log "Vaultwarden is healthy"
        echo -e "${GREEN}Vaultwarden is healthy${NC}"
        exit 0
    else
        log "Vaultwarden has health issues"
        echo -e "${RED}Vaultwarden has health issues${NC}"
        exit 1
    fi
}

# Retry logic
retry_health_check() {
    local attempt=1
    
    while [[ $attempt -le $RETRIES ]]; do
        log "Health check attempt $attempt/$RETRIES"
        
        if main_health_check; then
            return 0
        fi
        
        if [[ $attempt -lt $RETRIES ]]; then
            log "Health check failed, retrying in 30 seconds..."
            sleep 30
        fi
        
        attempt=$((attempt + 1))
    done
    
    log "Health check failed after $RETRIES attempts"
    return 1
}

# Check if this is a test run
if [[ "${1:-}" == "--test" ]]; then
    log "Running health check test..."
    main_health_check
    exit $?
fi

# Run health check with retry logic
retry_health_check 