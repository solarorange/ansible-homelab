version: '3.8'

networks:
  {{ vaultwarden_network_name }}:
    external: {{ vaultwarden_network_external | lower }}

services:
  # Vaultwarden App
  {% if vaultwarden_components.app.enabled | default(true) %}
  vaultwarden:
    image: "{{ vaultwarden_components.app.image }}"
    container_name: "{{ vaultwarden_components.app.container_name }}"
    restart: "{{ vaultwarden_container_restart_policy }}"
    networks:
      - "{{ vaultwarden_network_name }}"
      - "{{ vaultwarden_traefik_network }}"
    environment:
      - PUID={{ PUID | default(1000) }}
      - PGID={{ PGID | default(1000) }}
      - TZ={{ timezone }}
      {% for key, value in vaultwarden_components.app.environment.items() %}
      - {{ key }}={{ value }}
      {% endfor %}
    volumes:
      {% for volume in vaultwarden_components.app.volumes %}
      - "{{ volume }}"
      {% endfor %}
    ports:
      - "{{ vaultwarden_port }}:{{ vaultwarden_port }}"
      - "{{ vaultwarden_websocket_port }}:{{ vaultwarden_websocket_port }}"
    labels:
      # Traefik labels
      - "traefik.enable={{ 'true' if vaultwarden_traefik_enabled else 'false' }}"
      - "traefik.http.routers.vaultwarden.rule=Host(`{{ vaultwarden_subdomain }}.{{ domain }}`)"
      - "traefik.http.routers.vaultwarden.entrypoints=websecure"
      - "traefik.http.routers.vaultwarden.tls.certresolver={{ vaultwarden_traefik_ssl_resolver }}"
      - "traefik.http.services.vaultwarden.loadbalancer.server.port={{ vaultwarden_port }}"
      - "traefik.http.routers.vaultwarden.middlewares={{ vaultwarden_traefik_auth_middleware }}"
      # WebSocket support
      - "traefik.http.routers.vaultwarden-ws.rule=Host(`{{ vaultwarden_subdomain }}.{{ domain }}`) && PathPrefix(`/notifications/hub`)"
      - "traefik.http.routers.vaultwarden-ws.entrypoints=websecure"
      - "traefik.http.routers.vaultwarden-ws.tls.certresolver={{ vaultwarden_traefik_ssl_resolver }}"
      - "traefik.http.services.vaultwarden-ws.loadbalancer.server.port={{ vaultwarden_websocket_port }}"
      - "traefik.http.routers.vaultwarden-ws.middlewares={{ vaultwarden_traefik_auth_middleware }}"
      # Prometheus scraping labels
      - "vaultwarden.prometheus.scrape=true"
      - "vaultwarden.prometheus.port={{ vaultwarden_port }}"
      - "vaultwarden.prometheus.path=/metrics"
      # Loki scraping label
      - "vaultwarden.loki.scrape=true"
      # Health check labels
      - "vaultwarden.healthcheck.enabled=true"
      - "vaultwarden.healthcheck.url=/alive"
      # Backup labels
      - "vaultwarden.backup.enabled={{ 'true' if vaultwarden_backup_enabled else 'false' }}"
      - "vaultwarden.backup.schedule={{ vaultwarden_backup_schedule }}"
      # Security labels
      - "vaultwarden.security.headers={{ 'true' if vaultwarden_security_headers else 'false' }}"
      - "vaultwarden.security.rate_limiting={{ 'true' if vaultwarden_rate_limiting else 'false' }}"
      - "vaultwarden.security.cors={{ 'true' if vaultwarden_cors_enabled else 'false' }}"
    healthcheck:
      test: {{ vaultwarden_components.app.healthcheck.test }}
      interval: "{{ vaultwarden_components.app.healthcheck.interval }}"
      timeout: "{{ vaultwarden_components.app.healthcheck.timeout }}"
      retries: {{ vaultwarden_components.app.healthcheck.retries }}
      start_period: "30s"
    depends_on:
      {% for dependency in vaultwarden_components.app.depends_on %}
      - {{ dependency }}
      {% endfor %}
    deploy:
      resources:
        limits:
          cpus: '{{ vaultwarden_components.app.resources.limits.cpus }}'
          memory: {{ vaultwarden_components.app.resources.limits.memory }}
        reservations:
          cpus: '{{ vaultwarden_components.app.resources.reservations.cpus }}'
          memory: {{ vaultwarden_components.app.resources.reservations.memory }}
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  {% endif %}

  # Vaultwarden PostgreSQL Database (optional)
  {% if vaultwarden_components.postgres.enabled | default(false) and vaultwarden_database_type == 'postgresql' %}
  vaultwarden-postgres:
    image: "{{ vaultwarden_components.postgres.image }}"
    container_name: "{{ vaultwarden_components.postgres.container_name }}"
    restart: "{{ vaultwarden_container_restart_policy }}"
    networks:
      - "{{ vaultwarden_network_name }}"
    environment:
      - PUID={{ PUID | default(1000) }}
      - PGID={{ PGID | default(1000) }}
      - TZ={{ timezone }}
      {% for key, value in vaultwarden_components.postgres.environment.items() %}
      - {{ key }}={{ value }}
      {% endfor %}
    volumes:
      {% for volume in vaultwarden_components.postgres.volumes %}
      - "{{ volume }}"
      {% endfor %}
    labels:
      # Prometheus scraping labels
      - "vaultwarden.prometheus.scrape=true"
      - "vaultwarden.prometheus.port=5432"
      # Loki scraping label
      - "vaultwarden.loki.scrape=true"
      # Health check labels
      - "vaultwarden.healthcheck.enabled=true"
      # Backup labels
      - "vaultwarden.backup.enabled={{ 'true' if vaultwarden_backup_enabled else 'false' }}"
      - "vaultwarden.backup.schedule={{ vaultwarden_backup_schedule }}"
    healthcheck:
      test: {{ vaultwarden_components.postgres.healthcheck.test }}
      interval: "{{ vaultwarden_components.postgres.healthcheck.interval }}"
      timeout: "{{ vaultwarden_components.postgres.healthcheck.timeout }}"
      retries: {{ vaultwarden_components.postgres.healthcheck.retries }}
      start_period: "30s"
    deploy:
      resources:
        limits:
          cpus: '{{ vaultwarden_components.postgres.resources.limits.cpus }}'
          memory: {{ vaultwarden_components.postgres.resources.limits.memory }}
        reservations:
          cpus: '{{ vaultwarden_components.postgres.resources.reservations.cpus }}'
          memory: {{ vaultwarden_components.postgres.resources.reservations.memory }}
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  {% endif %} 