#!/bin/bash
# Server Preparation Script for Homelab Deployment
# Automates static IP, SSH key setup, and server hardening
# Designed for stock Ubuntu desktop installations

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

# Logging
LOG_FILE="server_preparation.log"
exec 1> >(tee -a "$LOG_FILE")
exec 2> >(tee -a "$LOG_FILE" >&2)

log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

print_header() {
    echo -e "${CYAN}"
    echo "================================================"
    echo "  🔧 Server Preparation Automation"
    echo "  🛡️  Security-First Ubuntu Configuration"
    echo "  📋 Complete Server Setup & Hardening"
    echo "================================================"
    echo -e "${NC}"
}

print_step() {
    echo -e "${BLUE}[STEP $1]${NC} $2"
}

print_success() {
    echo -e "${GREEN}✓${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

print_error() {
    echo -e "${RED}✗${NC} $1"
}

# Check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        print_error "This script must be run as root (use sudo)"
        exit 1
    fi
}

# Get current network information
get_network_info() {
    print_step "1" "Gathering network information..."
    
    # Get current IP address
    CURRENT_IP=$(ip route get 8.8.8.8 | awk '{print $7; exit}')
    
    # Get network interface
    INTERFACE=$(ip route get 8.8.8.8 | awk '{print $5; exit}')
    
    # Get gateway
    GATEWAY=$(ip route | grep default | awk '{print $3}')
    
    # Get subnet mask
    SUBNET_MASK=$(ip -o -f inet addr show | awk '/scope global/ {print $4}' | cut -d'/' -f2)
    
    # Get DNS servers
    DNS_SERVERS=$(systemd-resolve --status | grep "DNS Servers" | awk '{print $3}' | tr '\n' ' ')
    
    print_success "Network information gathered"
    echo "Current IP: $CURRENT_IP"
    echo "Interface: $INTERFACE"
    echo "Gateway: $GATEWAY"
    echo "Subnet: /$SUBNET_MASK"
    echo "DNS: $DNS_SERVERS"
}

# Interactive network configuration
configure_network() {
    print_step "2" "Configuring static IP address..."
    
    # Get current network info
    get_network_info
    
    echo ""
    echo -e "${YELLOW}Network Configuration:${NC}"
    
    # Ask for static IP
    read -p "Enter static IP address (default: $CURRENT_IP): " STATIC_IP
    STATIC_IP=${STATIC_IP:-$CURRENT_IP}
    
    # Validate IP format
    while [[ ! $STATIC_IP =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; do
        print_error "Invalid IP address format"
        read -p "Enter static IP address: " STATIC_IP
    done
    
    # Ask for gateway (default to current)
    read -p "Enter gateway IP (default: $GATEWAY): " GATEWAY_IP
    GATEWAY_IP=${GATEWAY_IP:-$GATEWAY}
    
    # Ask for DNS servers
    read -p "Enter primary DNS (default: 8.8.8.8): " PRIMARY_DNS
    PRIMARY_DNS=${PRIMARY_DNS:-8.8.8.8}
    read -p "Enter secondary DNS (default: 8.8.4.4): " SECONDARY_DNS
    SECONDARY_DNS=${SECONDARY_DNS:-8.8.4.4}
    
    # Calculate network address
    NETWORK_ADDR=$(ipcalc -n $STATIC_IP/$SUBNET_MASK | cut -d'=' -f2)
    
    print_success "Network configuration gathered"
    echo "Static IP: $STATIC_IP"
    echo "Gateway: $GATEWAY_IP"
    echo "DNS: $PRIMARY_DNS, $SECONDARY_DNS"
    echo "Network: $NETWORK_ADDR/$SUBNET_MASK"
}

# Configure static IP using netplan
configure_static_ip() {
    print_step "3" "Setting up static IP configuration..."
    
    # Backup current netplan configuration
    if [ -f /etc/netplan/01-network-manager-all.yaml ]; then
        cp /etc/netplan/01-network-manager-all.yaml /etc/netplan/01-network-manager-all.yaml.backup
        print_success "Backed up current netplan configuration"
    fi
    
    # Create new netplan configuration
    cat > /etc/netplan/01-network-manager-all.yaml << EOF
# This file is generated by homelab server preparation
network:
  version: 2
  renderer: NetworkManager
  ethernets:
    $INTERFACE:
      dhcp4: false
      addresses:
        - $STATIC_IP/$SUBNET_MASK
      gateway4: $GATEWAY_IP
      nameservers:
        addresses: [$PRIMARY_DNS, $SECONDARY_DNS]
      routes:
        - to: default
          via: $GATEWAY_IP
EOF
    
    # Test configuration
    if netplan try --timeout 30; then
        print_success "Static IP configuration applied successfully"
        netplan apply
    else
        print_error "Static IP configuration failed"
        print_warning "Restoring previous configuration..."
        cp /etc/netplan/01-network-manager-all.yaml.backup /etc/netplan/01-network-manager-all.yaml
        netplan apply
        exit 1
    fi
    
    # Wait for network to stabilize
    sleep 5
    
    # Verify configuration
    if ping -c 1 8.8.8.8 > /dev/null 2>&1; then
        print_success "Network connectivity verified"
    else
        print_error "Network connectivity failed"
        exit 1
    fi
}

# Setup SSH key authentication
setup_ssh_keys() {
    print_step "4" "Setting up SSH key authentication..."
    
    # Create .ssh directory if it doesn't exist
    mkdir -p /home/$SUDO_USER/.ssh
    chmod 700 /home/$SUDO_USER/.ssh
    
    # Generate SSH key if it doesn't exist
    if [ ! -f /home/$SUDO_USER/.ssh/id_rsa ]; then
        print_warning "No SSH key found. Generating new key pair..."
        ssh-keygen -t rsa -b 4096 -f /home/$SUDO_USER/.ssh/id_rsa -N "" -C "homelab-server-$(date +%Y%m%d)"
        print_success "SSH key pair generated"
    else
        print_success "SSH key pair already exists"
    fi
    
    # Set proper permissions
    chown -R $SUDO_USER:$SUDO_USER /home/$SUDO_USER/.ssh
    chmod 600 /home/$SUDO_USER/.ssh/id_rsa
    chmod 644 /home/$SUDO_USER/.ssh/id_rsa.pub
    
    # Add public key to authorized_keys
    if [ ! -f /home/$SUDO_USER/.ssh/authorized_keys ]; then
        touch /home/$SUDO_USER/.ssh/authorized_keys
        chmod 600 /home/$SUDO_USER/.ssh/authorized_keys
    fi
    
    # Add public key if not already present
    if ! grep -q "$(cat /home/$SUDO_USER/.ssh/id_rsa.pub)" /home/$SUDO_USER/.ssh/authorized_keys; then
        cat /home/$SUDO_USER/.ssh/id_rsa.pub >> /home/$SUDO_USER/.ssh/authorized_keys
        print_success "SSH public key added to authorized_keys"
    else
        print_success "SSH public key already in authorized_keys"
    fi
    
    # Configure SSH server
    configure_ssh_server
}

# Configure SSH server security
configure_ssh_server() {
    print_step "5" "Configuring SSH server security..."
    
    # Backup SSH configuration
    cp /etc/ssh/sshd_config /etc/ssh/sshd_config.backup
    
    # Create secure SSH configuration
    cat > /etc/ssh/sshd_config << EOF
# SSH Server Configuration - Generated by homelab server preparation
# Security hardened configuration

# Basic settings
Port 22
Protocol 2
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_ecdsa_key
HostKey /etc/ssh/ssh_host_ed25519_key

# Authentication
PubkeyAuthentication yes
AuthorizedKeysFile .ssh/authorized_keys
PasswordAuthentication no
PermitEmptyPasswords no
ChallengeResponseAuthentication no
UsePAM yes

# Security settings
X11Forwarding no
PrintMotd no
PrintLastLog yes
TCPKeepAlive yes
ClientAliveInterval 300
ClientAliveCountMax 3
MaxAuthTries 3
MaxSessions 10

# Logging
SyslogFacility AUTH
LogLevel INFO

# Allow specific users (will be updated)
AllowUsers $SUDO_USER

# Disable root login
PermitRootLogin no

# Key exchange and encryption
KexAlgorithms curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256
Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,umac-128@openssh.com

# Additional security
PermitUserEnvironment no
Compression no
AllowTcpForwarding no
AllowAgentForwarding no
GatewayPorts no
EOF
    
    # Set proper permissions
    chmod 600 /etc/ssh/sshd_config
    
    # Test SSH configuration
    if sshd -t; then
        print_success "SSH configuration is valid"
        systemctl restart ssh
        print_success "SSH service restarted"
    else
        print_error "SSH configuration is invalid"
        cp /etc/ssh/sshd_config.backup /etc/ssh/sshd_config
        systemctl restart ssh
        exit 1
    fi
}

# Install and configure firewall
setup_firewall() {
    print_step "6" "Setting up firewall (UFW)..."
    
    # Install UFW if not present
    if ! command -v ufw > /dev/null; then
        apt update
        apt install -y ufw
        print_success "UFW installed"
    fi
    
    # Reset UFW to default
    ufw --force reset
    
    # Set default policies
    ufw default deny incoming
    ufw default allow outgoing
    
    # Allow SSH
    ufw allow ssh
    
    # Allow HTTP and HTTPS (for homelab services)
    ufw allow 80/tcp
    ufw allow 443/tcp
    
    # Allow DNS (if running Pi-hole)
    ufw allow 53/tcp
    ufw allow 53/udp
    
    # Allow local network access
    ufw allow from $NETWORK_ADDR/$SUBNET_MASK
    
    # Enable UFW
    ufw --force enable
    
    print_success "Firewall configured and enabled"
}

# Install essential packages
install_essential_packages() {
    print_step "7" "Installing essential packages..."
    
    # Update package list
    apt update
    
    # Install essential packages
    apt install -y \
        curl \
        wget \
        git \
        python3 \
        python3-pip \
        python3-venv \
        software-properties-common \
        apt-transport-https \
        ca-certificates \
        gnupg \
        lsb-release \
        htop \
        iotop \
        nethogs \
        tree \
        vim \
        nano \
        rsync \
        unzip \
        zip \
        jq \
        bc \
        logrotate \
        fail2ban \
        rkhunter \
        chkrootkit \
        lynis
    
    print_success "Essential packages installed"
}

# Configure system security
configure_system_security() {
    print_step "8" "Configuring system security..."
    
    # Configure automatic security updates
    apt install -y unattended-upgrades
    dpkg-reconfigure -plow unattended-upgrades
    
    # Configure fail2ban
    cat > /etc/fail2ban/jail.local << EOF
[DEFAULT]
bantime = 3600
findtime = 600
maxretry = 3
backend = auto

[sshd]
enabled = true
port = ssh
filter = sshd
logpath = /var/log/auth.log
maxretry = 3
bantime = 3600
EOF
    
    systemctl enable fail2ban
    systemctl restart fail2ban
    
    # Configure system limits
    cat >> /etc/security/limits.conf << EOF
# Homelab security limits
* soft nofile 65536
* hard nofile 65536
* soft nproc 32768
* hard nproc 32768
EOF
    
    # Configure sysctl security settings
    cat >> /etc/sysctl.conf << EOF
# Homelab security settings
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.secure_redirects = 0
net.ipv4.conf.default.secure_redirects = 0
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.default.rp_filter = 1
net.ipv4.conf.all.log_martians = 1
net.ipv4.conf.default.log_martians = 1
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.icmp_ignore_bogus_error_responses = 1
net.ipv4.conf.all.ignore_routes_with_linkdown = 1
net.ipv4.conf.default.ignore_routes_with_linkdown = 1
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_timestamps = 0
net.ipv4.tcp_max_syn_backlog = 2048
net.ipv4.tcp_synack_retries = 2
net.ipv4.tcp_syn_retries = 5
net.ipv4.tcp_rmem = 4096 65536 16777216
net.ipv4.tcp_wmem = 4096 65536 16777216
net.core.rmem_max = 16777216
net.core.wmem_max = 16777216
net.core.rmem_default = 262144
net.core.wmem_default = 262144
EOF
    
    # Apply sysctl settings
    sysctl -p
    
    print_success "System security configured"
}

# Create homelab user
create_homelab_user() {
    print_step "9" "Creating homelab user..."
    
    # Ask for username
    read -p "Enter homelab username (default: homelab): " HOMELAB_USER
    HOMELAB_USER=${HOMELAB_USER:-homelab}
    
    # Create user if it doesn't exist
    if ! id "$HOMELAB_USER" &>/dev/null; then
        useradd -m -s /bin/bash -G sudo "$HOMELAB_USER"
        print_success "Created user: $HOMELAB_USER"
    else
        print_success "User $HOMELAB_USER already exists"
    fi
    
    # Set password
    echo "$HOMELAB_USER:$(openssl rand -base64 32)" | chpasswd
    print_success "Set secure password for $HOMELAB_USER"
    
    # Copy SSH keys to homelab user
    mkdir -p /home/$HOMELAB_USER/.ssh
    cp /home/$SUDO_USER/.ssh/authorized_keys /home/$HOMELAB_USER/.ssh/
    chown -R $HOMELAB_USER:$HOMELAB_USER /home/$HOMELAB_USER/.ssh
    chmod 700 /home/$HOMELAB_USER/.ssh
    chmod 600 /home/$HOMELAB_USER/.ssh/authorized_keys
    
    # Update SSH config to allow homelab user
    sed -i "s/AllowUsers $SUDO_USER/AllowUsers $SUDO_USER $HOMELAB_USER/" /etc/ssh/sshd_config
    systemctl restart ssh
    
    print_success "Homelab user configured"
}

# Install Docker
install_docker() {
    print_step "10" "Installing Docker..."
    
    # Remove old Docker versions
    apt remove -y docker docker-engine docker.io containerd runc 2>/dev/null || true
    
    # Install Docker dependencies
    apt install -y \
        apt-transport-https \
        ca-certificates \
        curl \
        gnupg \
        lsb-release
    
    # Add Docker GPG key
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    
    # Add Docker repository
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    
    # Install Docker
    apt update
    apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
    
    # Add users to docker group
    usermod -aG docker $SUDO_USER
    usermod -aG docker $HOMELAB_USER
    
    # Start and enable Docker
    systemctl start docker
    systemctl enable docker
    
    print_success "Docker installed and configured"
}

# Install Ansible
install_ansible() {
    print_step "11" "Installing Ansible..."
    
    # Add Ansible repository
    apt install -y software-properties-common
    apt-add-repository --yes --update ppa:ansible/ansible
    
    # Install Ansible
    apt update
    apt install -y ansible
    
    print_success "Ansible installed"
}

# Generate server information
generate_server_info() {
    print_step "12" "Generating server information..."
    
    # Create server info file
    cat > /home/$HOMELAB_USER/server_info.txt << EOF
===============================================
   Homelab Server Information
===============================================

📋 SERVER DETAILS:
- Hostname: $(hostname)
- OS: $(lsb_release -d | cut -f2)
- Kernel: $(uname -r)
- Architecture: $(uname -m)
- Uptime: $(uptime -p)

🌐 NETWORK CONFIGURATION:
- Static IP: $STATIC_IP
- Gateway: $GATEWAY_IP
- DNS: $PRIMARY_DNS, $SECONDARY_DNS
- Interface: $INTERFACE
- Network: $NETWORK_ADDR/$SUBNET_MASK

👤 USER ACCOUNTS:
- Admin User: $SUDO_USER
- Homelab User: $HOMELAB_USER
- SSH Key: /home/$SUDO_USER/.ssh/id_rsa

🔒 SECURITY STATUS:
- Firewall: Enabled (UFW)
- SSH: Hardened configuration
- Fail2ban: Enabled
- Automatic Updates: Enabled
- Security Tools: Installed

🐳 DOCKER STATUS:
- Docker: Installed and running
- Docker Compose: Available
- Users in docker group: $SUDO_USER, $HOMELAB_USER

📦 INSTALLED PACKAGES:
- Ansible: $(ansible --version | head -1)
- Docker: $(docker --version)
- Python: $(python3 --version)
- Git: $(git --version)

🚀 NEXT STEPS:
1. Test SSH connection: ssh $HOMELAB_USER@$STATIC_IP
2. Copy SSH key to your local machine
3. Run homelab deployment: ./scripts/seamless_setup.sh

🔐 SECURITY NOTES:
- SSH password authentication disabled
- Root login disabled
- Firewall configured
- Automatic security updates enabled
- Fail2ban protecting SSH

📁 IMPORTANT FILES:
- SSH Config: /etc/ssh/sshd_config
- Firewall Config: /etc/ufw/
- Network Config: /etc/netplan/
- User SSH Keys: /home/*/.ssh/

===============================================
EOF
    
    chown $HOMELAB_USER:$HOMELAB_USER /home/$HOMELAB_USER/server_info.txt
    
    print_success "Server information generated"
}

# Display SSH key for copying
display_ssh_key() {
    print_step "13" "SSH Key Information..."
    
    echo ""
    echo -e "${CYAN}🔑 SSH KEY INFORMATION${NC}"
    echo "Public Key Location: /home/$SUDO_USER/.ssh/id_rsa.pub"
    echo "Private Key Location: /home/$SUDO_USER/.ssh/id_rsa"
    echo ""
    echo -e "${YELLOW}Copy this public key to your local machine:${NC}"
    echo "scp $SUDO_USER@$STATIC_IP:/home/$SUDO_USER/.ssh/id_rsa.pub ~/.ssh/homelab_server.pub"
    echo ""
    echo -e "${YELLOW}Or copy the private key to your local machine:${NC}"
    echo "scp $SUDO_USER@$STATIC_IP:/home/$SUDO_USER/.ssh/id_rsa ~/.ssh/homelab_server"
    echo ""
    echo -e "${GREEN}Test SSH connection:${NC}"
    echo "ssh $HOMELAB_USER@$STATIC_IP"
    echo ""
}

# Main execution
main() {
    print_header
    
    log "Starting server preparation automation"
    
    # Check if running as root
    check_root
    
    # Get network information
    get_network_info
    
    # Configure network
    configure_network
    
    # Apply static IP configuration
    configure_static_ip
    
    # Setup SSH keys
    setup_ssh_keys
    
    # Setup firewall
    setup_firewall
    
    # Install essential packages
    install_essential_packages
    
    # Configure system security
    configure_system_security
    
    # Create homelab user
    create_homelab_user
    
    # Install Docker
    install_docker
    
    # Install Ansible
    install_ansible
    
    # Generate server information
    generate_server_info
    
    # Display SSH key information
    display_ssh_key
    
    echo ""
    print_header
    echo -e "${GREEN}🎉 Server preparation completed successfully!${NC}"
    echo ""
    echo -e "${CYAN}📋 SUMMARY:${NC}"
    echo "✅ Static IP configured: $STATIC_IP"
    echo "✅ SSH keys generated and configured"
    echo "✅ Firewall enabled and configured"
    echo "✅ System security hardened"
    echo "✅ Homelab user created: $HOMELAB_USER"
    echo "✅ Docker installed and configured"
    echo "✅ Ansible installed"
    echo "✅ Essential packages installed"
    echo ""
    echo -e "${YELLOW}📁 Server information saved to:${NC}"
    echo "/home/$HOMELAB_USER/server_info.txt"
    echo ""
    echo -e "${GREEN}🚀 Ready for homelab deployment!${NC}"
    echo ""
    log "Server preparation completed successfully"
}

# Run main function
main "$@" 