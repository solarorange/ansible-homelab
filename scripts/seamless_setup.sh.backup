#!/bin/bash
# Enhanced Seamless Homelab Deployment Setup
# One-command setup with truly secure vault generation

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

# Logging
LOG_FILE="deployment.log"
exec 1> >(tee -a "$LOG_FILE")
exec 2> >(tee -a "$LOG_FILE" >&2)

log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

print_header() {
    echo -e "${CYAN}"
    echo "================================================"
    echo "  🚀 Seamless Homelab Deployment Setup"
    echo "  🔐 With Secure Vault Generation"
    echo "================================================"
    echo -e "${NC}"
}

print_step() {
    echo -e "${BLUE}[STEP $1]${NC} $2"
}

print_success() {
    echo -e "${GREEN}✓${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

print_error() {
    echo -e "${RED}✗${NC} $1"
}

# Enhanced secure password generation
generate_secure_password() {
    local length=${1:-32}
    local complexity=${2:-"full"}
    
    case $complexity in
        "full")
            # Full complexity: uppercase, lowercase, numbers, symbols
            openssl rand -base64 $((length * 3/4)) | tr -d "=+/" | cut -c1-$length | sed 's/./&\n/g' | shuf | tr -d '\n'
            ;;
        "alphanumeric")
            # Alphanumeric only
            openssl rand -base64 $((length * 3/4)) | tr -d "=+/" | cut -c1-$length
            ;;
        "numeric")
            # Numeric only
            openssl rand -base64 $((length * 3/4)) | tr -d "=+/" | tr -d "a-zA-Z" | cut -c1-$length
            ;;
    esac
}

# Generate secure secret keys
generate_secure_secret() {
    local length=${1:-64}
    openssl rand -hex $((length / 2))
}

# Generate secure API keys
generate_api_key() {
    local prefix=${1:-""}
    local key=$(openssl rand -hex 32)
    echo "${prefix}${key}"
}

# Generate secure JWT secrets
generate_jwt_secret() {
    openssl rand -base64 64 | tr -d "=+/"
}

# Generate secure database passwords
generate_db_password() {
    # Database passwords need to be compatible with various DB systems
    local password=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-24)
    # Ensure it starts with a letter and contains required characters
    echo "Db${password}"
}

# Check prerequisites
check_prerequisites() {
    print_step "1" "Checking prerequisites..."
    
    local missing_deps=()
    
    # Check required commands
    for cmd in ansible ansible-galaxy python3 pip curl jq docker docker-compose openssl; do
        if ! command -v "$cmd" &> /dev/null; then
            missing_deps+=("$cmd")
        fi
    done
    
    if [ ${#missing_deps[@]} -gt 0 ]; then
        print_error "Missing required dependencies: ${missing_deps[*]}"
        echo "Installing dependencies..."
        
        # Auto-install dependencies
        if command -v apt &> /dev/null; then
            sudo apt update
            sudo apt install -y ansible python3-pip curl jq openssl
        elif command -v yum &> /dev/null; then
            sudo yum install -y ansible python3-pip curl jq openssl
        fi
        
        # Install Docker if not present
        if ! command -v docker &> /dev/null; then
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker "$USER"
        fi
    fi
    
    # Check for sufficient entropy
    if [ $(cat /proc/sys/kernel/random/entropy_avail) -lt 1000 ]; then
        print_warning "Low entropy detected. Installing haveged..."
        if command -v apt &> /dev/null; then
            sudo apt install -y haveged
        elif command -v yum &> /dev/null; then
            sudo yum install -y haveged
        fi
    fi
    
    print_success "Prerequisites check completed"
}

# Interactive configuration
get_configuration() {
    print_step "2" "Gathering configuration..."
    
    # Load existing config if available
    if [ -f "group_vars/all/common.yml" ]; then
        print_warning "Existing configuration found. Loading..."
        source <(grep -E '^[a-zA-Z_][a-zA-Z0-9_]*:' group_vars/all/common.yml | sed 's/:/=/' | sed 's/ //')
    fi
    
    # Get basic configuration
    echo ""
    echo -e "${YELLOW}Basic Configuration:${NC}"
    
    # Domain
    read -p "Enter your domain name (e.g., homelab.local): " domain
    domain=${domain:-homelab.local}
    
    # Username
    read -p "Enter username for homelab user (default: homelab): " username
    username=${username:-homelab}
    
    # IP Address
    read -p "Enter server IP address: " ip_address
    while [[ ! $ip_address =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; do
        print_error "Invalid IP address format"
        read -p "Enter server IP address: " ip_address
    done
    
    # Gateway
    read -p "Enter gateway IP (default: ${ip_address%.*}.1): " gateway
    gateway=${gateway:-${ip_address%.*}.1}
    
    # Admin Email
    read -p "Enter admin email address (default: admin@$domain): " admin_email
    admin_email=${admin_email:-admin@$domain}
    
    # Services selection
    echo ""
    echo -e "${YELLOW}Service Selection:${NC}"
    echo "Select which services to deploy:"
    
    read -p "Deploy security services (Traefik, Authentik, Fail2ban)? [Y/n]: " security_enabled
    security_enabled=${security_enabled:-Y}
    
    read -p "Deploy media services (Plex, Sonarr, Radarr)? [Y/n]: " media_enabled
    media_enabled=${media_enabled:-Y}
    
    read -p "Deploy monitoring (Grafana, Prometheus)? [Y/n]: " monitoring_enabled
    monitoring_enabled=${monitoring_enabled:-Y}
    
    read -p "Deploy utilities (Portainer, Homepage)? [Y/n]: " utilities_enabled
    utilities_enabled=${utilities_enabled:-Y}
    
    read -p "Deploy productivity services (Linkwarden, Paperless)? [Y/n]: " productivity_enabled
    productivity_enabled=${productivity_enabled:-Y}
    
    read -p "Deploy automation services (n8n, Node-RED)? [Y/n]: " automation_enabled
    automation_enabled=${automation_enabled:-Y}
    
    # Email configuration
    echo ""
    echo -e "${YELLOW}Email Configuration (Optional):${NC}"
    read -p "Configure email notifications? [y/N]: " configure_email
    if [[ $configure_email =~ ^[Yy]$ ]]; then
        read -p "SMTP Server (e.g., smtp.gmail.com): " smtp_server
        read -p "SMTP Port (default: 587): " smtp_port
        smtp_port=${smtp_port:-587}
        read -p "SMTP Username: " smtp_username
        read -sp "SMTP Password: " smtp_password
        echo
        read -p "From Email Address: " from_email
    fi
    
    # Notification configuration
    echo ""
    echo -e "${YELLOW}Notification Configuration (Optional):${NC}"
    read -p "Configure Slack notifications? [y/N]: " configure_slack
    if [[ $configure_slack =~ ^[Yy]$ ]]; then
        read -p "Slack Webhook URL: " slack_webhook
    fi
    
    read -p "Configure Discord notifications? [y/N]: " configure_discord
    if [[ $configure_discord =~ ^[Yy]$ ]]; then
        read -p "Discord Webhook URL: " discord_webhook
    fi
    
    # Immich Configuration
    echo ""
    echo -e "${YELLOW}Immich Photo Management Configuration:${NC}"
    read -p "Deploy Immich photo management? [Y/n]: " immich_enabled
    immich_enabled=${immich_enabled:-Y}
    
    if [[ $immich_enabled =~ ^[Yy]$ ]]; then
        read -p "Immich subdomain (default: immich): " immich_subdomain
        immich_subdomain=${immich_subdomain:-immich}
        
        read -p "Photo storage directory (default: /home/$username/data/media/photos): " immich_photo_dir
        immich_photo_dir=${immich_photo_dir:-/home/$username/data/media/photos}
        
        read -p "Enable reverse geocoding? [Y/n]: " immich_reverse_geocoding
        immich_reverse_geocoding=${immich_reverse_geocoding:-Y}
        
        read -p "Enable Mapbox integration? [y/N]: " immich_mapbox_enabled
        if [[ $immich_mapbox_enabled =~ ^[Yy]$ ]]; then
            read -p "Mapbox Access Key: " immich_mapbox_key
        fi
        
        read -p "Enable OAuth authentication? [y/N]: " immich_oauth_enabled
        if [[ $immich_oauth_enabled =~ ^[Yy]$ ]]; then
            read -p "OAuth Client ID: " immich_oauth_client_id
            read -p "OAuth Client Secret: " immich_oauth_client_secret
            read -p "OAuth Issuer URL: " immich_oauth_issuer_url
        fi
        
        read -p "Enable email notifications? [y/N]: " immich_email_enabled
        if [[ $immich_email_enabled =~ ^[Yy]$ ]]; then
            read -p "SMTP Host: " immich_smtp_host
            read -p "SMTP Port (default: 587): " immich_smtp_port
            immich_smtp_port=${immich_smtp_port:-587}
            read -p "SMTP Username: " immich_smtp_username
            read -sp "SMTP Password: " immich_smtp_password
            echo
            read -p "From Email: " immich_smtp_from
        fi
        
        read -p "Enable webhooks? [y/N]: " immich_webhook_enabled
        if [[ $immich_webhook_enabled =~ ^[Yy]$ ]]; then
            read -p "Webhook URL: " immich_webhook_url
        fi
        
        read -p "Enable push notifications? [y/N]: " immich_push_enabled
        if [[ $immich_push_enabled =~ ^[Yy]$ ]]; then
            read -p "Push Access Token: " immich_push_token
            read -p "Push App ID: " immich_push_app_id
            read -p "Push App Secret: " immich_push_app_secret
        fi
        
        read -p "Enable Telegram notifications? [y/N]: " immich_telegram_enabled
        if [[ $immich_telegram_enabled =~ ^[Yy]$ ]]; then
            read -p "Telegram Bot Token: " immich_telegram_bot_token
            read -p "Telegram Chat ID: " immich_telegram_chat_id
        fi
        
        read -p "Enable Discord notifications? [y/N]: " immich_discord_enabled
        if [[ $immich_discord_enabled =~ ^[Yy]$ ]]; then
            read -p "Discord Webhook URL: " immich_discord_webhook
        fi
        
        read -p "Enable Slack notifications? [y/N]: " immich_slack_enabled
        if [[ $immich_slack_enabled =~ ^[Yy]$ ]]; then
            read -p "Slack Webhook URL: " immich_slack_webhook
        fi
        
        read -p "Enable machine learning features? [Y/n]: " immich_ml_enabled
        immich_ml_enabled=${immich_ml_enabled:-Y}
        
        read -p "Maximum photo upload size in MB (default: 100): " immich_max_upload_size
        immich_max_upload_size=${immich_max_upload_size:-100}
        
        read -p "Photo backup retention days (default: 30): " immich_backup_retention
        immich_backup_retention=${immich_backup_retention:-30}
    fi
    
    # Linkwarden Configuration
    echo ""
    echo -e "${YELLOW}Linkwarden Bookmark Management Configuration:${NC}"
    read -p "Deploy Linkwarden bookmark management? [Y/n]: " linkwarden_enabled
    linkwarden_enabled=${linkwarden_enabled:-Y}
    
    if [[ $linkwarden_enabled =~ ^[Yy]$ ]]; then
        read -p "Linkwarden subdomain (default: bookmarks): " linkwarden_subdomain
        linkwarden_subdomain=${linkwarden_subdomain:-bookmarks}
        
        read -p "Enable authentication with Authentik? [Y/n]: " linkwarden_auth_enabled
        linkwarden_auth_enabled=${linkwarden_auth_enabled:-Y}
        
        if [[ $linkwarden_auth_enabled =~ ^[Yy]$ ]]; then
            linkwarden_auth_method="authentik"
        else
            echo -e "${YELLOW}Available auth methods: basic, none${NC}"
            read -p "Authentication method (default: basic): " linkwarden_auth_method
            linkwarden_auth_method=${linkwarden_auth_method:-basic}
        fi
        
        read -p "Enable backup automation? [Y/n]: " linkwarden_backup_enabled
        linkwarden_backup_enabled=${linkwarden_backup_enabled:-Y}
        
        if [[ $linkwarden_backup_enabled =~ ^[Yy]$ ]]; then
            read -p "Backup schedule (cron format, default: 0 2 * * *): " linkwarden_backup_schedule
            linkwarden_backup_schedule=${linkwarden_backup_schedule:-0 2 * * *}
            
            read -p "Backup retention days (default: 7): " linkwarden_backup_retention
            linkwarden_backup_retention=${linkwarden_backup_retention:-7}
            
            read -p "Enable backup compression? [Y/n]: " linkwarden_backup_compression
            linkwarden_backup_compression=${linkwarden_backup_compression:-Y}
            
            read -p "Enable backup notifications? [Y/n]: " linkwarden_backup_notifications
            linkwarden_backup_notifications=${linkwarden_backup_notifications:-Y}
        fi
        
        read -p "Enable monitoring integration? [Y/n]: " linkwarden_monitoring_enabled
        linkwarden_monitoring_enabled=${linkwarden_monitoring_enabled:-Y}
        
        read -p "Enable security features (CrowdSec, Fail2ban)? [Y/n]: " linkwarden_security_enabled
        linkwarden_security_enabled=${linkwarden_security_enabled:-Y}
        
        read -p "Enable Homepage integration? [Y/n]: " linkwarden_homepage_enabled
        linkwarden_homepage_enabled=${linkwarden_homepage_enabled:-Y}
        
        read -p "Enable alerting? [Y/n]: " linkwarden_alerting_enabled
        linkwarden_alerting_enabled=${linkwarden_alerting_enabled:-Y}
        
        read -p "Log level (debug, info, warn, error, default: info): " linkwarden_log_level
        linkwarden_log_level=${linkwarden_log_level:-info}
        
        read -p "Memory limit (default: 2g): " linkwarden_memory_limit
        linkwarden_memory_limit=${linkwarden_memory_limit:-2g}
        
        read -p "CPU limit (default: 2.0): " linkwarden_cpu_limit
        linkwarden_cpu_limit=${linkwarden_cpu_limit:-2.0}
    fi
    
    # Reconya Configuration
    echo ""
    echo -e "${YELLOW}Reconya Network Configuration:${NC}"
    read -p "Deploy Reconya network reconnaissance? [Y/n]: " reconya_enabled
    reconya_enabled=${reconya_enabled:-Y}
    
    if [[ $reconya_enabled =~ ^[Yy]$ ]]; then
        read -p "Network range to scan (default: 192.168.1.0/24): " reconya_network_range
        reconya_network_range=${reconya_network_range:-192.168.1.0/24}
        
        read -p "Scan interval in seconds (default: 300): " reconya_scan_interval
        reconya_scan_interval=${reconya_scan_interval:-300}
        
        read -p "Maximum devices to track (default: 1000): " reconya_max_devices
        reconya_max_devices=${reconya_max_devices:-1000}
        
        read -p "Reconya subdomain (default: reconya): " reconya_subdomain
        reconya_subdomain=${reconya_subdomain:-reconya}
    fi
    
    # n8n Configuration
    echo ""
    echo -e "${YELLOW}n8n Workflow Automation Configuration:${NC}"
    read -p "Deploy n8n workflow automation? [Y/n]: " n8n_enabled
    n8n_enabled=${n8n_enabled:-Y}
    
    if [[ $n8n_enabled =~ ^[Yy]$ ]]; then
        read -p "n8n subdomain (default: n8n): " n8n_subdomain
        n8n_subdomain=${n8n_subdomain:-n8n}
        
        read -p "Enable authentication with Authentik? [Y/n]: " n8n_auth_enabled
        n8n_auth_enabled=${n8n_auth_enabled:-Y}
        
        if [[ $n8n_auth_enabled =~ ^[Yy]$ ]]; then
            n8n_auth_method="authentik"
        else
            echo -e "${YELLOW}Available auth methods: basic, none${NC}"
            read -p "Authentication method (default: basic): " n8n_auth_method
            n8n_auth_method=${n8n_auth_method:-basic}
        fi
        
        read -p "Enable backup automation? [Y/n]: " n8n_backup_enabled
        n8n_backup_enabled=${n8n_backup_enabled:-Y}
        
        if [[ $n8n_backup_enabled =~ ^[Yy]$ ]]; then
            read -p "Backup schedule (cron format, default: 0 3 * * *): " n8n_backup_schedule
            n8n_backup_schedule=${n8n_backup_schedule:-0 3 * * *}
            
            read -p "Backup retention days (default: 7): " n8n_backup_retention
            n8n_backup_retention=${n8n_backup_retention:-7}
            
            read -p "Enable backup compression? [Y/n]: " n8n_backup_compression
            n8n_backup_compression=${n8n_backup_compression:-Y}
            
            read -p "Enable backup notifications? [Y/n]: " n8n_backup_notifications
            n8n_backup_notifications=${n8n_backup_notifications:-Y}
        fi
        
        read -p "Enable monitoring integration? [Y/n]: " n8n_monitoring_enabled
        n8n_monitoring_enabled=${n8n_monitoring_enabled:-Y}
        
        read -p "Enable security features (CrowdSec, Fail2ban)? [Y/n]: " n8n_security_enabled
        n8n_security_enabled=${n8n_security_enabled:-Y}
        
        read -p "Enable Homepage integration? [Y/n]: " n8n_homepage_enabled
        n8n_homepage_enabled=${n8n_homepage_enabled:-Y}
        
        read -p "Enable alerting? [Y/n]: " n8n_alerting_enabled
        n8n_alerting_enabled=${n8n_alerting_enabled:-Y}
        
        read -p "Log level (debug, info, warn, error, default: info): " n8n_log_level
        n8n_log_level=${n8n_log_level:-info}
        
        read -p "Memory limit (default: 4g): " n8n_memory_limit
        n8n_memory_limit=${n8n_memory_limit:-4g}
        
        read -p "CPU limit (default: 2.0): " n8n_cpu_limit
        n8n_cpu_limit=${n8n_cpu_limit:-2.0}
        
        # Advanced n8n Configuration
        echo ""
        echo -e "${YELLOW}Advanced n8n Configuration:${NC}"
        
        read -p "n8n version (default: latest): " n8n_version
        n8n_version=${n8n_version:-latest}
        
        read -p "Database name (default: n8n): " n8n_database_name
        n8n_database_name=${n8n_database_name:-n8n}
        
        read -p "Database user (default: postgres): " n8n_database_user
        n8n_database_user=${n8n_database_user:-postgres}
        
        read -p "Enable templates (default: Y): " n8n_templates_enabled
        n8n_templates_enabled=${n8n_templates_enabled:-Y}
        
        read -p "Enable onboarding flow (default: N): " n8n_onboarding_enabled
        n8n_onboarding_enabled=${n8n_onboarding_enabled:-N}
        
        read -p "Enable personalization (default: N): " n8n_personalization_enabled
        n8n_personalization_enabled=${n8n_personalization_enabled:-N}
        
        read -p "Enable diagnostics (default: N): " n8n_diagnostics_enabled
        n8n_diagnostics_enabled=${n8n_diagnostics_enabled:-N}
        
        # Email Configuration
        echo ""
        echo -e "${YELLOW}n8n Email Configuration (Optional):${NC}"
        read -p "Configure SMTP for n8n notifications? [y/N]: " n8n_configure_smtp
        if [[ $n8n_configure_smtp =~ ^[Yy]$ ]]; then
            read -p "SMTP Host: " n8n_smtp_host
            read -p "SMTP Port (default: 587): " n8n_smtp_port
            n8n_smtp_port=${n8n_smtp_port:-587}
            read -p "SMTP Username: " n8n_smtp_user
            read -sp "SMTP Password: " n8n_smtp_pass
            echo
            read -p "SMTP Sender Email: " n8n_smtp_sender
        fi
        
        # Security Configuration
        echo ""
        echo -e "${YELLOW}n8n Security Configuration:${NC}"
        read -p "Enable CORS (default: N): " n8n_cors_enabled
        n8n_cors_enabled=${n8n_cors_enabled:-N}
        
        if [[ $n8n_cors_enabled =~ ^[Yy]$ ]]; then
            read -p "CORS Origins (comma-separated, default: https://$domain): " n8n_cors_origins
            n8n_cors_origins=${n8n_cors_origins:-https://$domain}
        fi
        
        read -p "Rate limit requests per window (default: 100): " n8n_rate_limit_requests
        n8n_rate_limit_requests=${n8n_rate_limit_requests:-100}
        
        read -p "Rate limit window in seconds (default: 60): " n8n_rate_limit_window
        n8n_rate_limit_window=${n8n_rate_limit_window:-60}
        
        read -p "Allow anonymous access (default: N): " n8n_allow_anonymous_access
        n8n_allow_anonymous_access=${n8n_allow_anonymous_access:-N}
        
        # Monitoring Configuration
        echo ""
        echo -e "${YELLOW}n8n Monitoring Configuration:${NC}"
        read -p "Health check interval in seconds (default: 30): " n8n_health_check_interval
        n8n_health_check_interval=${n8n_health_check_interval:-30}
        
        read -p "Prometheus scrape interval in seconds (default: 30): " n8n_prometheus_scrape_interval
        n8n_prometheus_scrape_interval=${n8n_prometheus_scrape_interval:-30}
        
        read -p "Log retention days (default: 30): " n8n_log_retention
        n8n_log_retention=${n8n_log_retention:-30}
        
        read -p "Log format (json, text, default: json): " n8n_log_format
        n8n_log_format=${n8n_log_format:-json}
        
        # Backup Configuration
        echo ""
        echo -e "${YELLOW}n8n Backup Configuration:${NC}"
        read -p "Include database in backups (default: Y): " n8n_backup_include_database
        n8n_backup_include_database=${n8n_backup_include_database:-Y}
        
        read -p "Include configuration in backups (default: Y): " n8n_backup_include_config
        n8n_backup_include_config=${n8n_backup_include_config:-Y}
        
        read -p "Backup retention days (default: 7): " n8n_backup_retention_days
        n8n_backup_retention_days=${n8n_backup_retention_days:-7}
        
        read -p "Backup log max size (default: 10M): " n8n_backup_max_log_size
        n8n_backup_max_log_size=${n8n_backup_max_log_size:-10M}
        
        read -p "Health check log retention days (default: 7): " n8n_health_check_retention_days
        n8n_health_check_retention_days=${n8n_health_check_retention_days:-7}
        
        read -p "Health check log max size (default: 10M): " n8n_health_check_max_log_size
        n8n_health_check_max_log_size=${n8n_health_check_max_log_size:-10M}
        
        read -p "Health check timeout in seconds (default: 30): " n8n_health_check_timeout
        n8n_health_check_timeout=${n8n_health_check_timeout:-30}
        
        # Homepage Configuration
        echo ""
        echo -e "${YELLOW}n8n Homepage Configuration:${NC}"
        read -p "Homepage category (default: Automation): " n8n_homepage_category
        n8n_homepage_category=${n8n_homepage_category:-Automation}
        
        read -p "Homepage description (default: Workflow Automation & Integration Platform): " n8n_homepage_description
        n8n_homepage_description=${n8n_homepage_description:-Workflow Automation & Integration Platform}
        
        read -p "Enable Homepage widget (default: Y): " n8n_homepage_widget_enabled
        n8n_homepage_widget_enabled=${n8n_homepage_widget_enabled:-Y}
        
        # Alerting Configuration
        echo ""
        echo -e "${YELLOW}n8n Alerting Configuration:${NC}"
        read -p "Alerting provider (alertmanager, default: alertmanager): " n8n_alerting_provider
        n8n_alerting_provider=${n8n_alerting_provider:-alertmanager}
        
        read -p "Alerting webhook URL (default: http://alertmanager:9093/api/v1/alerts): " n8n_alerting_webhook
        n8n_alerting_webhook=${n8n_alerting_webhook:-http://alertmanager:9093/api/v1/alerts}
        
        # Fail2ban Configuration
        echo ""
        echo -e "${YELLOW}n8n Fail2ban Configuration:${NC}"
        read -p "Fail2ban jail name (default: n8n): " n8n_fail2ban_jail
        n8n_fail2ban_jail=${n8n_fail2ban_jail:-n8n}
        
        read -p "Fail2ban max retry attempts (default: 5): " n8n_fail2ban_max_retry
        n8n_fail2ban_max_retry=${n8n_fail2ban_max_retry:-5}
        
        read -p "Fail2ban ban time in seconds (default: 3600): " n8n_fail2ban_bantime
        n8n_fail2ban_bantime=${n8n_fail2ban_bantime:-3600}
    fi
    
    # ErsatzTV Configuration
    echo ""
    echo -e "${YELLOW}ErsatzTV Live TV Configuration:${NC}"
    read -p "Deploy ErsatzTV live TV streaming? [Y/n]: " ersatztv_enabled
    ersatztv_enabled=${ersatztv_enabled:-Y}
    
    if [[ $ersatztv_enabled =~ ^[Yy]$ ]]; then
        read -p "ErsatzTV subdomain (default: tv): " ersatztv_subdomain
        ersatztv_subdomain=${ersatztv_subdomain:-tv}
        
        read -p "Enable hardware acceleration (VAAPI/NVIDIA)? [Y/n]: " ersatztv_hardware_acceleration
        ersatztv_hardware_acceleration=${ersatztv_hardware_acceleration:-Y}
        
        if [[ $ersatztv_hardware_acceleration =~ ^[Yy]$ ]]; then
            echo -e "${YELLOW}Available hardware acceleration options:${NC}"
            echo "1. VAAPI (Intel iGPU)"
            echo "2. NVIDIA NVENC"
            echo "3. Both"
            read -p "Select hardware acceleration type (1-3, default: 1): " ersatztv_hw_type
            ersatztv_hw_type=${ersatztv_hw_type:-1}
        fi
        
        read -p "Transcoding quality (fast, medium, slow, default: medium): " ersatztv_transcode_quality
        ersatztv_transcode_quality=${ersatztv_transcode_quality:-medium}
        
        read -p "Maximum concurrent streams (default: 4): " ersatztv_max_streams
        ersatztv_max_streams=${ersatztv_max_streams:-4}
        
        read -p "Enable Plex integration? [y/N]: " ersatztv_plex_enabled
        if [[ $ersatztv_plex_enabled =~ ^[Yy]$ ]]; then
            read -p "Plex Server URL (e.g., http://plex:32400): " ersatztv_plex_url
            read -p "Plex Token: " ersatztv_plex_token
        fi
        
        read -p "Enable Jellyfin integration? [y/N]: " ersatztv_jellyfin_enabled
        if [[ $ersatztv_jellyfin_enabled =~ ^[Yy]$ ]]; then
            read -p "Jellyfin Server URL (e.g., http://jellyfin:8096): " ersatztv_jellyfin_url
            read -p "Jellyfin API Key: " ersatztv_jellyfin_api_key
        fi
        
        read -p "Enable Emby integration? [y/N]: " ersatztv_emby_enabled
        if [[ $ersatztv_emby_enabled =~ ^[Yy]$ ]]; then
            read -p "Emby Server URL (e.g., http://emby:8096): " ersatztv_emby_url
            read -p "Emby API Key: " ersatztv_emby_api_key
        fi
        
        read -p "Enable subtitle support? [Y/n]: " ersatztv_subtitles_enabled
        ersatztv_subtitles_enabled=${ersatztv_subtitles_enabled:-Y}
        
        read -p "Enable music channels? [y/N]: " ersatztv_music_enabled
        ersatztv_music_enabled=${ersatztv_music_enabled:-N}
        
        read -p "Enable filler content? [Y/n]: " ersatztv_filler_enabled
        ersatztv_filler_enabled=${ersatztv_filler_enabled:-Y}
        
        read -p "Memory limit (default: 4g): " ersatztv_memory_limit
        ersatztv_memory_limit=${ersatztv_memory_limit:-4g}
        
        read -p "CPU limit (default: 4.0): " ersatztv_cpu_limit
        ersatztv_cpu_limit=${ersatztv_cpu_limit:-4.0}
        
        read -p "Enable monitoring integration? [Y/n]: " ersatztv_monitoring_enabled
        ersatztv_monitoring_enabled=${ersatztv_monitoring_enabled:-Y}
        
        read -p "Enable security features (CrowdSec, Fail2ban)? [Y/n]: " ersatztv_security_enabled
        ersatztv_security_enabled=${ersatztv_security_enabled:-Y}
        
        read -p "Enable backup automation? [Y/n]: " ersatztv_backup_enabled
        ersatztv_backup_enabled=${ersatztv_backup_enabled:-Y}
        
        if [[ $ersatztv_backup_enabled =~ ^[Yy]$ ]]; then
            read -p "Backup schedule (cron format, default: 0 3 * * *): " ersatztv_backup_schedule
            ersatztv_backup_schedule=${ersatztv_backup_schedule:-0 3 * * *}
            
            read -p "Backup retention days (default: 7): " ersatztv_backup_retention
            ersatztv_backup_retention=${ersatztv_backup_retention:-7}
        fi
        
        read -p "Enable Homepage integration? [Y/n]: " ersatztv_homepage_enabled
        ersatztv_homepage_enabled=${ersatztv_homepage_enabled:-Y}
        
        read -p "Enable alerting? [Y/n]: " ersatztv_alerting_enabled
        ersatztv_alerting_enabled=${ersatztv_alerting_enabled:-Y}
        
        read -p "Log level (debug, info, warn, error, default: info): " ersatztv_log_level
        ersatztv_log_level=${ersatztv_log_level:-info}
    fi
    
    # Pezzo Configuration
    echo ""
    echo -e "${YELLOW}Pezzo AI Prompt Management Configuration:${NC}"
    read -p "Deploy Pezzo AI prompt management? [Y/n]: " pezzo_enabled
    pezzo_enabled=${pezzo_enabled:-Y}

    if [[ $pezzo_enabled =~ ^[Yy]$ ]]; then
        read -p "Pezzo subdomain (default: pezzo): " pezzo_subdomain
        pezzo_subdomain=${pezzo_subdomain:-pezzo}

        read -p "Enable Homepage integration? [Y/n]: " pezzo_homepage_enabled
        pezzo_homepage_enabled=${pezzo_homepage_enabled:-Y}

        read -p "Enable monitoring? [Y/n]: " pezzo_monitoring_enabled
        pezzo_monitoring_enabled=${pezzo_monitoring_enabled:-Y}

        read -p "Enable backup? [Y/n]: " pezzo_backup_enabled
        pezzo_backup_enabled=${pezzo_backup_enabled:-Y}

        read -p "Enable alerting? [Y/n]: " pezzo_alerting_enabled
        pezzo_alerting_enabled=${pezzo_alerting_enabled:-Y}

        read -p "Enable authentication? [Y/n]: " pezzo_auth_enabled
        pezzo_auth_enabled=${pezzo_auth_enabled:-Y}

        if [[ $pezzo_auth_enabled =~ ^[Yy]$ ]]; then
            echo -e "${YELLOW}Available auth methods: authentik, basic, none${NC}"
            read -p "Authentication method (default: authentik): " pezzo_auth_method
            pezzo_auth_method=${pezzo_auth_method:-authentik}
        else
            pezzo_auth_method="none"
        fi

        read -p "Pezzo admin email (default: admin@$domain): " pezzo_admin_email
        pezzo_admin_email=${pezzo_admin_email:-admin@$domain}

        read -p "Memory limit (default: 4g): " pezzo_memory_limit
        pezzo_memory_limit=${pezzo_memory_limit:-4g}

        read -p "CPU limit (default: 2.0): " pezzo_cpu_limit
        pezzo_cpu_limit=${pezzo_cpu_limit:-2.0}

        read -p "Backup schedule (cron, default: 0 3 * * *): " pezzo_backup_schedule
        pezzo_backup_schedule=${pezzo_backup_schedule:-0 3 * * *}

        read -p "Backup retention days (default: 7): " pezzo_backup_retention
        pezzo_backup_retention=${pezzo_backup_retention:-7}

        read -p "Log level (debug, info, warn, error, default: info): " pezzo_log_level
        pezzo_log_level=${pezzo_log_level:-info}

        read -p "Homepage category (default: AI & Development): " pezzo_homepage_category
        pezzo_homepage_category=${pezzo_homepage_category:-AI & Development}

        read -p "Homepage description (default: AI Prompt Management & Analytics Platform): " pezzo_homepage_description
        pezzo_homepage_description=${pezzo_homepage_description:-AI Prompt Management & Analytics Platform}
    fi
    
    print_success "Configuration gathered"
}

# Generate secure vault variables
generate_secure_vault() {
    print_step "3" "Generating secure vault variables..."
    
    log "Generating secure passwords and keys"
    
    # Generate all secure credentials
    local authentik_admin_password=$(generate_secure_password 32 "full")
    local grafana_admin_password=$(generate_secure_password 32 "full")
    local postgresql_password=$(generate_db_password)
    local redis_password=$(generate_secure_password 32 "alphanumeric")
    local authentik_secret_key=$(generate_secure_secret 64)
    local grafana_secret_key=$(generate_secure_secret 64)
    local paperless_secret_key=$(generate_secure_secret 64)
    local immich_jwt_secret=$(generate_jwt_secret)
    local backup_encryption_key=$(generate_secure_secret 128)
    
    # Generate API keys for media services
    local sonarr_api_key=$(generate_api_key "sonarr_")
    local radarr_api_key=$(generate_api_key "radarr_")
    local lidarr_api_key=$(generate_api_key "lidarr_")
    local readarr_api_key=$(generate_api_key "readarr_")
    local prowlarr_api_key=$(generate_api_key "prowlarr_")
    local bazarr_api_key=$(generate_api_key "bazarr_")
    local sabnzbd_api_key=$(generate_api_key "sabnzbd_")
    local ersatztv_api_key=$(generate_api_key "ersatztv_")
    
    # Generate service passwords
    local paperless_admin_password=$(generate_secure_password 32 "full")
    local fing_admin_password=$(generate_secure_password 32 "full")
    local pihole_admin_password=$(generate_secure_password 32 "full")
    local homeassistant_admin_password=$(generate_secure_password 32 "full")
    local nextcloud_admin_password=$(generate_secure_password 32 "full")
    
    # Generate database passwords
    local media_database_password=$(generate_db_password)
    local paperless_database_password=$(generate_db_password)
    local fing_database_password=$(generate_db_password)
    local mariadb_root_password=$(generate_db_password)
    local influxdb_admin_password=$(generate_secure_password 32 "alphanumeric")
    local immich_db_password=$(generate_db_password)
    local immich_redis_password=$(generate_secure_password 32 "alphanumeric")
    local immich_postgres_password=$(generate_db_password)
    local nextcloud_db_password=$(generate_db_password)
    local nextcloud_db_root_password=$(generate_db_password)
    local linkwarden_postgres_password=$(generate_db_password)
    local linkwarden_nextauth_secret=$(generate_secure_secret 64)
    
    # Generate tokens and keys
    local influxdb_token=$(generate_secure_secret 64)
    local paperless_admin_token=$(generate_secure_secret 64)
    local fing_api_key=$(generate_secure_secret 64)
    local syncthing_apikey=$(generate_secure_secret 64)
    local watchtower_token=$(generate_secure_secret 64)
    local traefik_basic_auth_hash=$(echo -n "admin:$(generate_secure_password 16)" | openssl base64)
    local reconya_admin_password=$(generate_secure_password 32 "full")
    local reconya_jwt_secret=$(generate_secure_secret 64)
    
    # n8n Configuration (Secure)
    local n8n_admin_password=$(generate_secure_password 32 "full")
    local n8n_encryption_key=$(generate_secure_secret 64)
    local n8n_postgres_password=$(generate_db_password)
    
    # Pezzo Configuration (Secure)
    local vault_pezzo_postgres_password=$(generate_db_password)
    local vault_pezzo_redis_password=$(generate_secure_password 32 "alphanumeric")
    local vault_pezzo_clickhouse_password=$(generate_secure_password 32 "alphanumeric")
    
    # Create vault.yml with all secure credentials
    cat > group_vars/all/vault.yml << EOF
---
# Vault Variables - SECURE CREDENTIALS
# Generated on $(date) with cryptographically secure random values
# DO NOT MODIFY MANUALLY - Regenerate if needed

# Database Passwords (Cryptographically Secure)
vault_postgresql_password: "$postgresql_password"
vault_media_database_password: "$media_database_password"
vault_paperless_database_password: "$paperless_database_password"
vault_fing_database_password: "$fing_database_password"
vault_redis_password: "$redis_password"
vault_mariadb_root_password: "$mariadb_root_password"

# InfluxDB Passwords
vault_influxdb_admin_password: "$influxdb_admin_password"
vault_influxdb_token: "$influxdb_token"

# Service Authentication (Secure)
vault_paperless_admin_password: "$paperless_admin_password"
vault_paperless_secret_key: "$paperless_secret_key"
vault_fing_admin_password: "$fing_admin_password"
vault_paperless_admin_token: "$paperless_admin_token"
vault_fing_api_key: "$fing_api_key"

# Media Service API Keys (Cryptographically Secure)
vault_sabnzbd_api_key: "$sabnzbd_api_key"
vault_sonarr_api_key: "$sonarr_api_key"
vault_radarr_api_key: "$radarr_api_key"
vault_lidarr_api_key: "$lidarr_api_key"
vault_readarr_api_key: "$readarr_api_key"
vault_prowlarr_api_key: "$prowlarr_api_key"
vault_bazarr_api_key: "$bazarr_api_key"
vault_ersatztv_api_key: "$ersatztv_api_key"

# Lidarr Additional Configuration
vault_lidarr_username: "admin"
vault_lidarr_password: "$(generate_secure_password 32 'full')"
vault_lidarr_anonymous_id: "$(generate_secure_secret 32)"
vault_qbittorrent_password: "$(generate_secure_password 32 'alphanumeric')"

# Home Automation Passwords
vault_homeassistant_admin_password: "$homeassistant_admin_password"
vault_mosquitto_admin_password: "$(generate_secure_password 32 'alphanumeric')"
vault_zigbee2mqtt_mqtt_password: "$(generate_secure_password 32 'alphanumeric')"

# File Service Passwords
vault_nextcloud_admin_password: "$nextcloud_admin_password"
vault_nextcloud_db_password: "$nextcloud_db_password"
vault_nextcloud_db_root_password: "$nextcloud_db_root_password"
vault_syncthing_gui_password: "$(generate_secure_password 32 'full')"
vault_syncthing_apikey: "$syncthing_apikey"

# Backup Encryption (256-bit key)
vault_backup_encryption_key: "$backup_encryption_key"

# Grafana Configuration (Secure)
vault_grafana_admin_password: "$grafana_admin_password"
vault_grafana_secret_key: "$grafana_secret_key"

# Authentik Configuration (Secure)
vault_authentik_secret_key: "$authentik_secret_key"
vault_authentik_postgres_password: "$(generate_db_password)"
vault_authentik_admin_email: "$admin_email"
vault_authentik_admin_password: "$authentik_admin_password"

# Traefik Configuration
vault_traefik_basic_auth_hash: "$traefik_basic_auth_hash"

# Immich Configuration (Secure)
vault_immich_db_password: "$immich_db_password"
vault_immich_redis_password: "$immich_redis_password"
vault_immich_jwt_secret: "$immich_jwt_secret"
vault_immich_postgres_password: "$immich_postgres_password"
vault_immich_mapbox_key: "${immich_mapbox_key:-}"
vault_immich_oauth_client_id: "${immich_oauth_client_id:-}"
vault_immich_oauth_client_secret: "${immich_oauth_client_secret:-}"
vault_immich_oauth_issuer_url: "${immich_oauth_issuer_url:-}"
vault_immich_smtp_username: "${immich_smtp_username:-}"
vault_immich_smtp_password: "${immich_smtp_password:-}"
vault_immich_push_token: "${immich_push_token:-}"
vault_immich_push_app_id: "${immich_push_app_id:-}"
vault_immich_push_app_secret: "${immich_push_app_secret:-}"
vault_immich_telegram_bot_token: "${immich_telegram_bot_token:-}"
vault_immich_telegram_chat_id: "${immich_telegram_chat_id:-}"
vault_immich_discord_webhook: "${immich_discord_webhook:-}"
vault_immich_slack_webhook: "${immich_slack_webhook:-}"
vault_immich_webhook_url: "${immich_webhook_url:-}"

# Linkwarden Configuration (Secure)
vault_linkwarden_postgres_password: "$linkwarden_postgres_password"
vault_linkwarden_nextauth_secret: "$linkwarden_nextauth_secret"

# Email Configuration (User Provided)
vault_smtp_username: "${smtp_username:-}"
vault_smtp_password: "${smtp_password:-}"

# Notification Services (User Provided)
vault_slack_webhook: "${slack_webhook:-}"
vault_discord_webhook: "${discord_webhook:-}"
vault_telegram_bot_token: ""
vault_telegram_chat_id: ""

# Container Update Service
vault_watchtower_token: "$watchtower_token"

# Security Services
vault_pihole_admin_password: "$pihole_admin_password"

# Reconya Configuration (Secure)
vault_reconya_admin_password: "$reconya_admin_password"
vault_reconya_jwt_secret: "$reconya_jwt_secret"

# n8n Configuration (Secure)
vault_n8n_admin_password: "$n8n_admin_password"
vault_n8n_encryption_key: "$n8n_encryption_key"
vault_n8n_postgres_password: "$n8n_postgres_password"
vault_n8n_smtp_host: "${n8n_smtp_host:-}"
vault_n8n_smtp_port: ${n8n_smtp_port:-587}
vault_n8n_smtp_user: "${n8n_smtp_user:-}"
vault_n8n_smtp_pass: "${n8n_smtp_pass:-}"
vault_n8n_smtp_sender: "${n8n_smtp_sender:-}"

# ErsatzTV Configuration (Secure)
vault_ersatztv_api_key: "$ersatztv_api_key"
vault_ersatztv_plex_token: "${ersatztv_plex_token:-}"
vault_ersatztv_jellyfin_api_key: "${ersatztv_jellyfin_api_key:-}"
vault_ersatztv_emby_api_key: "${ersatztv_emby_api_key:-}"

# Cloudflare (Optional)
vault_cloudflare_api_token: ""

# Pezzo Configuration (Secure)
vault_pezzo_postgres_password: "$vault_pezzo_postgres_password"
vault_pezzo_redis_password: "$vault_pezzo_redis_password"
vault_pezzo_clickhouse_password: "$vault_pezzo_clickhouse_password"

# Security Notes
# All passwords and keys are generated using cryptographically secure random number generation
# Passwords meet complexity requirements for various services
# API keys are prefixed for easy identification
# Database passwords are compatible with PostgreSQL, MySQL, and MariaDB
# JWT secrets are base64 encoded for maximum compatibility
EOF

    # Create credentials backup file (encrypted)
    cat > credentials_backup.txt << EOF
===============================================
   SECURE CREDENTIALS BACKUP
===============================================
Generated: $(date)
Domain: $domain

⚠️  IMPORTANT: Store this file securely and delete after deployment!

ADMIN CREDENTIALS:
- Authentik Admin: $admin_email / $authentik_admin_password
- Grafana Admin: admin / $grafana_admin_password
- Traefik Basic Auth: admin / (see traefik config)

DATABASE PASSWORDS:
- PostgreSQL: $postgresql_password
- Redis: $redis_password
- Media DB: $media_database_password
- Paperless DB: $paperless_database_password

API KEYS:
- Sonarr: $sonarr_api_key
- Radarr: $radarr_api_key
- Lidarr: $lidarr_api_key
- Readarr: $readarr_api_key
- Prowlarr: $prowlarr_api_key
- Bazarr: $bazarr_api_key
- Sabnzbd: $sabnzbd_api_key
- ErsatzTV: $ersatztv_api_key

LIDARR CONFIGURATION:
- Username: admin
- Password: $(generate_secure_password 32 'full')
- Anonymous ID: $(generate_secure_secret 32)
- qBittorrent Password: $(generate_secure_password 32 'alphanumeric')

RECONYA:
- Admin Password: $reconya_admin_password
- JWT Secret: $reconya_jwt_secret

N8N:
- Admin Password: $n8n_admin_password
- Encryption Key: $n8n_encryption_key
- PostgreSQL Password: $n8n_postgres_password
- SMTP Host: ${n8n_smtp_host:-Not configured}
- SMTP Port: ${n8n_smtp_port:-587}
- SMTP User: ${n8n_smtp_user:-Not configured}
- SMTP Sender: ${n8n_smtp_sender:-Not configured}

LINKWARDEN:
- PostgreSQL Password: $linkwarden_postgres_password
- NextAuth Secret: $linkwarden_nextauth_secret

ERSATZTV:
- API Key: $ersatztv_api_key
- Subdomain: ${ersatztv_subdomain:-tv}
- Hardware Acceleration: ${ersatztv_hardware_acceleration:-Y}
- Transcoding Quality: ${ersatztv_transcode_quality:-medium}
- Max Streams: ${ersatztv_max_streams:-4}
- Memory Limit: ${ersatztv_memory_limit:-4g}
- CPU Limit: ${ersatztv_cpu_limit:-4.0}

SECRET KEYS:
- Authentik Secret: $authentik_secret_key
- Grafana Secret: $grafana_secret_key
- Paperless Secret: $paperless_secret_key
- Immich JWT: $immich_jwt_secret

IMMICH CONFIGURATION:
- Database Password: $immich_db_password
- Redis Password: $immich_redis_password
- PostgreSQL Password: $immich_postgres_password
- Subdomain: ${immich_subdomain:-immich}
- Photo Directory: ${immich_photo_dir:-/home/$username/data/media/photos}
- Reverse Geocoding: ${immich_reverse_geocoding:-Y}
- Machine Learning: ${immich_ml_enabled:-Y}
- Max Upload Size: ${immich_max_upload_size:-100}MB
- Backup Retention: ${immich_backup_retention:-30} days

BACKUP ENCRYPTION:
- Backup Key: $backup_encryption_key

PEZZO CONFIGURATION:
- Subdomain: ${pezzo_subdomain:-pezzo}
- Homepage Integration: ${pezzo_homepage_enabled:-N}
- Monitoring: ${pezzo_monitoring_enabled:-N}
- Backup: ${pezzo_backup_enabled:-N}
- Alerting: ${pezzo_alerting_enabled:-N}
- Authentication: ${pezzo_auth_enabled:-N}
- Admin Email: ${pezzo_admin_email:-admin@$domain}
- Memory Limit: ${pezzo_memory_limit:-4g}
- CPU Limit: ${pezzo_cpu_limit:-2.0}
- Backup Schedule: ${pezzo_backup_schedule:-0 3 * * *}
- Backup Retention: ${pezzo_backup_retention:-7}
- Log Level: ${pezzo_log_level:-info}
- Homepage Category: ${pezzo_homepage_category:-AI & Development}
- Homepage Description: ${pezzo_homepage_description:-AI Prompt Management & Analytics Platform}

===============================================
EOF

    # Encrypt the credentials backup
    openssl enc -aes-256-cbc -salt -in credentials_backup.txt -out credentials_backup.enc
    
    # Get the full path of the credentials backup file
    credentials_backup_path=$(realpath credentials_backup.enc)
    
    print_success "Secure vault variables generated"
    echo ""
    echo -e "${CYAN}🔐 CREDENTIALS BACKUP - YOUR HOMELAB KEYS${NC}"
    echo -e "${YELLOW}File Location:${NC} $credentials_backup_path"
    echo -e "${YELLOW}File Size:${NC} $(du -h credentials_backup.enc | cut -f1)"
    echo ""
    echo -e "${RED}⚠️  CRITICAL: This file contains ALL passwords and secrets for your homelab!${NC}"
    echo ""
    echo -e "${CYAN}📋 IMMEDIATE BACKUP REQUIREMENTS:${NC}"
    echo "1. ${GREEN}Copy to secure location:${NC} External drive, cloud storage, or password manager"
    echo "2. ${GREEN}Store multiple copies:${NC} At least 2-3 secure locations"
    echo "3. ${GREEN}Test decryption:${NC} Verify you can decrypt the file"
    echo "4. ${GREEN}Document location:${NC} Note where you stored the backup"
    echo ""
    echo -e "${CYAN}🔒 RECOMMENDED STORAGE OPTIONS:${NC}"
    echo "• Encrypted external drive"
    echo "• Password manager (1Password, Bitwarden, etc.)"
    echo "• Cloud storage with encryption (Google Drive, Dropbox)"
    echo "• Physical safe or secure location"
    echo ""
    echo -e "${CYAN}🚨 SECURITY WARNINGS:${NC}"
    echo "• Never commit this file to version control"
    echo "• Never share this file via email or messaging"
    echo "• Keep this file separate from your homelab server"
    echo "• Consider this file as valuable as your house keys"
    echo ""
    echo -e "${GREEN}✅ This file is your ONLY backup of homelab credentials!${NC}"
    echo ""
    echo -e "${CYAN}🧪 TEST DECRYPTION (Optional):${NC}"
    echo "To verify your backup is working, you can test decryption:"
    echo "openssl enc -d -aes-256-cbc -in $credentials_backup_path -out test_decrypt.txt"
    echo "cat test_decrypt.txt"
    echo "rm test_decrypt.txt  # Clean up test file"
    echo ""
}

# Create configuration files
create_configuration() {
    print_step "4" "Creating configuration files..."
    
    # Create common.yml
    cat > group_vars/all/common.yml << EOF
---
# Basic Configuration
username: "$username"
domain: "$domain"
ip_address: "$ip_address"
gateway: "$gateway"
timezone: "UTC"

# Directory Structure
docker_dir: "/home/$username/docker"
data_dir: "/home/$username/data"
config_dir: "/home/$username/config"
backup_dir: "/home/$username/backups"
logs_dir: "/home/$username/logs"

# Service Configuration
security_enabled: $([ "$security_enabled" = "Y" ] && echo "true" || echo "false")
media_enabled: $([ "$media_enabled" = "Y" ] && echo "true" || echo "false")
monitoring_enabled: $([ "$monitoring_enabled" = "Y" ] && echo "true" || echo "false")
utilities_enabled: $([ "$utilities_enabled" = "Y" ] && echo "true" || echo "false")
productivity_enabled: $([ "$productivity_enabled" = "Y" ] && echo "true" || echo "false")
automation_enabled: $([ "$automation_enabled" = "Y" ] && echo "true" || echo "false")
immich_enabled: $([ "$immich_enabled" = "Y" ] && echo "true" || echo "false")
reconya_enabled: $([ "$reconya_enabled" = "Y" ] && echo "true" || echo "false")
ersatztv_enabled: $([ "$ersatztv_enabled" = "Y" ] && echo "true" || echo "false")

# Subdomain Configuration
traefik_subdomain: "traefik"
authentik_subdomain: "auth"
homepage_subdomain: "dash"
grafana_subdomain: "grafana"
portainer_subdomain: "portainer"
plex_subdomain: "plex"
sonarr_subdomain: "sonarr"
radarr_subdomain: "radarr"
immich_subdomain: "${immich_subdomain:-immich}"
linkwarden_subdomain: "bookmarks"
reconya_subdomain: "${reconya_subdomain:-reconya}"
ersatztv_subdomain: "${ersatztv_subdomain:-tv}"

# Email Configuration
admin_email: "$admin_email"
smtp_server: "${smtp_server:-}"
smtp_port: "${smtp_port:-587}"
from_email: "${from_email:-}"

# Traefik Configuration
traefik_network: "homelab"
traefik_ssl_resolver: "cloudflare"

# Monitoring Configuration
prometheus_config_dir: "/home/$username/docker/prometheus"
alertmanager_config_dir: "/home/$username/docker/alertmanager"
grafana_config_dir: "/home/$username/docker/grafana"
grafana_dashboards_dir: "/home/$username/docker/grafana/provisioning/dashboards"

# Security Configuration
crowdsec_config_dir: "/home/$username/docker/crowdsec"
fail2ban_config_dir: "/home/$username/docker/fail2ban"

# Ansible Configuration
ansible_backup_dir: "/home/$username/backups/ansible"

# Homepage Configuration
homepage_config_dir: "/home/$username/docker/homepage"

# Loki Configuration
loki_config_dir: "/home/$username/docker/loki"

# Traefik Configuration Directory
traefik_config_dir: "/home/$username/docker/traefik"

# Immich Configuration
immich_photo_dir: "${immich_photo_dir:-/home/$username/data/media/photos}"
immich_reverse_geocoding: $([ "$immich_reverse_geocoding" = "Y" ] && echo "true" || echo "false")
immich_mapbox_enabled: $([ "$immich_mapbox_enabled" = "Y" ] && echo "true" || echo "false")
immich_oauth_enabled: $([ "$immich_oauth_enabled" = "Y" ] && echo "true" || echo "false")
immich_email_enabled: $([ "$immich_email_enabled" = "Y" ] && echo "true" || echo "false")
immich_webhook_enabled: $([ "$immich_webhook_enabled" = "Y" ] && echo "true" || echo "false")
immich_push_enabled: $([ "$immich_push_enabled" = "Y" ] && echo "true" || echo "false")
immich_telegram_enabled: $([ "$immich_telegram_enabled" = "Y" ] && echo "true" || echo "false")
immich_discord_enabled: $([ "$immich_discord_enabled" = "Y" ] && echo "true" || echo "false")
immich_slack_enabled: $([ "$immich_slack_enabled" = "Y" ] && echo "true" || echo "false")
immich_ml_enabled: $([ "$immich_ml_enabled" = "Y" ] && echo "true" || echo "false")
immich_max_upload_size: ${immich_max_upload_size:-100}
immich_backup_retention: ${immich_backup_retention:-30}
immich_smtp_host: "${immich_smtp_host:-}"
immich_smtp_port: ${immich_smtp_port:-587}
immich_smtp_from: "${immich_smtp_from:-}"

# Reconya Configuration
reconya_network_range: "${reconya_network_range:-192.168.1.0/24}"
reconya_scan_interval: ${reconya_scan_interval:-300}
reconya_max_devices: ${reconya_max_devices:-1000}
reconya_scan_timeout: 60
reconya_auto_discovery: true
reconya_network_ranges: ["${reconya_network_range:-192.168.1.0/24}"]

# n8n Configuration
n8n_enabled: $([ "$n8n_enabled" = "Y" ] && echo "true" || echo "false")
n8n_subdomain: "${n8n_subdomain:-n8n}"
n8n_auth_enabled: $([ "$n8n_auth_enabled" = "Y" ] && echo "true" || echo "false")
n8n_auth_method: "${n8n_auth_method:-authentik}"
n8n_backup_enabled: $([ "$n8n_backup_enabled" = "Y" ] && echo "true" || echo "false")
n8n_backup_schedule: "${n8n_backup_schedule:-0 3 * * *}"
n8n_backup_retention: ${n8n_backup_retention:-7}
n8n_backup_compression: $([ "$n8n_backup_compression" = "Y" ] && echo "true" || echo "false")
n8n_backup_notifications: $([ "$n8n_backup_notifications" = "Y" ] && echo "true" || echo "false")
n8n_monitoring_enabled: $([ "$n8n_monitoring_enabled" = "Y" ] && echo "true" || echo "false")
n8n_security_enabled: $([ "$n8n_security_enabled" = "Y" ] && echo "true" || echo "false")
n8n_homepage_enabled: $([ "$n8n_homepage_enabled" = "Y" ] && echo "true" || echo "false")
n8n_alerting_enabled: $([ "$n8n_alerting_enabled" = "Y" ] && echo "true" || echo "false")
n8n_log_level: "${n8n_log_level:-info}"
n8n_memory_limit: "${n8n_memory_limit:-4g}"
n8n_cpu_limit: "${n8n_cpu_limit:-2.0}"

# Advanced n8n Configuration
n8n_version: "${n8n_version:-latest}"
n8n_database_name: "${n8n_database_name:-n8n}"
n8n_database_user: "${n8n_database_user:-postgres}"
n8n_templates_enabled: $([ "$n8n_templates_enabled" = "Y" ] && echo "true" || echo "false")
n8n_onboarding_enabled: $([ "$n8n_onboarding_enabled" = "Y" ] && echo "true" || echo "false")
n8n_personalization_enabled: $([ "$n8n_personalization_enabled" = "Y" ] && echo "true" || echo "false")
n8n_diagnostics_enabled: $([ "$n8n_diagnostics_enabled" = "Y" ] && echo "true" || echo "false")

# n8n Email Configuration
n8n_smtp_host: "${n8n_smtp_host:-}"
n8n_smtp_port: ${n8n_smtp_port:-587}
n8n_smtp_user: "${n8n_smtp_user:-}"
n8n_smtp_pass: "${n8n_smtp_pass:-}"
n8n_smtp_sender: "${n8n_smtp_sender:-}"

# n8n Security Configuration
n8n_cors_enabled: $([ "$n8n_cors_enabled" = "Y" ] && echo "true" || echo "false")
n8n_cors_origins: "${n8n_cors_origins:-}"
n8n_rate_limit_requests: ${n8n_rate_limit_requests:-100}
n8n_rate_limit_window: ${n8n_rate_limit_window:-60}
n8n_allow_anonymous_access: $([ "$n8n_allow_anonymous_access" = "Y" ] && echo "true" || echo "false")

# n8n Monitoring Configuration
n8n_health_check_interval: ${n8n_health_check_interval:-30}
n8n_prometheus_scrape_interval: ${n8n_prometheus_scrape_interval:-30}
n8n_log_retention: ${n8n_log_retention:-30}
n8n_log_format: "${n8n_log_format:-json}"

# n8n Backup Configuration
n8n_backup_include_database: $([ "$n8n_backup_include_database" = "Y" ] && echo "true" || echo "false")
n8n_backup_include_config: $([ "$n8n_backup_include_config" = "Y" ] && echo "true" || echo "false")
n8n_backup_retention_days: ${n8n_backup_retention_days:-7}
n8n_backup_max_log_size: "${n8n_backup_max_log_size:-10M}"
n8n_health_check_retention_days: ${n8n_health_check_retention_days:-7}
n8n_health_check_max_log_size: "${n8n_health_check_max_log_size:-10M}"
n8n_health_check_timeout: ${n8n_health_check_timeout:-30}

# n8n Homepage Configuration
n8n_homepage_category: "${n8n_homepage_category:-Automation}"
n8n_homepage_description: "${n8n_homepage_description:-Workflow Automation & Integration Platform}"
n8n_homepage_widget_enabled: $([ "$n8n_homepage_widget_enabled" = "Y" ] && echo "true" || echo "false")

# n8n Alerting Configuration
n8n_alerting_provider: "${n8n_alerting_provider:-alertmanager}"
n8n_alerting_webhook: "${n8n_alerting_webhook:-http://alertmanager:9093/api/v1/alerts}"

# n8n Fail2ban Configuration
n8n_fail2ban_jail: "${n8n_fail2ban_jail:-n8n}"
n8n_fail2ban_max_retry: ${n8n_fail2ban_max_retry:-5}
n8n_fail2ban_bantime: ${n8n_fail2ban_bantime:-3600}

# Linkwarden Configuration
linkwarden_enabled: $([ "$linkwarden_enabled" = "Y" ] && echo "true" || echo "false")
linkwarden_subdomain: "${linkwarden_subdomain:-bookmarks}"
linkwarden_auth_enabled: $([ "$linkwarden_auth_enabled" = "Y" ] && echo "true" || echo "false")
linkwarden_auth_method: "${linkwarden_auth_method:-authentik}"
linkwarden_backup_enabled: $([ "$linkwarden_backup_enabled" = "Y" ] && echo "true" || echo "false")
linkwarden_backup_schedule: "${linkwarden_backup_schedule:-0 2 * * *}"
linkwarden_backup_retention: ${linkwarden_backup_retention:-7}
linkwarden_backup_compression: $([ "$linkwarden_backup_compression" = "Y" ] && echo "true" || echo "false")
linkwarden_backup_notifications: $([ "$linkwarden_backup_notifications" = "Y" ] && echo "true" || echo "false")
linkwarden_monitoring_enabled: $([ "$linkwarden_monitoring_enabled" = "Y" ] && echo "true" || echo "false")
linkwarden_security_enabled: $([ "$linkwarden_security_enabled" = "Y" ] && echo "true" || echo "false")
linkwarden_homepage_enabled: $([ "$linkwarden_homepage_enabled" = "Y" ] && echo "true" || echo "false")
linkwarden_alerting_enabled: $([ "$linkwarden_alerting_enabled" = "Y" ] && echo "true" || echo "false")
linkwarden_log_level: "${linkwarden_log_level:-info}"
linkwarden_memory_limit: "${linkwarden_memory_limit:-2g}"
linkwarden_cpu_limit: "${linkwarden_cpu_limit:-2.0}"

# ErsatzTV Configuration
ersatztv_subdomain: "${ersatztv_subdomain:-tv}"
ersatztv_hardware_acceleration: $([ "$ersatztv_hardware_acceleration" = "Y" ] && echo "true" || echo "false")
ersatztv_hw_type: ${ersatztv_hw_type:-1}
ersatztv_transcode_quality: "${ersatztv_transcode_quality:-medium}"
ersatztv_max_streams: ${ersatztv_max_streams:-4}
ersatztv_plex_enabled: $([ "$ersatztv_plex_enabled" = "Y" ] && echo "true" || echo "false")
ersatztv_plex_url: "${ersatztv_plex_url:-}"
ersatztv_plex_token: "${ersatztv_plex_token:-}"
ersatztv_jellyfin_enabled: $([ "$ersatztv_jellyfin_enabled" = "Y" ] && echo "true" || echo "false")
ersatztv_jellyfin_url: "${ersatztv_jellyfin_url:-}"
ersatztv_jellyfin_api_key: "${ersatztv_jellyfin_api_key:-}"
ersatztv_emby_enabled: $([ "$ersatztv_emby_enabled" = "Y" ] && echo "true" || echo "false")
ersatztv_emby_url: "${ersatztv_emby_url:-}"
ersatztv_emby_api_key: "${ersatztv_emby_api_key:-}"
ersatztv_subtitles_enabled: $([ "$ersatztv_subtitles_enabled" = "Y" ] && echo "true" || echo "false")
ersatztv_music_enabled: $([ "$ersatztv_music_enabled" = "Y" ] && echo "true" || echo "false")
ersatztv_filler_enabled: $([ "$ersatztv_filler_enabled" = "Y" ] && echo "true" || echo "false")
ersatztv_memory_limit: "${ersatztv_memory_limit:-4g}"
ersatztv_cpu_limit: "${ersatztv_cpu_limit:-4.0}"
ersatztv_monitoring_enabled: $([ "$ersatztv_monitoring_enabled" = "Y" ] && echo "true" || echo "false")
ersatztv_security_enabled: $([ "$ersatztv_security_enabled" = "Y" ] && echo "true" || echo "false")
ersatztv_backup_enabled: $([ "$ersatztv_backup_enabled" = "Y" ] && echo "true" || echo "false")
ersatztv_backup_schedule: "${ersatztv_backup_schedule:-0 3 * * *}"
ersatztv_backup_retention: ${ersatztv_backup_retention:-7}
ersatztv_homepage_enabled: $([ "$ersatztv_homepage_enabled" = "Y" ] && echo "true" || echo "false")
ersatztv_alerting_enabled: $([ "$ersatztv_alerting_enabled" = "Y" ] && echo "true" || echo "false")
ersatztv_log_level: "${ersatztv_log_level:-info}"

# Pezzo Configuration
pezzo_enabled: $([ "$pezzo_enabled" = "Y" ] && echo "true" || echo "false")
pezzo_subdomain: "${pezzo_subdomain:-pezzo}"
pezzo_homepage_enabled: $([ "$pezzo_homepage_enabled" = "Y" ] && echo "true" || echo "false")
pezzo_monitoring_enabled: $([ "$pezzo_monitoring_enabled" = "Y" ] && echo "true" || echo "false")
pezzo_backup_enabled: $([ "$pezzo_backup_enabled" = "Y" ] && echo "true" || echo "false")
pezzo_alerting_enabled: $([ "$pezzo_alerting_enabled" = "Y" ] && echo "true" || echo "false")
pezzo_auth_enabled: $([ "$pezzo_auth_enabled" = "Y" ] && echo "true" || echo "false")
pezzo_auth_method: "${pezzo_auth_method:-authentik}"
pezzo_admin_email: "${pezzo_admin_email:-admin@$domain}"
pezzo_memory_limit: "${pezzo_memory_limit:-4g}"
pezzo_cpu_limit: "${pezzo_cpu_limit:-2.0}"
pezzo_backup_schedule: "${pezzo_backup_schedule:-0 3 * * *}"
pezzo_backup_retention: ${pezzo_backup_retention:-7}
pezzo_log_level: "${pezzo_log_level:-info}"
pezzo_homepage_category: "${pezzo_homepage_category:-AI & Development}"
pezzo_homepage_description: "${pezzo_homepage_description:-AI Prompt Management & Analytics Platform}"

    # Create inventory.yml
    cat > inventory.yml << EOF
---
all:
  children:
    homelab:
      hosts:
        homelab-server:
          ansible_host: $ip_address
          ansible_user: $username
          ansible_ssh_private_key_file: ~/.ssh/id_rsa
          ansible_become: true
          ansible_become_method: sudo
EOF

    # Create ansible.cfg
    cat > ansible.cfg << EOF
[defaults]
inventory = inventory.yml
host_key_checking = False
retry_files_enabled = False
nocows = 1
gathering = smart
fact_caching = jsonfile
fact_caching_timeout = 3600
fact_caching_connection = ~/.ansible/cache/facts

[ssh_connection]
pipelining = True
EOF

    print_success "Configuration files created"
}

# Setup SSH access
setup_ssh() {
    print_step "5" "Setting up SSH access..."
    
    # Generate SSH key if it doesn't exist
    if [ ! -f "$HOME/.ssh/id_rsa" ]; then
        ssh-keygen -t rsa -b 4096 -f "$HOME/.ssh/id_rsa" -N "" -C "homelab-deployment-$(date +%Y%m%d)"
        print_success "SSH key generated"
    fi
    
    # Copy SSH key to server
    echo "Copying SSH key to server..."
    ssh-copy-id -i "$HOME/.ssh/id_rsa.pub" "$username@$ip_address" || {
        print_warning "Could not copy SSH key automatically"
        echo "Please manually copy your SSH key to the server:"
        echo "ssh-copy-id -i $HOME/.ssh/id_rsa.pub $username@$ip_address"
        read -p "Press Enter when SSH key is configured..."
    }
    
    print_success "SSH access configured"
}

# Install Ansible collections
install_collections() {
    print_step "6" "Installing Ansible collections..."
    
    # Create requirements.yml if it doesn't exist
    if [ ! -f "requirements.yml" ]; then
        cat > requirements.yml << EOF
---
collections:
  - name: community.docker
  - name: community.general
  - name: ansible.posix
  - name: community.crypto
EOF
    fi
    
    # Install collections
    ansible-galaxy collection install -r requirements.yml
    
    print_success "Ansible collections installed"
}

# Pre-deployment validation
validate_setup() {
    print_step "7" "Validating setup..."
    
    # Test SSH connection
    if ! ssh -o ConnectTimeout=10 -o BatchMode=yes "$username@$ip_address" exit 2>/dev/null; then
        print_error "SSH connection failed"
        exit 1
    fi
    
    # Test Ansible connectivity
    if ! ansible all -m ping &>/dev/null; then
        print_error "Ansible connectivity test failed"
        exit 1
    fi
    
    # Validate configuration files
    if ! ansible-playbook --syntax-check site.yml &>/dev/null; then
        print_error "Playbook syntax check failed"
        exit 1
    fi
    
    print_success "Setup validation completed"
}

# Deploy infrastructure
deploy_infrastructure() {
    print_step "8" "Deploying infrastructure..."
    
    # Encrypt vault file
    ansible-vault encrypt group_vars/all/vault.yml
    
    # Deploy in stages
    echo "Deploying Stage 1: Infrastructure..."
    ansible-playbook site.yml --tags "stage1" --ask-vault-pass
    
    echo "Deploying Stage 2: Core Services..."
    ansible-playbook site.yml --tags "stage2" --ask-vault-pass
    
    echo "Deploying Stage 3: Applications..."
    ansible-playbook site.yml --tags "stage3" --ask-vault-pass
    
    echo "Deploying Stage 4: Validation..."
    ansible-playbook site.yml --tags "stage4" --ask-vault-pass
    
    print_success "Infrastructure deployment completed"
}

# Post-deployment setup
post_deployment() {
    print_step "9" "Post-deployment configuration..."
    
    # Generate access information
    cat > deployment_summary.txt << EOF
===============================================
   Homelab Deployment Complete!
===============================================

🔐 SECURITY INFORMATION:
- All passwords and keys are cryptographically secure
- Credentials backup: credentials_backup.enc
- Vault file: group_vars/all/vault.yml (encrypted)

 ACCESS INFORMATION:
- Homepage Dashboard: https://dash.$domain
- Traefik Dashboard: https://traefik.$domain
- Grafana: https://grafana.$domain
- Authentik: https://auth.$domain
- Portainer: https://portainer.$domain
- Linkwarden: https://${linkwarden_subdomain:-bookmarks}.$domain
- Immich: https://${immich_subdomain:-immich}.$domain
- Reconya: https://${reconya_subdomain:-reconya}.$domain
- ErsatzTV: https://${ersatztv_subdomain:-tv}.$domain

 DEFAULT CREDENTIALS:
- Authentik Admin: $admin_email / (see credentials backup)
- Grafana Admin: admin / (see credentials backup)
- Reconya Admin: admin / (see credentials backup)

📁 SSH ACCESS:
- Server: $username@$ip_address
- Key: ~/.ssh/id_rsa

📋 CONFIGURATION FILES:
- Inventory: inventory.yml
- Variables: group_vars/all/common.yml
- Vault: group_vars/all/vault.yml (encrypted)

🚀 NEXT STEPS:
1. Access Homepage at https://dash.$domain
2. Configure service API keys in Homepage settings
3. Set up weather widget with your location
4. Customize bookmarks and service groups
5. Test all service integrations
6. Review monitoring dashboards
7. Configure backup schedules
8. Configure Reconya network scanning settings
9. Configure ErsatzTV channels and media sources

🔐 CREDENTIALS BACKUP - YOUR HOMELAB KEYS:
- File: $credentials_backup_path
- Size: $(du -h credentials_backup.enc | cut -f1)
- Status: Encrypted with AES-256-CBC

 SECURITY RECOMMENDATIONS:
1. IMMEDIATELY backup credentials_backup.enc to secure location
2. Store multiple copies (external drive, cloud, password manager)
3. Test decryption to verify backup integrity
4. Change default admin passwords after first login
5. Regularly rotate API keys and passwords
6. Enable 2FA where available
7. Keep credentials backup separate from homelab server

 SUPPORT:
- GitHub: https://github.com/your-repo/ansible-homelab
- Documentation: https://docs.$domain
- Community: https://discord.gg/homelab

===============================================
EOF

    print_success "Post-deployment configuration completed"
}

# Main execution
main() {
    print_header
    
    log "Starting seamless deployment setup with secure vault generation"
    
    check_prerequisites
    get_configuration
    generate_secure_vault
    create_configuration
    setup_ssh
    install_collections
    validate_setup
    
    echo ""
    echo -e "${YELLOW}Configuration Summary:${NC}"
    echo "Domain: $domain"
    echo "Server: $username@$ip_address"
    echo "Admin Email: $admin_email"
    echo "Security: $([ "$security_enabled" = "Y" ] && echo "Enabled" || echo "Disabled")"
    echo "Media: $([ "$media_enabled" = "Y" ] && echo "Enabled" || echo "Disabled")"
    echo "Monitoring: $([ "$monitoring_enabled" = "Y" ] && echo "Enabled" || echo "Disabled")"
    echo "Utilities: $([ "$utilities_enabled" = "Y" ] && echo "Enabled" || echo "Disabled")"
    echo "Productivity: $([ "$productivity_enabled" = "Y" ] && echo "Enabled" || echo "Disabled")"
    echo "Automation: $([ "$automation_enabled" = "Y" ] && echo "Enabled" || echo "Disabled")"
    echo "Immich: $([ "$immich_enabled" = "Y" ] && echo "Enabled" || echo "Disabled")"
    echo "Reconya: $([ "$reconya_enabled" = "Y" ] && echo "Enabled" || echo "Disabled")"
    echo "Linkwarden: $([ "$linkwarden_enabled" = "Y" ] && echo "Enabled" || echo "Disabled")"
    echo "n8n: $([ "$n8n_enabled" = "Y" ] && echo "Enabled" || echo "Disabled")"
    echo "ErsatzTV: $([ "$ersatztv_enabled" = "Y" ] && echo "Enabled" || echo "Disabled")"
    echo ""
    echo -e "${CYAN} Security Features:${NC}"
    echo "✓ Cryptographically secure password generation"
    echo "✓ Encrypted vault file"
    echo "✓ Secure credentials backup"
    echo "✓ Complex password requirements"
    echo "✓ API key prefixing for identification"
    echo ""
    
    read -p "Proceed with deployment? [Y/n]: " proceed
    if [[ ! $proceed =~ ^[Yy]$ ]] && [[ -n $proceed ]]; then
        print_warning "Deployment cancelled"
        exit 0
    fi
    
    deploy_infrastructure
    post_deployment
    
    echo ""
    print_header
    echo -e "${GREEN}🎉 Deployment completed successfully!${NC}"
    echo ""
    echo "🔐 CREDENTIALS BACKUP - YOUR HOMELAB KEYS"
    echo "📁 File: $credentials_backup_path"
    echo "📊 Size: $(du -h credentials_backup.enc | cut -f1)"
    echo "🔒 Status: Encrypted with AES-256-CBC"
    echo ""
    echo "🌐 Access your homelab at: https://dash.$domain"
    if [[ "$immich_enabled" = "Y" ]]; then
        echo "📸 Access Immich at: https://${immich_subdomain:-immich}.$domain"
    fi
    if [[ "$reconya_enabled" = "Y" ]]; then
        echo "🔍 Access Reconya at: https://${reconya_subdomain:-reconya}.$domain"
    fi
    if [[ "$linkwarden_enabled" = "Y" ]]; then
        echo "🔖 Access Linkwarden at: https://${linkwarden_subdomain:-bookmarks}.$domain"
    fi
    if [[ "$n8n_enabled" = "Y" ]]; then
        echo "⚡ Access n8n at: https://${n8n_subdomain:-n8n}.$domain"
    fi
    if [[ "$ersatztv_enabled" = "Y" ]]; then
        echo "📺 Access ErsatzTV at: https://${ersatztv_subdomain:-tv}.$domain"
    fi
    echo "📋 Check deployment_summary.txt for full details"
    echo ""
    echo -e "${RED}🚨 CRITICAL: Backup credentials_backup.enc immediately!${NC}"
    echo -e "${YELLOW}This file contains ALL passwords and secrets for your homelab!${NC}"
    echo ""
    log "Seamless deployment with secure vault generation completed successfully"
}

# Run main function
main "$@" 